{"ast":null,"code":"const Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\nconst math = require('./math');\nconst check = require('./check');\nconst convert = require('./convert');\nconst concat = Buffer.concat;\nconst G = curve.G;\nconst n = curve.n;\nconst MUSIG_TAG = convert.hash(Buffer.from('MuSig coefficient'));\n\n// Computes ell = SHA256(pubKeys[0], ..., pubKeys[pubKeys.length-1]) with\n// pubKeys serialized in compressed form.\nfunction computeEll(pubKeys) {\n  check.checkPubKeyArr(pubKeys);\n  return convert.hash(concat(pubKeys));\n}\nfunction computeCoefficient(ell, idx) {\n  const idxBuf = Buffer.alloc(4);\n  idxBuf.writeUInt32LE(idx);\n  const data = concat([MUSIG_TAG, MUSIG_TAG, ell, idxBuf]);\n  return convert.bufferToInt(convert.hash(data)).mod(n);\n}\nfunction pubKeyCombine(pubKeys, pubKeyHash) {\n  const ell = pubKeyHash || computeEll(pubKeys);\n  let X = null;\n  for (let i = 0; i < pubKeys.length; i++) {\n    const Xi = math.liftX(pubKeys[i]);\n    const coefficient = computeCoefficient(ell, i);\n    const summand = Xi.multiply(coefficient);\n    if (X === null) {\n      X = summand;\n    } else {\n      X = X.add(summand);\n    }\n  }\n  return X;\n}\nfunction sessionInitialize(sessionId, privateKey, message, pubKeyCombined, pkParity, ell, idx) {\n  check.checkSessionParams(sessionId, privateKey, message, pubKeyCombined, ell);\n  const session = {\n    sessionId,\n    message,\n    pubKeyCombined,\n    pkParity,\n    ell,\n    idx\n  };\n  const coefficient = computeCoefficient(ell, idx);\n  session.secretKey = privateKey.multiply(coefficient).mod(n);\n  session.ownKeyParity = math.isEven(G.multiply(privateKey));\n  if (session.pkParity !== session.ownKeyParity) {\n    session.secretKey = n.subtract(session.secretKey);\n  }\n  const nonceData = concat([sessionId, message, session.pubKeyCombined, convert.intToBuffer(privateKey)]);\n  session.secretNonce = convert.bufferToInt(convert.hash(nonceData));\n  check.checkRange('secretNonce', session.secretNonce);\n  const R = G.multiply(session.secretNonce);\n  session.nonce = convert.intToBuffer(R.affineX);\n  session.nonceParity = math.isEven(R);\n  session.commitment = convert.hash(session.nonce);\n  return session;\n}\nfunction sessionNonceCombine(session, nonces) {\n  check.checkNonceArr(nonces);\n  let R = math.liftX(nonces[0]);\n  for (let i = 1; i < nonces.length; i++) {\n    R = R.add(math.liftX(nonces[i]));\n  }\n  session.combinedNonceParity = math.isEven(R);\n  return convert.intToBuffer(R.affineX);\n}\nfunction partialSign(session, message, nonceCombined, pubKeyCombined) {\n  const e = math.getE(nonceCombined, pubKeyCombined, message);\n  const sk = session.secretKey;\n  let k = session.secretNonce;\n  if (session.nonceParity !== session.combinedNonceParity) {\n    k = n.subtract(k);\n  }\n  return sk.multiply(e).add(k).mod(n);\n}\nfunction partialSigVerify(session, partialSig, nonceCombined, idx, pubKey, nonce) {\n  let e = math.getE(nonceCombined, session.pubKeyCombined, session.message);\n  const coefficient = computeCoefficient(session.ell, idx);\n  const Pj = math.liftX(pubKey);\n  const Ri = math.liftX(nonce);\n  if (!session.pkParity) {\n    e = n.subtract(e);\n  }\n  let RP = math.getR(partialSig, e.multiply(coefficient).mod(n), Pj);\n  if (session.combinedNonceParity) {\n    RP = RP.negate();\n  }\n  const sum = RP.add(Ri);\n  if (!sum.curve.isInfinity(sum)) {\n    throw new Error('partial signature verification failed');\n  }\n}\nfunction partialSigCombine(nonceCombined, partialSigs) {\n  const R = math.liftX(nonceCombined);\n  check.checkArray('partialSigs', partialSigs);\n  const Rx = convert.intToBuffer(R.affineX);\n  let s = partialSigs[0];\n  for (let i = 1; i < partialSigs.length; i++) {\n    s = s.add(partialSigs[i]).mod(n);\n  }\n  return concat([Rx, convert.intToBuffer(s)]);\n}\nmodule.exports = {\n  computeEll,\n  computeCoefficient,\n  pubKeyCombine,\n  sessionInitialize,\n  sessionNonceCombine,\n  partialSign,\n  partialSigVerify,\n  partialSigCombine\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}