{"ast":null,"code":"const Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\nconst math = require('./math');\nconst convert = require('./convert');\nconst concat = Buffer.concat;\nconst G = curve.G;\nfunction taprootConstruct(pubKey, scripts) {\n  // If the spending conditions do not require a script path, the output key should commit to an unspendable script path\n  // instead of having no script path. This can be achieved by computing the output key point as\n  // Q = P + int(hashTapTweak(bytes(P)))G.\n  // https://en.bitcoin.it/wiki/BIP_0341#cite_note-22\n  if (!scripts) {\n    scripts = [];\n  }\n  const h = taprootTree(scripts);\n  const Px = convert.intToBuffer(pubKey.affineX);\n  const P = math.liftX(Px);\n  const tweak = convert.bufferToInt(math.taggedHash('TapTweak', concat([Px, h])));\n  const Q = P.add(G.multiply(tweak));\n  return convert.intToBuffer(Q.affineX);\n}\nfunction taprootTree(scripts) {\n  let h = Buffer.alloc(32, 0);\n  if (!scripts || scripts.length === 0) {\n    return new Buffer(0);\n  }\n\n  // TODO(guggero): Implement script part.\n  return h;\n}\nmodule.exports = {\n  taprootConstruct\n};","map":{"version":3,"names":["Buffer","require","ecurve","curve","getCurveByName","math","convert","concat","G","taprootConstruct","pubKey","scripts","h","taprootTree","Px","intToBuffer","affineX","P","liftX","tweak","bufferToInt","taggedHash","Q","add","multiply","alloc","length","module","exports"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/bip-schnorr/src/taproot.js"],"sourcesContent":["const Buffer = require('safe-buffer').Buffer;\r\nconst ecurve = require('ecurve');\r\nconst curve = ecurve.getCurveByName('secp256k1');\r\nconst math = require('./math');\r\nconst convert = require('./convert');\r\n\r\nconst concat = Buffer.concat;\r\nconst G = curve.G;\r\n\r\nfunction taprootConstruct(pubKey, scripts) {\r\n  // If the spending conditions do not require a script path, the output key should commit to an unspendable script path\r\n  // instead of having no script path. This can be achieved by computing the output key point as\r\n  // Q = P + int(hashTapTweak(bytes(P)))G.\r\n  // https://en.bitcoin.it/wiki/BIP_0341#cite_note-22\r\n  if (!scripts) {\r\n    scripts = [];\r\n  }\r\n  const h = taprootTree(scripts);\r\n  const Px = convert.intToBuffer(pubKey.affineX);\r\n  const P = math.liftX(Px);\r\n  const tweak = convert.bufferToInt(math.taggedHash('TapTweak', concat([Px, h])));\r\n  const Q = P.add(G.multiply(tweak));\r\n  return convert.intToBuffer(Q.affineX);\r\n}\r\n\r\nfunction taprootTree(scripts) {\r\n  let h = Buffer.alloc(32, 0);\r\n  if (!scripts || scripts.length === 0) {\r\n    return new Buffer(0);\r\n  }\r\n\r\n  // TODO(guggero): Implement script part.\r\n  return h;\r\n}\r\n\r\nmodule.exports = {\r\n  taprootConstruct,\r\n};\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,MAAM;AAC5C,MAAME,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,KAAK,GAAGD,MAAM,CAACE,cAAc,CAAC,WAAW,CAAC;AAChD,MAAMC,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMK,OAAO,GAAGL,OAAO,CAAC,WAAW,CAAC;AAEpC,MAAMM,MAAM,GAAGP,MAAM,CAACO,MAAM;AAC5B,MAAMC,CAAC,GAAGL,KAAK,CAACK,CAAC;AAEjB,SAASC,gBAAgB,CAACC,MAAM,EAAEC,OAAO,EAAE;EACzC;EACA;EACA;EACA;EACA,IAAI,CAACA,OAAO,EAAE;IACZA,OAAO,GAAG,EAAE;EACd;EACA,MAAMC,CAAC,GAAGC,WAAW,CAACF,OAAO,CAAC;EAC9B,MAAMG,EAAE,GAAGR,OAAO,CAACS,WAAW,CAACL,MAAM,CAACM,OAAO,CAAC;EAC9C,MAAMC,CAAC,GAAGZ,IAAI,CAACa,KAAK,CAACJ,EAAE,CAAC;EACxB,MAAMK,KAAK,GAAGb,OAAO,CAACc,WAAW,CAACf,IAAI,CAACgB,UAAU,CAAC,UAAU,EAAEd,MAAM,CAAC,CAACO,EAAE,EAAEF,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/E,MAAMU,CAAC,GAAGL,CAAC,CAACM,GAAG,CAACf,CAAC,CAACgB,QAAQ,CAACL,KAAK,CAAC,CAAC;EAClC,OAAOb,OAAO,CAACS,WAAW,CAACO,CAAC,CAACN,OAAO,CAAC;AACvC;AAEA,SAASH,WAAW,CAACF,OAAO,EAAE;EAC5B,IAAIC,CAAC,GAAGZ,MAAM,CAACyB,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;EAC3B,IAAI,CAACd,OAAO,IAAIA,OAAO,CAACe,MAAM,KAAK,CAAC,EAAE;IACpC,OAAO,IAAI1B,MAAM,CAAC,CAAC,CAAC;EACtB;;EAEA;EACA,OAAOY,CAAC;AACV;AAEAe,MAAM,CAACC,OAAO,GAAG;EACfnB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}