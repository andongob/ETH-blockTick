{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar buffer = require('buffer');\nvar compare = Buffer.compare || require('buffer-compare');\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\nvar SighashWitness = require('./sighashwitness');\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\n\n/**\r\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\r\n *\r\n * @param {*} serialized\r\n * @constructor\r\n */\nfunction Transaction(serialized, opts) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized, opts);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\nvar CURRENT_VERSION = 2;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 150;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000;\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\r\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\r\n * it dropping any additional information that inputs and outputs may have hold\r\n *\r\n * @param {Transaction} transaction\r\n * @return {Transaction}\r\n */\nTransaction.shallowCopy = function (transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\n    return this._hash;\n  }\n};\nvar witnessHashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return new BufferReader(this._getWitnessHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'witnessHash', witnessHashProperty);\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function () {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\r\n * Retrieve the little endian hash of the transaction (used for serialization)\r\n * @return {Buffer}\r\n */\nTransaction.prototype._getHash = function () {\n  return Hash.sha256sha256(this.toBuffer(true));\n};\n\n/**\r\n * Retrieve the little endian hash of the transaction including witness data\r\n * @return {Buffer}\r\n */\nTransaction.prototype._getWitnessHash = function () {\n  return Hash.sha256sha256(this.toBuffer(false));\n};\n\n/**\r\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\r\n * (decoderawtransaction, sendrawtransaction)\r\n *\r\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\r\n *   it's expected to contain a set of flags to skip certain tests:\r\n * * `disableAll`: disable all checks\r\n * * `disableSmallFees`: disable checking for fees that are too small\r\n * * `disableLargeFees`: disable checking for fees that are too large\r\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\r\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\r\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\r\n * @return {string}\r\n */\nTransaction.prototype.serialize = function (unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n\n/**\r\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\r\n * (decoderawtransaction, sendrawtransaction)\r\n *\r\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\r\n * @return {string}\r\n */\nTransaction.prototype.checkedSerialize = function (opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' + 'https://bitcore.io/api/lib/transaction#serialization-checks';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\nTransaction.prototype.invalidSatoshis = function () {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\r\n * Retrieve a possible error that could appear when trying to serialize and\r\n * broadcast this transaction.\r\n *\r\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\r\n * @return {bitcore.Error}\r\n */\nTransaction.prototype.getSerializationError = function (opts) {\n  opts = opts || {};\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n  return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n};\nTransaction.prototype._hasFeeError = function (opts, unspent) {\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different('Unspent value is ' + unspent + ' but specified fee is ' + this._fee);\n  }\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing('Fee is too large and no change address was provided');\n      }\n      return new errors.Transaction.FeeError.TooLarge('expected less than ' + maximumFee + ' but got ' + unspent);\n    }\n  }\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall('expected more than ' + minimumFee + ' but got ' + unspent);\n    }\n  }\n};\nTransaction.prototype._missingChange = function () {\n  return !this._changeScript;\n};\nTransaction.prototype._hasDustOutputs = function (opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\nTransaction.prototype._isMissingSignatures = function (opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\nTransaction.prototype.inspect = function () {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\nTransaction.prototype.toBuffer = function (noWitness) {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer, noWitness).toBuffer();\n};\nTransaction.prototype.hasWitnesses = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].hasWitnesses()) {\n      return true;\n    }\n  }\n  return false;\n};\nTransaction.prototype.toBufferWriter = function (writer, noWitness) {\n  writer.writeInt32LE(this.version);\n  var hasWitnesses = this.hasWitnesses();\n  if (hasWitnesses && !noWitness) {\n    writer.write(Buffer.from('0001', 'hex'));\n  }\n  writer.writeVarintNum(this.inputs.length);\n  _.each(this.inputs, function (input) {\n    input.toBufferWriter(writer);\n  });\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function (output) {\n    output.toBufferWriter(writer);\n  });\n  if (hasWitnesses && !noWitness) {\n    _.each(this.inputs, function (input) {\n      var witnesses = input.getWitnesses();\n      writer.writeVarintNum(witnesses.length);\n      for (var j = 0; j < witnesses.length; j++) {\n        writer.writeVarintNum(witnesses[j].length);\n        writer.write(witnesses[j]);\n      }\n    });\n  }\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\nTransaction.prototype.fromBuffer = function (buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\nTransaction.prototype.fromBufferReader = function (reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  this.version = reader.readInt32LE();\n  var sizeTxIns = reader.readVarintNum();\n\n  // check for segwit\n  var hasWitnesses = false;\n  if (sizeTxIns === 0 && reader.buf[reader.pos] !== 0) {\n    reader.pos += 1;\n    hasWitnesses = true;\n    sizeTxIns = reader.readVarintNum();\n  }\n  for (var i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n  var sizeTxOuts = reader.readVarintNum();\n  for (var j = 0; j < sizeTxOuts; j++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n  if (hasWitnesses) {\n    for (var k = 0; k < sizeTxIns; k++) {\n      var itemCount = reader.readVarintNum();\n      var witnesses = [];\n      for (var l = 0; l < itemCount; l++) {\n        var size = reader.readVarintNum();\n        var item = reader.read(size);\n        witnesses.push(item);\n      }\n      this.inputs[k].setWitnesses(witnesses);\n    }\n  }\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function (input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function (output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\nTransaction.prototype.fromObject = function fromObject(arg, opts) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function (input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if ((script.isScriptHashOut() || script.isWitnessScriptHashOut()) && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures, opts);\n    } else if (script.isPublicKeyHashOut() || script.isWitnessPublicKeyHashOut() || script.isScriptHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function (output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\nTransaction.prototype._checkConsistency = function (arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript, 'Change script is expected.');\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\n    $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString(), 'Change output has an unexpected script.');\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\n  }\n};\n\n/**\r\n * Sets nLockTime so that transaction is not valid until the desired date(a\r\n * timestamp in seconds since UNIX epoch is also accepted)\r\n *\r\n * @param {Date | Number} time\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.lockUntilDate = function (time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n  this.nLockTime = time;\n  return this;\n};\n\n/**\r\n * Sets nLockTime so that transaction is not valid until the desired block\r\n * height.\r\n *\r\n * @param {Number} height\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.lockUntilBlockHeight = function (height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n  this.nLockTime = height;\n  return this;\n};\n\n/**\r\n *  Returns a semantic version of the transaction's nLockTime.\r\n *  @return {Number|Date}\r\n *  If nLockTime is 0, it returns null,\r\n *  if it is < 500000000, it returns a block height (number)\r\n *  else it returns a Date object.\r\n */\nTransaction.prototype.getLockTime = function () {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\nTransaction.prototype.fromString = function (string) {\n  this.fromBuffer(buffer.Buffer.from(string, 'hex'));\n};\nTransaction.prototype._newTransaction = function () {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\r\n * @typedef {Object} Transaction~fromObject\r\n * @property {string} prevTxId\r\n * @property {number} outputIndex\r\n * @property {(Buffer|string|Script)} script\r\n * @property {number} satoshis\r\n */\n\n/**\r\n * Add an input to this transaction. This is a high level interface\r\n * to add an input, for more control, use @{link Transaction#addInput}.\r\n *\r\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\r\n * and a slightly fancier format recognized by bitcore:\r\n *\r\n * ```\r\n * {\r\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\r\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\r\n *  outputIndex: 0,\r\n *  script: Script.empty(),\r\n *  satoshis: 1020000\r\n * }\r\n * ```\r\n * Where `address` can be either a string or a bitcore Address object. The\r\n * same is true for `script`, which can be a string or a bitcore Script.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @example\r\n * ```javascript\r\n * var transaction = new Transaction();\r\n *\r\n * // From a pay to public key hash output from bitcoind's listunspent\r\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\r\n *\r\n * // From a pay to public key hash output\r\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\r\n *\r\n * // From a multisig P2SH output\r\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\r\n *                  ['03000...', '02000...'], 2);\r\n * ```\r\n *\r\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\r\n * @param {Array=} pubkeys\r\n * @param {number=} threshold\r\n * @param {Object=} opts - Several options:\r\n *        - noSorting: defaults to false, if true and is multisig, don't\r\n *                      sort the given public keys before creating the script\r\n */\nTransaction.prototype.from = function (utxo, pubkeys, threshold, opts) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function (utxo) {\n      self.from(utxo, pubkeys, threshold, opts);\n    });\n    return this;\n  }\n  var exists = _.some(this.inputs, function (input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\n\n/**\r\n * associateInputs - Update inputs with utxos, allowing you to specify value, and pubkey.\r\n * Populating these inputs allows for them to be signed with .sign(privKeys)\r\n *\r\n * @param {Array<Object>} utxos\r\n * @param {Array<string | PublicKey>} pubkeys\r\n * @param {number} threshold\r\n * @param {Object} opts\r\n * @returns {Array<number>}\r\n */\nTransaction.prototype.associateInputs = function (utxos, pubkeys, threshold, opts) {\n  let indexes = [];\n  for (let utxo of utxos) {\n    const index = this.inputs.findIndex(i => i.prevTxId.toString('hex') === utxo.txId && i.outputIndex === utxo.outputIndex);\n    indexes.push(index);\n    if (index >= 0) {\n      this.inputs[index] = this._getInputFrom(utxo, pubkeys, threshold, opts);\n    }\n  }\n  return indexes;\n};\nTransaction.prototype._selectInputType = function (utxo, pubkeys, threshold) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (pubkeys && threshold) {\n    if (utxo.script.isMultisigOut()) {\n      clazz = MultiSigInput;\n    } else if (utxo.script.isScriptHashOut() || utxo.script.isWitnessScriptHashOut()) {\n      clazz = MultiSigScriptHashInput;\n    }\n  } else if (utxo.script.isPublicKeyHashOut() || utxo.script.isWitnessPublicKeyHashOut() || utxo.script.isScriptHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  return clazz;\n};\nTransaction.prototype._getInputFrom = function (utxo, pubkeys, threshold, opts) {\n  utxo = new UnspentOutput(utxo);\n  const InputClass = this._selectInputType(utxo, pubkeys, threshold);\n  const input = {\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    sequenceNumber: utxo.sequenceNumber,\n    script: Script.empty()\n  };\n  let args = pubkeys && threshold ? [pubkeys, threshold, false, opts] : [];\n  return new InputClass(input, ...args);\n};\nTransaction.prototype._fromNonP2SH = function (utxo) {\n  const input = this._getInputFrom(utxo);\n  this.addInput(input);\n};\nTransaction.prototype._fromMultisigUtxo = function (utxo, pubkeys, threshold, opts) {\n  $.checkArgument(threshold <= pubkeys.length, 'Number of required signatures must be greater than the number of public keys');\n  const input = this._getInputFrom(utxo, pubkeys, threshold, opts);\n  this.addInput(input);\n};\n\n/**\r\n * Add an input to this transaction. The input must be an instance of the `Input` class.\r\n * It should have information about the Output that it's spending, but if it's not already\r\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\r\n *\r\n * @param {Input} input\r\n * @param {String|Script} outputScript\r\n * @param {number} satoshis\r\n * @return Transaction this, for chaining\r\n */\nTransaction.prototype.addInput = function (input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\r\n * Add an input to this transaction, without checking that the input has information about\r\n * the output that it's spending.\r\n *\r\n * @param {Input} input\r\n * @return Transaction this, for chaining\r\n */\nTransaction.prototype.uncheckedAddInput = function (input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\r\n * Returns true if the transaction has enough info on all inputs to be correctly validated\r\n *\r\n * @return {boolean}\r\n */\nTransaction.prototype.hasAllUtxoInfo = function () {\n  return _.every(this.inputs.map(function (input) {\n    return !!input.output;\n  }));\n};\n\n/**\r\n * Manually set the fee for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n *\r\n * @param {number} amount satoshis to be sent\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.fee = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\r\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n *\r\n * @param {number} amount satoshis per KB to be sent\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.feePerKb = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\r\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n * fee per Byte will be ignored if fee per KB is set\r\n *\r\n * @param {number} amount satoshis per Byte to be sent\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.feePerByte = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerByte = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\r\n * Set the change address for this transaction\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {Address} address An address for change to be sent to.\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.change = function (address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\r\n * @return {Output} change output, if it exists\r\n */\nTransaction.prototype.getChangeOutput = function () {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\r\n * @typedef {Object} Transaction~toObject\r\n * @property {(string|Address)} address\r\n * @property {number} satoshis\r\n */\n\n/**\r\n * Add an output to the transaction.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {(string|Address|Array.<Transaction~toObject>)} address\r\n * @param {number} amount in satoshis\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.to = function (address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function (to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n  $.checkArgument(JSUtil.isNaturalNumber(amount), 'Amount is expected to be a positive integer');\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\r\n * Add an OP_RETURN output to the transaction.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\r\n *    In case of a string, the UTF-8 representation will be stored\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.addData = function (value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n/**\r\n * Add an output to the transaction.\r\n *\r\n * @param {Output} output the output to add.\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.addOutput = function (output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\r\n * Remove all outputs from the transaction.\r\n *\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.clearOutputs = function () {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\nTransaction.prototype._addOutput = function (output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n/**\r\n * Calculates or gets the total output amount in satoshis\r\n *\r\n * @return {Number} the transaction total output amount\r\n */\nTransaction.prototype._getOutputAmount = function () {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function (output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n/**\r\n * Calculates or gets the total input amount in satoshis\r\n *\r\n * @return {Number} the transaction total input amount\r\n */\nTransaction.prototype._getInputAmount = function () {\n  if (_.isUndefined(this._inputAmount)) {\n    this._inputAmount = _.sumBy(this.inputs, function (input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      return input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\nTransaction.prototype._updateChangeOutput = function () {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > Transaction.DUST_AMOUNT) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\r\n * Calculates the fee of the transaction.\r\n *\r\n * If there's a fixed fee set, return that.\r\n *\r\n * If there is no change output set, the fee is the\r\n * total value of the outputs minus inputs. Note that\r\n * a serialized transaction only specifies the value\r\n * of its outputs. (The value of inputs are recorded\r\n * in the previous transaction outputs being spent.)\r\n * This method therefore raises a \"MissingPreviousOutput\"\r\n * error when called on a serialized transaction.\r\n *\r\n * If there's no fee set and no change address,\r\n * estimate the fee based on size.\r\n *\r\n * @return {Number} fee of this transaction in satoshis\r\n */\nTransaction.prototype.getFee = function () {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\r\n * Estimates fee from serialized transaction size in bytes.\r\n */\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\n  function getFee(size) {\n    return size * feeRate;\n  }\n  var fee = Math.ceil(getFee(estimatedSize));\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\n  if (!this._changeScript || available <= feeWithChange) {\n    return fee;\n  }\n  return feeWithChange;\n};\nTransaction.prototype._getUnspentValue = function () {\n  return this._getInputAmount() - this._getOutputAmount();\n};\nTransaction.prototype._clearSignatures = function () {\n  _.each(this.inputs, function (input) {\n    input.clearSignatures();\n  });\n};\nTransaction.prototype._estimateSize = function () {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function (input) {\n    result += 32 + 4; // prevout size:w\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function (output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return Math.ceil(result);\n};\nTransaction.prototype._removeOutput = function (index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\nTransaction.prototype.removeOutput = function (index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\r\n * Sort a transaction's inputs and outputs according to BIP69\r\n *\r\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.sort = function () {\n  this.sortInputs(function (inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return compare(first.prevTxId, second.prevTxId) || first.outputIndex - second.outputIndex || first.i - second.i; // to ensure stable sort\n    });\n\n    return copy;\n  });\n  this.sortOutputs(function (outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    let i = 0;\n    copy.forEach(x => {\n      x.i = i++;\n    });\n    copy.sort(function (first, second) {\n      return first.satoshis - second.satoshis || compare(first.script.toBuffer(), second.script.toBuffer()) || first.i - second.i; // to ensure stable sort\n    });\n\n    return copy;\n  });\n  return this;\n};\n\n/**\r\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\r\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\r\n *\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.shuffleOutputs = function () {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\r\n * Sort this transaction's outputs, according to a given sorting function that\r\n * takes an array as argument and returns a new array, with the same elements\r\n * but with a different order. The argument function MUST NOT modify the order\r\n * of the original array\r\n *\r\n * @param {Function} sortingFunction\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.sortOutputs = function (sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\r\n * Sort this transaction's inputs, according to a given sorting function that\r\n * takes an array as argument and returns a new array, with the same elements\r\n * but with a different order.\r\n *\r\n * @param {Function} sortingFunction\r\n * @return {Transaction} this\r\n */\nTransaction.prototype.sortInputs = function (sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\nTransaction.prototype._newOutputOrder = function (newOutputs) {\n  var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n  this.outputs = newOutputs;\n  return this;\n};\nTransaction.prototype.removeInput = function (txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function (input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\r\n * Sign the transaction using one or more private keys.\r\n *\r\n * It tries to sign each input, verifying that the signature will be valid\r\n * (matches a public key).\r\n *\r\n * @param {Array|String|PrivateKey} privateKey\r\n * @param {number} sigtype\r\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.sign = function (privateKey, sigtype, signingMethod) {\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function (privateKey) {\n      self.sign(privateKey, sigtype, signingMethod);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function (signature) {\n    self.applySignature(signature, signingMethod);\n  });\n  return this;\n};\nTransaction.prototype.getSignatures = function (privKey, sigtype, signingMethod) {\n  privKey = new PrivateKey(privKey);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function (signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\r\n * Add a signature to the transaction\r\n *\r\n * @param {Object} signature\r\n * @param {number} signature.inputIndex\r\n * @param {number} signature.sigtype\r\n * @param {PublicKey} signature.publicKey\r\n * @param {Signature} signature.signature\r\n * @param {String} signingMethod - 'ecdsa' to sign transaction\r\n * @return {Transaction} this, for chaining\r\n */\nTransaction.prototype.applySignature = function (signature, signingMethod) {\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\n  return this;\n};\nTransaction.prototype.isFullySigned = function () {\n  _.each(this.inputs, function (input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n    }\n  });\n  return _.every(_.map(this.inputs, function (input) {\n    return input.isFullySigned();\n  }));\n};\nTransaction.prototype.isValidSignature = function (signature, signingMethod) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature, signingMethod);\n};\n\n/**\r\n * @param {String} signingMethod method used to sign - 'ecdsa' or 'schnorr' (future signing method)\r\n * @returns {bool} whether the signature is valid for this transaction input\r\n */\nTransaction.prototype.verifySignature = function (sig, pubkey, nin, subscript, sigversion, satoshis, signingMethod) {\n  if (_.isUndefined(sigversion)) {\n    sigversion = 0;\n  }\n  if (sigversion === 1) {\n    var subscriptBuffer = subscript.toBuffer();\n    var scriptCodeWriter = new BufferWriter();\n    scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\n    scriptCodeWriter.write(subscriptBuffer);\n    var satoshisBuffer;\n    if (satoshis) {\n      $.checkState(JSUtil.isNaturalNumber(satoshis));\n      satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\n    } else {\n      satoshisBuffer = this.inputs[nin].getSatoshisBuffer();\n    }\n    var verified = SighashWitness.verify(this, sig, pubkey, nin, scriptCodeWriter.toBuffer(), satoshisBuffer, signingMethod);\n    return verified;\n  }\n  return Sighash.verify(this, sig, pubkey, nin, subscript, signingMethod);\n};\n\n/**\r\n * Check that a transaction passes basic sanity tests. If not, return a string\r\n * describing the error. This function contains the same logic as\r\n * CheckTransaction in bitcoin core.\r\n */\nTransaction.prototype.verify = function () {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\r\n * Analogous to bitcoind's IsCoinBase function in transaction.h\r\n */\nTransaction.prototype.isCoinbase = function () {\n  return this.inputs.length === 1 && this.inputs[0].isNull();\n};\n\n/**\r\n * Determines if this transaction can be replaced in the mempool with another\r\n * transaction that provides a sufficiently higher fee (RBF).\r\n */\nTransaction.prototype.isRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\r\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\r\n * includes a sufficiently higher fee. It will set the sequenceNumber to\r\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\r\n * already enable RBF.\r\n */\nTransaction.prototype.enableRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\nTransaction.prototype.setVersion = function (version) {\n  $.checkArgument(JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION, 'Wrong version number');\n  this.version = version;\n  return this;\n};\nmodule.exports = Transaction;","map":{"version":3,"names":["_","require","$","buffer","compare","Buffer","errors","BufferUtil","JSUtil","BufferReader","BufferWriter","Hash","Signature","Sighash","SighashWitness","Address","UnspentOutput","Input","PublicKeyHashInput","PublicKeyHash","PublicKeyInput","PublicKey","MultiSigScriptHashInput","MultiSigScriptHash","MultiSigInput","MultiSig","Output","Script","PrivateKey","BN","Transaction","serialized","opts","inputs","outputs","_inputAmount","undefined","_outputAmount","shallowCopy","isHexa","fromString","isBuffer","fromBuffer","isObject","fromObject","InvalidArgument","_newTransaction","CURRENT_VERSION","DEFAULT_NLOCKTIME","MAX_BLOCK_SIZE","DUST_AMOUNT","FEE_SECURITY_MARGIN","MAX_MONEY","NLOCKTIME_BLOCKHEIGHT_LIMIT","NLOCKTIME_MAX_VALUE","FEE_PER_KB","CHANGE_OUTPUT_MAX_SIZE","MAXIMUM_EXTRA_SIZE","transaction","copy","toBuffer","hashProperty","configurable","enumerable","get","_hash","_getHash","readReverse","toString","witnessHashProperty","_getWitnessHash","Object","defineProperty","prototype","ioProperty","_getInputAmount","_getOutputAmount","sha256sha256","serialize","unsafe","disableAll","uncheckedSerialize","checkedSerialize","serializationError","getSerializationError","message","invalidSatoshis","invalid","i","length","InvalidSatoshis","unspent","_getUnspentValue","unspentError","disableMoreOutputThanInput","InvalidOutputAmountSum","_hasFeeError","_hasDustOutputs","_isMissingSignatures","isUndefined","_fee","FeeError","Different","disableLargeFees","maximumFee","Math","floor","_estimateFee","_missingChange","ChangeAddressMissing","TooLarge","disableSmallFees","minimumFee","ceil","TooSmall","_changeScript","disableDustOutputs","index","output","satoshis","script","isDataOut","DustOutputs","disableIsFullySigned","isFullySigned","MissingSignatures","inspect","noWitness","writer","toBufferWriter","hasWitnesses","writeInt32LE","version","write","from","writeVarintNum","each","input","witnesses","getWitnesses","j","writeUInt32LE","nLockTime","reader","fromBufferReader","checkArgument","finished","readInt32LE","sizeTxIns","readVarintNum","buf","pos","push","sizeTxOuts","k","itemCount","l","size","item","read","setWitnesses","readUInt32LE","toObject","toJSON","forEach","obj","hash","changeScript","_changeIndex","changeIndex","fee","arg","self","uncheckedAddInput","txin","isScriptHashOut","isWitnessScriptHashOut","publicKeys","threshold","signatures","isPublicKeyHashOut","isWitnessPublicKeyHashOut","isPublicKeyOut","UnsupportedScript","addInput","addOutput","_checkConsistency","checkState","lockUntilDate","time","isNumber","LockTimeTooEarly","isDate","getTime","sequenceNumber","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","lockUntilBlockHeight","height","BlockHeightTooHigh","NLockTimeOutOfRange","getLockTime","Date","string","utxo","pubkeys","isArray","exists","some","prevTxId","txId","outputIndex","_fromMultisigUtxo","_fromNonP2SH","associateInputs","utxos","indexes","findIndex","_getInputFrom","_selectInputType","clazz","isMultisigOut","InputClass","empty","args","outputScript","checkArgumentType","NeedMoreInfo","_updateChangeOutput","hasAllUtxoInfo","every","map","amount","feePerKb","_feePerKb","feePerByte","_feePerByte","change","address","fromAddress","getChangeOutput","to","isNaturalNumber","addData","value","buildDataOut","_addOutput","clearOutputs","_clearSignatures","sumBy","MissingPreviousOutput","_removeOutput","available","getFee","changeAmount","isCoinbase","estimatedSize","_estimateSize","feeRate","feeWithChange","clearSignatures","result","without","removeOutput","sort","sortInputs","Array","concat","apply","x","first","second","sortOutputs","shuffleOutputs","shuffle","sortingFunction","outs","_newOutputOrder","newOutputs","isInvalidSorting","difference","InvalidSorting","changeOutput","removeInput","InvalidIndex","sign","privateKey","sigtype","signingMethod","getSignatures","signature","applySignature","privKey","SIGHASH_ALL","results","hashData","sha256ripemd160","publicKey","forEachInput","inputIndex","addSignature","UnableToVerifySignature","isValidSignature","verifySignature","sig","pubkey","nin","subscript","sigversion","subscriptBuffer","scriptCodeWriter","satoshisBuffer","writeUInt64LEBN","getSatoshisBuffer","verified","verify","valueoutbn","txout","_satoshisBN","gt","add","txinmap","inputid","_scriptBuffer","isNull","isRBF","MAXINT","enableRBF","DEFAULT_RBF_SEQNUMBER","setVersion","module","exports"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bitcore-lib/lib/transaction/transaction.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\nvar $ = require('../util/preconditions');\r\nvar buffer = require('buffer');\r\nvar compare = Buffer.compare || require('buffer-compare');\r\n\r\nvar errors = require('../errors');\r\nvar BufferUtil = require('../util/buffer');\r\nvar JSUtil = require('../util/js');\r\nvar BufferReader = require('../encoding/bufferreader');\r\nvar BufferWriter = require('../encoding/bufferwriter');\r\nvar Hash = require('../crypto/hash');\r\nvar Signature = require('../crypto/signature');\r\nvar Sighash = require('./sighash');\r\nvar SighashWitness = require('./sighashwitness');\r\n\r\nvar Address = require('../address');\r\nvar UnspentOutput = require('./unspentoutput');\r\nvar Input = require('./input');\r\nvar PublicKeyHashInput = Input.PublicKeyHash;\r\nvar PublicKeyInput = Input.PublicKey;\r\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\r\nvar MultiSigInput = Input.MultiSig;\r\nvar Output = require('./output');\r\nvar Script = require('../script');\r\nvar PrivateKey = require('../privatekey');\r\nvar BN = require('../crypto/bn');\r\n\r\n/**\r\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\r\n *\r\n * @param {*} serialized\r\n * @constructor\r\n */\r\nfunction Transaction(serialized, opts) {\r\n  if (!(this instanceof Transaction)) {\r\n    return new Transaction(serialized);\r\n  }\r\n  this.inputs = [];\r\n  this.outputs = [];\r\n  this._inputAmount = undefined;\r\n  this._outputAmount = undefined;\r\n\r\n  if (serialized) {\r\n    if (serialized instanceof Transaction) {\r\n      return Transaction.shallowCopy(serialized);\r\n    } else if (JSUtil.isHexa(serialized)) {\r\n      this.fromString(serialized);\r\n    } else if (BufferUtil.isBuffer(serialized)) {\r\n      this.fromBuffer(serialized);\r\n    } else if (_.isObject(serialized)) {\r\n      this.fromObject(serialized, opts);\r\n    } else {\r\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\r\n    }\r\n  } else {\r\n    this._newTransaction();\r\n  }\r\n}\r\nvar CURRENT_VERSION = 2;\r\nvar DEFAULT_NLOCKTIME = 0;\r\nvar MAX_BLOCK_SIZE = 1000000;\r\n\r\n// Minimum amount for an output for it not to be considered a dust output\r\nTransaction.DUST_AMOUNT = 546;\r\n\r\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\r\nTransaction.FEE_SECURITY_MARGIN = 150;\r\n\r\n// max amount of satoshis in circulation\r\nTransaction.MAX_MONEY = 21000000 * 1e8;\r\n\r\n// nlocktime limit to be considered block height rather than a timestamp\r\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\r\n\r\n// Max value for an unsigned 32 bit value\r\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\r\n\r\n// Value used for fee estimation (satoshis per kilobyte)\r\nTransaction.FEE_PER_KB = 100000;\r\n\r\n// Safe upper bound for change address script size in bytes\r\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\r\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\r\n\r\n/* Constructors and Serialization */\r\n\r\n/**\r\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\r\n * it dropping any additional information that inputs and outputs may have hold\r\n *\r\n * @param {Transaction} transaction\r\n * @return {Transaction}\r\n */\r\nTransaction.shallowCopy = function(transaction) {\r\n  var copy = new Transaction(transaction.toBuffer());\r\n  return copy;\r\n};\r\n\r\nvar hashProperty = {\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: function() {\r\n    this._hash = new BufferReader(this._getHash()).readReverse().toString('hex');\r\n    return this._hash;\r\n  }\r\n};\r\n\r\nvar witnessHashProperty = {\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: function() {\r\n    return new BufferReader(this._getWitnessHash()).readReverse().toString('hex');\r\n  }\r\n};\r\n\r\nObject.defineProperty(Transaction.prototype, 'witnessHash', witnessHashProperty);\r\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\r\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\r\n\r\nvar ioProperty = {\r\n  configurable: false,\r\n  enumerable: true,\r\n  get: function() {\r\n    return this._getInputAmount();\r\n  }\r\n};\r\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\r\nioProperty.get = function() {\r\n  return this._getOutputAmount();\r\n};\r\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\r\n\r\n/**\r\n * Retrieve the little endian hash of the transaction (used for serialization)\r\n * @return {Buffer}\r\n */\r\nTransaction.prototype._getHash = function() {\r\n  return Hash.sha256sha256(this.toBuffer(true));\r\n};\r\n\r\n/**\r\n * Retrieve the little endian hash of the transaction including witness data\r\n * @return {Buffer}\r\n */\r\nTransaction.prototype._getWitnessHash = function() {\r\n  return Hash.sha256sha256(this.toBuffer(false));\r\n};\r\n\r\n/**\r\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\r\n * (decoderawtransaction, sendrawtransaction)\r\n *\r\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\r\n *   it's expected to contain a set of flags to skip certain tests:\r\n * * `disableAll`: disable all checks\r\n * * `disableSmallFees`: disable checking for fees that are too small\r\n * * `disableLargeFees`: disable checking for fees that are too large\r\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\r\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\r\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\r\n * @return {string}\r\n */\r\nTransaction.prototype.serialize = function(unsafe) {\r\n  if (true === unsafe || unsafe && unsafe.disableAll) {\r\n    return this.uncheckedSerialize();\r\n  } else {\r\n    return this.checkedSerialize(unsafe);\r\n  }\r\n};\r\n\r\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\r\n  return this.toBuffer().toString('hex');\r\n};\r\n\r\n/**\r\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\r\n * (decoderawtransaction, sendrawtransaction)\r\n *\r\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\r\n * @return {string}\r\n */\r\nTransaction.prototype.checkedSerialize = function(opts) {\r\n  var serializationError = this.getSerializationError(opts);\r\n  if (serializationError) {\r\n    serializationError.message += ' - For more information please see: ' +\r\n      'https://bitcore.io/api/lib/transaction#serialization-checks';\r\n    throw serializationError;\r\n  }\r\n  return this.uncheckedSerialize();\r\n};\r\n\r\nTransaction.prototype.invalidSatoshis = function() {\r\n  var invalid = false;\r\n  for (var i = 0; i < this.outputs.length; i++) {\r\n    if (this.outputs[i].invalidSatoshis()) {\r\n      invalid = true;\r\n    }\r\n  }\r\n  return invalid;\r\n};\r\n\r\n/**\r\n * Retrieve a possible error that could appear when trying to serialize and\r\n * broadcast this transaction.\r\n *\r\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\r\n * @return {bitcore.Error}\r\n */\r\nTransaction.prototype.getSerializationError = function(opts) {\r\n  opts = opts || {};\r\n\r\n  if (this.invalidSatoshis()) {\r\n    return new errors.Transaction.InvalidSatoshis();\r\n  }\r\n\r\n  var unspent = this._getUnspentValue();\r\n  var unspentError;\r\n  if (unspent < 0) {\r\n    if (!opts.disableMoreOutputThanInput) {\r\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\r\n    }\r\n  } else {\r\n    unspentError = this._hasFeeError(opts, unspent);\r\n  }\r\n\r\n  return unspentError ||\r\n    this._hasDustOutputs(opts) ||\r\n    this._isMissingSignatures(opts);\r\n};\r\n\r\nTransaction.prototype._hasFeeError = function(opts, unspent) {\r\n\r\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\r\n    return new errors.Transaction.FeeError.Different(\r\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\r\n    );\r\n  }\r\n\r\n  if (!opts.disableLargeFees) {\r\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\r\n    if (unspent > maximumFee) {\r\n      if (this._missingChange()) {\r\n        return new errors.Transaction.ChangeAddressMissing(\r\n          'Fee is too large and no change address was provided'\r\n        );\r\n      }\r\n      return new errors.Transaction.FeeError.TooLarge(\r\n        'expected less than ' + maximumFee + ' but got ' + unspent\r\n      );\r\n    }\r\n  }\r\n\r\n  if (!opts.disableSmallFees) {\r\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\r\n    if (unspent < minimumFee) {\r\n      return new errors.Transaction.FeeError.TooSmall(\r\n        'expected more than ' + minimumFee + ' but got ' + unspent\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nTransaction.prototype._missingChange = function() {\r\n  return !this._changeScript;\r\n};\r\n\r\nTransaction.prototype._hasDustOutputs = function(opts) {\r\n  if (opts.disableDustOutputs) {\r\n    return;\r\n  }\r\n  var index, output;\r\n  for (index in this.outputs) {\r\n    output = this.outputs[index];\r\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\r\n      return new errors.Transaction.DustOutputs();\r\n    }\r\n  }\r\n};\r\n\r\nTransaction.prototype._isMissingSignatures = function(opts) {\r\n  if (opts.disableIsFullySigned) {\r\n    return;\r\n  }\r\n  if (!this.isFullySigned()) {\r\n    return new errors.Transaction.MissingSignatures();\r\n  }\r\n};\r\n\r\nTransaction.prototype.inspect = function() {\r\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\r\n};\r\n\r\nTransaction.prototype.toBuffer = function(noWitness) {\r\n  var writer = new BufferWriter();\r\n  return this.toBufferWriter(writer, noWitness).toBuffer();\r\n};\r\n\r\nTransaction.prototype.hasWitnesses = function() {\r\n  for (var i = 0; i < this.inputs.length; i++) {\r\n    if (this.inputs[i].hasWitnesses()) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nTransaction.prototype.toBufferWriter = function(writer, noWitness) {\r\n  writer.writeInt32LE(this.version);\r\n\r\n  var hasWitnesses = this.hasWitnesses();\r\n\r\n  if (hasWitnesses && !noWitness) {\r\n    writer.write(Buffer.from('0001', 'hex'));\r\n  }\r\n\r\n  writer.writeVarintNum(this.inputs.length);\r\n\r\n  _.each(this.inputs, function(input) {\r\n    input.toBufferWriter(writer);\r\n  });\r\n\r\n  writer.writeVarintNum(this.outputs.length);\r\n  _.each(this.outputs, function(output) {\r\n    output.toBufferWriter(writer);\r\n  });\r\n\r\n  if (hasWitnesses && !noWitness) {\r\n    _.each(this.inputs, function(input) {\r\n      var witnesses = input.getWitnesses();\r\n      writer.writeVarintNum(witnesses.length);\r\n      for (var j = 0; j < witnesses.length; j++) {\r\n        writer.writeVarintNum(witnesses[j].length);\r\n        writer.write(witnesses[j]);\r\n      }\r\n    });\r\n  }\r\n\r\n  writer.writeUInt32LE(this.nLockTime);\r\n  return writer;\r\n};\r\n\r\nTransaction.prototype.fromBuffer = function(buffer) {\r\n  var reader = new BufferReader(buffer);\r\n  return this.fromBufferReader(reader);\r\n};\r\n\r\nTransaction.prototype.fromBufferReader = function(reader) {\r\n  $.checkArgument(!reader.finished(), 'No transaction data received');\r\n\r\n  this.version = reader.readInt32LE();\r\n  var sizeTxIns = reader.readVarintNum();\r\n\r\n  // check for segwit\r\n  var hasWitnesses = false;\r\n  if (sizeTxIns === 0 && reader.buf[reader.pos] !== 0) {\r\n    reader.pos += 1;\r\n    hasWitnesses = true;\r\n    sizeTxIns = reader.readVarintNum();\r\n  }\r\n\r\n  for (var i = 0; i < sizeTxIns; i++) {\r\n    var input = Input.fromBufferReader(reader);\r\n    this.inputs.push(input);\r\n  }\r\n\r\n  var sizeTxOuts = reader.readVarintNum();\r\n  for (var j = 0; j < sizeTxOuts; j++) {\r\n    this.outputs.push(Output.fromBufferReader(reader));\r\n  }\r\n\r\n  if (hasWitnesses) {\r\n    for (var k = 0; k < sizeTxIns; k++) {\r\n      var itemCount = reader.readVarintNum();\r\n      var witnesses = [];\r\n      for (var l = 0; l < itemCount; l++) {\r\n        var size = reader.readVarintNum();\r\n        var item = reader.read(size);\r\n        witnesses.push(item);\r\n      }\r\n      this.inputs[k].setWitnesses(witnesses);\r\n    }\r\n  }\r\n\r\n  this.nLockTime = reader.readUInt32LE();\r\n  return this;\r\n};\r\n\r\n\r\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\r\n  var inputs = [];\r\n  this.inputs.forEach(function(input) {\r\n    inputs.push(input.toObject());\r\n  });\r\n  var outputs = [];\r\n  this.outputs.forEach(function(output) {\r\n    outputs.push(output.toObject());\r\n  });\r\n  var obj = {\r\n    hash: this.hash,\r\n    version: this.version,\r\n    inputs: inputs,\r\n    outputs: outputs,\r\n    nLockTime: this.nLockTime\r\n  };\r\n  if (this._changeScript) {\r\n    obj.changeScript = this._changeScript.toString();\r\n  }\r\n  if (!_.isUndefined(this._changeIndex)) {\r\n    obj.changeIndex = this._changeIndex;\r\n  }\r\n  if (!_.isUndefined(this._fee)) {\r\n    obj.fee = this._fee;\r\n  }\r\n  return obj;\r\n};\r\n\r\nTransaction.prototype.fromObject = function fromObject(arg, opts) {\r\n  /* jshint maxstatements: 20 */\r\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\r\n  var self = this;\r\n  var transaction;\r\n  if (arg instanceof Transaction) {\r\n    transaction = transaction.toObject();\r\n  } else {\r\n    transaction = arg;\r\n  }\r\n  _.each(transaction.inputs, function(input) {\r\n    if (!input.output || !input.output.script) {\r\n      self.uncheckedAddInput(new Input(input));\r\n      return;\r\n    }\r\n    var script = new Script(input.output.script);\r\n    var txin;\r\n    if ((script.isScriptHashOut() || script.isWitnessScriptHashOut()) && input.publicKeys && input.threshold) {\r\n      txin = new Input.MultiSigScriptHash(\r\n        input, input.publicKeys, input.threshold, input.signatures, opts\r\n      );\r\n    } else if (script.isPublicKeyHashOut() || script.isWitnessPublicKeyHashOut() || script.isScriptHashOut()) {\r\n      txin = new Input.PublicKeyHash(input);\r\n    } else if (script.isPublicKeyOut()) {\r\n      txin = new Input.PublicKey(input);\r\n    } else {\r\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\r\n    }\r\n    self.addInput(txin);\r\n  });\r\n  _.each(transaction.outputs, function(output) {\r\n    self.addOutput(new Output(output));\r\n  });\r\n  if (transaction.changeIndex) {\r\n    this._changeIndex = transaction.changeIndex;\r\n  }\r\n  if (transaction.changeScript) {\r\n    this._changeScript = new Script(transaction.changeScript);\r\n  }\r\n  if (transaction.fee) {\r\n    this._fee = transaction.fee;\r\n  }\r\n  this.nLockTime = transaction.nLockTime;\r\n  this.version = transaction.version;\r\n  this._checkConsistency(arg);\r\n  return this;\r\n};\r\n\r\nTransaction.prototype._checkConsistency = function(arg) {\r\n  if (!_.isUndefined(this._changeIndex)) {\r\n    $.checkState(this._changeScript, 'Change script is expected.');\r\n    $.checkState(this.outputs[this._changeIndex], 'Change index points to undefined output.');\r\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\r\n      this._changeScript.toString(), 'Change output has an unexpected script.');\r\n  }\r\n  if (arg && arg.hash) {\r\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash.');\r\n  }\r\n};\r\n\r\n/**\r\n * Sets nLockTime so that transaction is not valid until the desired date(a\r\n * timestamp in seconds since UNIX epoch is also accepted)\r\n *\r\n * @param {Date | Number} time\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.lockUntilDate = function(time) {\r\n  $.checkArgument(time);\r\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\r\n    throw new errors.Transaction.LockTimeTooEarly();\r\n  }\r\n  if (_.isDate(time)) {\r\n    time = time.getTime() / 1000;\r\n  }\r\n\r\n  for (var i = 0; i < this.inputs.length; i++) {\r\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\r\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\r\n    }\r\n  }\r\n\r\n  this.nLockTime = time;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets nLockTime so that transaction is not valid until the desired block\r\n * height.\r\n *\r\n * @param {Number} height\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.lockUntilBlockHeight = function(height) {\r\n  $.checkArgument(_.isNumber(height));\r\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\r\n    throw new errors.Transaction.BlockHeightTooHigh();\r\n  }\r\n  if (height < 0) {\r\n    throw new errors.Transaction.NLockTimeOutOfRange();\r\n  }\r\n\r\n  for (var i = 0; i < this.inputs.length; i++) {\r\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\r\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\r\n    }\r\n  }\r\n\r\n\r\n  this.nLockTime = height;\r\n  return this;\r\n};\r\n\r\n/**\r\n *  Returns a semantic version of the transaction's nLockTime.\r\n *  @return {Number|Date}\r\n *  If nLockTime is 0, it returns null,\r\n *  if it is < 500000000, it returns a block height (number)\r\n *  else it returns a Date object.\r\n */\r\nTransaction.prototype.getLockTime = function() {\r\n  if (!this.nLockTime) {\r\n    return null;\r\n  }\r\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\r\n    return this.nLockTime;\r\n  }\r\n  return new Date(1000 * this.nLockTime);\r\n};\r\n\r\nTransaction.prototype.fromString = function(string) {\r\n  this.fromBuffer(buffer.Buffer.from(string, 'hex'));\r\n};\r\n\r\nTransaction.prototype._newTransaction = function() {\r\n  this.version = CURRENT_VERSION;\r\n  this.nLockTime = DEFAULT_NLOCKTIME;\r\n};\r\n\r\n/* Transaction creation interface */\r\n\r\n/**\r\n * @typedef {Object} Transaction~fromObject\r\n * @property {string} prevTxId\r\n * @property {number} outputIndex\r\n * @property {(Buffer|string|Script)} script\r\n * @property {number} satoshis\r\n */\r\n\r\n/**\r\n * Add an input to this transaction. This is a high level interface\r\n * to add an input, for more control, use @{link Transaction#addInput}.\r\n *\r\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\r\n * and a slightly fancier format recognized by bitcore:\r\n *\r\n * ```\r\n * {\r\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\r\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\r\n *  outputIndex: 0,\r\n *  script: Script.empty(),\r\n *  satoshis: 1020000\r\n * }\r\n * ```\r\n * Where `address` can be either a string or a bitcore Address object. The\r\n * same is true for `script`, which can be a string or a bitcore Script.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @example\r\n * ```javascript\r\n * var transaction = new Transaction();\r\n *\r\n * // From a pay to public key hash output from bitcoind's listunspent\r\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\r\n *\r\n * // From a pay to public key hash output\r\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\r\n *\r\n * // From a multisig P2SH output\r\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\r\n *                  ['03000...', '02000...'], 2);\r\n * ```\r\n *\r\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\r\n * @param {Array=} pubkeys\r\n * @param {number=} threshold\r\n * @param {Object=} opts - Several options:\r\n *        - noSorting: defaults to false, if true and is multisig, don't\r\n *                      sort the given public keys before creating the script\r\n */\r\nTransaction.prototype.from = function(utxo, pubkeys, threshold, opts) {\r\n  if (_.isArray(utxo)) {\r\n    var self = this;\r\n    _.each(utxo, function(utxo) {\r\n      self.from(utxo, pubkeys, threshold, opts);\r\n    });\r\n    return this;\r\n  }\r\n  var exists = _.some(this.inputs, function(input) {\r\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\r\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\r\n  });\r\n  if (exists) {\r\n    return this;\r\n  }\r\n  if (pubkeys && threshold) {\r\n    this._fromMultisigUtxo(utxo, pubkeys, threshold, opts);\r\n  } else {\r\n    this._fromNonP2SH(utxo);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * associateInputs - Update inputs with utxos, allowing you to specify value, and pubkey.\r\n * Populating these inputs allows for them to be signed with .sign(privKeys)\r\n *\r\n * @param {Array<Object>} utxos\r\n * @param {Array<string | PublicKey>} pubkeys\r\n * @param {number} threshold\r\n * @param {Object} opts\r\n * @returns {Array<number>}\r\n */\r\nTransaction.prototype.associateInputs = function(utxos, pubkeys, threshold, opts) {\r\n  let indexes = [];\r\n  for(let utxo of utxos) {\r\n    const index = this.inputs.findIndex(i => i.prevTxId.toString('hex') === utxo.txId && i.outputIndex === utxo.outputIndex);\r\n    indexes.push(index);\r\n    if(index >= 0) {\r\n      this.inputs[index] = this._getInputFrom(utxo, pubkeys, threshold, opts);\r\n    }\r\n  }\r\n  return indexes;\r\n}\r\n\r\n\r\nTransaction.prototype._selectInputType = function(utxo, pubkeys, threshold) {\r\n  var clazz;\r\n  utxo = new UnspentOutput(utxo);\r\n  if(pubkeys && threshold) {\r\n    if (utxo.script.isMultisigOut()) {\r\n      clazz = MultiSigInput;\r\n    } else if (utxo.script.isScriptHashOut() || utxo.script.isWitnessScriptHashOut()) {\r\n      clazz = MultiSigScriptHashInput;\r\n    }\r\n  } else if (utxo.script.isPublicKeyHashOut() || utxo.script.isWitnessPublicKeyHashOut() || utxo.script.isScriptHashOut()) {\r\n    clazz = PublicKeyHashInput;\r\n  } else if (utxo.script.isPublicKeyOut()) {\r\n    clazz = PublicKeyInput;\r\n  } else {\r\n    clazz = Input;\r\n  }\r\n  return clazz;\r\n}\r\n\r\n\r\nTransaction.prototype._getInputFrom = function(utxo, pubkeys, threshold, opts) {\r\n  utxo = new UnspentOutput(utxo);\r\n  const InputClass = this._selectInputType(utxo, pubkeys, threshold);\r\n  const input = {\r\n    output: new Output({\r\n      script: utxo.script,\r\n      satoshis: utxo.satoshis\r\n    }),\r\n    prevTxId: utxo.txId,\r\n    outputIndex: utxo.outputIndex,\r\n    sequenceNumber: utxo.sequenceNumber,\r\n    script: Script.empty()\r\n  };\r\n  let args = pubkeys && threshold ? [pubkeys, threshold, false, opts] : []\r\n  return new InputClass(input, ...args);\r\n}\r\n\r\nTransaction.prototype._fromNonP2SH = function(utxo) {\r\n  const input = this._getInputFrom(utxo);\r\n  this.addInput(input);\r\n};\r\n\r\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold, opts) {\r\n  $.checkArgument(threshold <= pubkeys.length,\r\n    'Number of required signatures must be greater than the number of public keys');\r\n  const input = this._getInputFrom(utxo, pubkeys, threshold, opts);\r\n  this.addInput(input);\r\n};\r\n\r\n/**\r\n * Add an input to this transaction. The input must be an instance of the `Input` class.\r\n * It should have information about the Output that it's spending, but if it's not already\r\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\r\n *\r\n * @param {Input} input\r\n * @param {String|Script} outputScript\r\n * @param {number} satoshis\r\n * @return Transaction this, for chaining\r\n */\r\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\r\n  $.checkArgumentType(input, Input, 'input');\r\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\r\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\r\n  }\r\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\r\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\r\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\r\n    input.output = new Output({\r\n      script: outputScript,\r\n      satoshis: satoshis\r\n    });\r\n  }\r\n  return this.uncheckedAddInput(input);\r\n};\r\n\r\n/**\r\n * Add an input to this transaction, without checking that the input has information about\r\n * the output that it's spending.\r\n *\r\n * @param {Input} input\r\n * @return Transaction this, for chaining\r\n */\r\nTransaction.prototype.uncheckedAddInput = function(input) {\r\n  $.checkArgumentType(input, Input, 'input');\r\n  this.inputs.push(input);\r\n  this._inputAmount = undefined;\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns true if the transaction has enough info on all inputs to be correctly validated\r\n *\r\n * @return {boolean}\r\n */\r\nTransaction.prototype.hasAllUtxoInfo = function() {\r\n  return _.every(this.inputs.map(function(input) {\r\n    return !!input.output;\r\n  }));\r\n};\r\n\r\n/**\r\n * Manually set the fee for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n *\r\n * @param {number} amount satoshis to be sent\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.fee = function(amount) {\r\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\r\n  this._fee = amount;\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n/**\r\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n *\r\n * @param {number} amount satoshis per KB to be sent\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.feePerKb = function(amount) {\r\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\r\n  this._feePerKb = amount;\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n/**\r\n * Manually set the fee per Byte for this transaction. Beware that this resets all the signatures\r\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\r\n * be reset).\r\n * fee per Byte will be ignored if fee per KB is set\r\n *\r\n * @param {number} amount satoshis per Byte to be sent\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.feePerByte = function (amount) {\r\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\r\n  this._feePerByte = amount;\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n/* Output management */\r\n\r\n/**\r\n * Set the change address for this transaction\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {Address} address An address for change to be sent to.\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.change = function(address) {\r\n  $.checkArgument(address, 'address is required');\r\n  this._changeScript = Script.fromAddress(address);\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * @return {Output} change output, if it exists\r\n */\r\nTransaction.prototype.getChangeOutput = function() {\r\n  if (!_.isUndefined(this._changeIndex)) {\r\n    return this.outputs[this._changeIndex];\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Transaction~toObject\r\n * @property {(string|Address)} address\r\n * @property {number} satoshis\r\n */\r\n\r\n/**\r\n * Add an output to the transaction.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {(string|Address|Array.<Transaction~toObject>)} address\r\n * @param {number} amount in satoshis\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.to = function(address, amount) {\r\n  if (_.isArray(address)) {\r\n    var self = this;\r\n    _.each(address, function(to) {\r\n      self.to(to.address, to.satoshis);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  $.checkArgument(\r\n    JSUtil.isNaturalNumber(amount),\r\n    'Amount is expected to be a positive integer'\r\n  );\r\n  this.addOutput(new Output({\r\n    script: Script(new Address(address)),\r\n    satoshis: amount\r\n  }));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Add an OP_RETURN output to the transaction.\r\n *\r\n * Beware that this resets all the signatures for inputs (in further versions,\r\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\r\n *\r\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\r\n *    In case of a string, the UTF-8 representation will be stored\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.addData = function(value) {\r\n  this.addOutput(new Output({\r\n    script: Script.buildDataOut(value),\r\n    satoshis: 0\r\n  }));\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Add an output to the transaction.\r\n *\r\n * @param {Output} output the output to add.\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.addOutput = function(output) {\r\n  $.checkArgumentType(output, Output, 'output');\r\n  this._addOutput(output);\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Remove all outputs from the transaction.\r\n *\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.clearOutputs = function() {\r\n  this.outputs = [];\r\n  this._clearSignatures();\r\n  this._outputAmount = undefined;\r\n  this._changeIndex = undefined;\r\n  this._updateChangeOutput();\r\n  return this;\r\n};\r\n\r\n\r\nTransaction.prototype._addOutput = function(output) {\r\n  this.outputs.push(output);\r\n  this._outputAmount = undefined;\r\n};\r\n\r\n\r\n/**\r\n * Calculates or gets the total output amount in satoshis\r\n *\r\n * @return {Number} the transaction total output amount\r\n */\r\nTransaction.prototype._getOutputAmount = function() {\r\n  if (_.isUndefined(this._outputAmount)) {\r\n    var self = this;\r\n    this._outputAmount = 0;\r\n    _.each(this.outputs, function(output) {\r\n      self._outputAmount += output.satoshis;\r\n    });\r\n  }\r\n  return this._outputAmount;\r\n};\r\n\r\n\r\n/**\r\n * Calculates or gets the total input amount in satoshis\r\n *\r\n * @return {Number} the transaction total input amount\r\n */\r\nTransaction.prototype._getInputAmount = function() {\r\n  if (_.isUndefined(this._inputAmount)) {\r\n    this._inputAmount = _.sumBy(this.inputs, function(input) {\r\n      if (_.isUndefined(input.output)) {\r\n        throw new errors.Transaction.Input.MissingPreviousOutput();\r\n      }\r\n      return input.output.satoshis;\r\n    });\r\n  }\r\n  return this._inputAmount;\r\n};\r\n\r\nTransaction.prototype._updateChangeOutput = function() {\r\n  if (!this._changeScript) {\r\n    return;\r\n  }\r\n  this._clearSignatures();\r\n  if (!_.isUndefined(this._changeIndex)) {\r\n    this._removeOutput(this._changeIndex);\r\n  }\r\n  var available = this._getUnspentValue();\r\n  var fee = this.getFee();\r\n  var changeAmount = available - fee;\r\n  if (changeAmount > Transaction.DUST_AMOUNT) {\r\n    this._changeIndex = this.outputs.length;\r\n    this._addOutput(new Output({\r\n      script: this._changeScript,\r\n      satoshis: changeAmount\r\n    }));\r\n  } else {\r\n    this._changeIndex = undefined;\r\n  }\r\n};\r\n/**\r\n * Calculates the fee of the transaction.\r\n *\r\n * If there's a fixed fee set, return that.\r\n *\r\n * If there is no change output set, the fee is the\r\n * total value of the outputs minus inputs. Note that\r\n * a serialized transaction only specifies the value\r\n * of its outputs. (The value of inputs are recorded\r\n * in the previous transaction outputs being spent.)\r\n * This method therefore raises a \"MissingPreviousOutput\"\r\n * error when called on a serialized transaction.\r\n *\r\n * If there's no fee set and no change address,\r\n * estimate the fee based on size.\r\n *\r\n * @return {Number} fee of this transaction in satoshis\r\n */\r\nTransaction.prototype.getFee = function() {\r\n  if (this.isCoinbase()) {\r\n    return 0;\r\n  }\r\n  if (!_.isUndefined(this._fee)) {\r\n    return this._fee;\r\n  }\r\n  // if no change output is set, fees should equal all the unspent amount\r\n  if (!this._changeScript) {\r\n    return this._getUnspentValue();\r\n  }\r\n  return this._estimateFee();\r\n};\r\n\r\n/**\r\n * Estimates fee from serialized transaction size in bytes.\r\n */\r\nTransaction.prototype._estimateFee = function () {\r\n  var estimatedSize = this._estimateSize();\r\n  var available = this._getUnspentValue();\r\n  var feeRate = this._feePerByte || (this._feePerKb || Transaction.FEE_PER_KB) / 1000;\r\n  function getFee(size) {\r\n    return size * feeRate;\r\n  }\r\n  var fee = Math.ceil(getFee(estimatedSize));\r\n  var feeWithChange = Math.ceil(getFee(estimatedSize) + getFee(Transaction.CHANGE_OUTPUT_MAX_SIZE));\r\n  if (!this._changeScript || available <= feeWithChange) {\r\n    return fee;\r\n  }\r\n  return feeWithChange;\r\n};\r\n\r\nTransaction.prototype._getUnspentValue = function() {\r\n  return this._getInputAmount() - this._getOutputAmount();\r\n};\r\n\r\nTransaction.prototype._clearSignatures = function() {\r\n  _.each(this.inputs, function(input) {\r\n    input.clearSignatures();\r\n  });\r\n};\r\n\r\nTransaction.prototype._estimateSize = function() {\r\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\r\n  _.each(this.inputs, function(input) {\r\n    result += 32 + 4;  // prevout size:w\r\n    result += input._estimateSize();\r\n  });\r\n  _.each(this.outputs, function(output) {\r\n    result += output.script.toBuffer().length + 9;\r\n  });\r\n  return Math.ceil(result);\r\n};\r\n\r\nTransaction.prototype._removeOutput = function(index) {\r\n  var output = this.outputs[index];\r\n  this.outputs = _.without(this.outputs, output);\r\n  this._outputAmount = undefined;\r\n};\r\n\r\nTransaction.prototype.removeOutput = function(index) {\r\n  this._removeOutput(index);\r\n  this._updateChangeOutput();\r\n};\r\n\r\n/**\r\n * Sort a transaction's inputs and outputs according to BIP69\r\n *\r\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.sort = function() {\r\n  this.sortInputs(function(inputs) {\r\n    var copy = Array.prototype.concat.apply([], inputs);\r\n    let i = 0;\r\n    copy.forEach((x) => { x.i = i++});\r\n    copy.sort(function(first, second) {\r\n     return compare(first.prevTxId, second.prevTxId)\r\n        || first.outputIndex - second.outputIndex\r\n        || first.i - second.i;  // to ensure stable sort\r\n    });\r\n    return copy;\r\n  });\r\n  this.sortOutputs(function(outputs) {\r\n    var copy = Array.prototype.concat.apply([], outputs);\r\n    let i = 0;\r\n    copy.forEach((x) => { x.i = i++});\r\n    copy.sort(function(first, second) {\r\n      return first.satoshis - second.satoshis\r\n        || compare(first.script.toBuffer(), second.script.toBuffer())\r\n        || first.i - second.i;  // to ensure stable sort\r\n    });\r\n    return copy;\r\n  });\r\n  return this;\r\n};\r\n\r\n/**\r\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\r\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\r\n *\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.shuffleOutputs = function() {\r\n  return this.sortOutputs(_.shuffle);\r\n};\r\n\r\n/**\r\n * Sort this transaction's outputs, according to a given sorting function that\r\n * takes an array as argument and returns a new array, with the same elements\r\n * but with a different order. The argument function MUST NOT modify the order\r\n * of the original array\r\n *\r\n * @param {Function} sortingFunction\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.sortOutputs = function(sortingFunction) {\r\n  var outs = sortingFunction(this.outputs);\r\n  return this._newOutputOrder(outs);\r\n};\r\n\r\n/**\r\n * Sort this transaction's inputs, according to a given sorting function that\r\n * takes an array as argument and returns a new array, with the same elements\r\n * but with a different order.\r\n *\r\n * @param {Function} sortingFunction\r\n * @return {Transaction} this\r\n */\r\nTransaction.prototype.sortInputs = function(sortingFunction) {\r\n  this.inputs = sortingFunction(this.inputs);\r\n  this._clearSignatures();\r\n  return this;\r\n};\r\n\r\nTransaction.prototype._newOutputOrder = function(newOutputs) {\r\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\r\n                          _.difference(this.outputs, newOutputs).length !== 0);\r\n  if (isInvalidSorting) {\r\n    throw new errors.Transaction.InvalidSorting();\r\n  }\r\n\r\n  if (!_.isUndefined(this._changeIndex)) {\r\n    var changeOutput = this.outputs[this._changeIndex];\r\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\r\n  }\r\n\r\n  this.outputs = newOutputs;\r\n  return this;\r\n};\r\n\r\nTransaction.prototype.removeInput = function(txId, outputIndex) {\r\n  var index;\r\n  if (!outputIndex && _.isNumber(txId)) {\r\n    index = txId;\r\n  } else {\r\n    index = _.findIndex(this.inputs, function(input) {\r\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\r\n    });\r\n  }\r\n  if (index < 0 || index >= this.inputs.length) {\r\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\r\n  }\r\n  var input = this.inputs[index];\r\n  this.inputs = _.without(this.inputs, input);\r\n  this._inputAmount = undefined;\r\n  this._updateChangeOutput();\r\n};\r\n\r\n/* Signature handling */\r\n\r\n/**\r\n * Sign the transaction using one or more private keys.\r\n *\r\n * It tries to sign each input, verifying that the signature will be valid\r\n * (matches a public key).\r\n *\r\n * @param {Array|String|PrivateKey} privateKey\r\n * @param {number} sigtype\r\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr'\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.sign = function(privateKey, sigtype, signingMethod) {\r\n  $.checkState(this.hasAllUtxoInfo(), 'Not all utxo information is available to sign the transaction.');\r\n  var self = this;\r\n  if (_.isArray(privateKey)) {\r\n    _.each(privateKey, function(privateKey) {\r\n      self.sign(privateKey, sigtype, signingMethod);\r\n    });\r\n    return this;\r\n  }\r\n  _.each(this.getSignatures(privateKey, sigtype, signingMethod), function(signature) {\r\n    self.applySignature(signature, signingMethod);\r\n  });\r\n  return this;\r\n};\r\n\r\nTransaction.prototype.getSignatures = function(privKey, sigtype, signingMethod) {\r\n  privKey = new PrivateKey(privKey);\r\n  sigtype = sigtype || Signature.SIGHASH_ALL;\r\n  var transaction = this;\r\n  var results = [];\r\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\r\n  _.each(this.inputs, function forEachInput(input, index) {\r\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData, signingMethod), function(signature) {\r\n      results.push(signature);\r\n    });\r\n  });\r\n  return results;\r\n};\r\n\r\n/**\r\n * Add a signature to the transaction\r\n *\r\n * @param {Object} signature\r\n * @param {number} signature.inputIndex\r\n * @param {number} signature.sigtype\r\n * @param {PublicKey} signature.publicKey\r\n * @param {Signature} signature.signature\r\n * @param {String} signingMethod - 'ecdsa' to sign transaction\r\n * @return {Transaction} this, for chaining\r\n */\r\nTransaction.prototype.applySignature = function(signature, signingMethod) {\r\n  this.inputs[signature.inputIndex].addSignature(this, signature, signingMethod);\r\n  return this;\r\n};\r\n\r\nTransaction.prototype.isFullySigned = function() {\r\n  _.each(this.inputs, function(input) {\r\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\r\n      throw new errors.Transaction.UnableToVerifySignature(\r\n        'Unrecognized script kind, or not enough information to execute script.' +\r\n        'This usually happens when creating a transaction from a serialized transaction'\r\n      );\r\n    }\r\n  });\r\n  return _.every(_.map(this.inputs, function(input) {\r\n    return input.isFullySigned();\r\n  }));\r\n};\r\n\r\nTransaction.prototype.isValidSignature = function(signature, signingMethod) {\r\n  var self = this;\r\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\r\n    throw new errors.Transaction.UnableToVerifySignature(\r\n      'Unrecognized script kind, or not enough information to execute script.' +\r\n      'This usually happens when creating a transaction from a serialized transaction'\r\n    );\r\n  }\r\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature, signingMethod);\r\n};\r\n\r\n/**\r\n * @param {String} signingMethod method used to sign - 'ecdsa' or 'schnorr' (future signing method)\r\n * @returns {bool} whether the signature is valid for this transaction input\r\n */\r\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript, sigversion, satoshis, signingMethod) {\r\n\r\n  if (_.isUndefined(sigversion)) {\r\n    sigversion = 0;\r\n  }\r\n\r\n  if (sigversion === 1) {\r\n    var subscriptBuffer = subscript.toBuffer();\r\n    var scriptCodeWriter = new BufferWriter();\r\n    scriptCodeWriter.writeVarintNum(subscriptBuffer.length);\r\n    scriptCodeWriter.write(subscriptBuffer);\r\n\r\n    var satoshisBuffer;\r\n    if (satoshis) {\r\n      $.checkState(JSUtil.isNaturalNumber(satoshis));\r\n      satoshisBuffer = new BufferWriter().writeUInt64LEBN(new BN(satoshis)).toBuffer();\r\n    } else {\r\n      satoshisBuffer = this.inputs[nin].getSatoshisBuffer();\r\n    }\r\n    var verified = SighashWitness.verify(\r\n      this,\r\n      sig,\r\n      pubkey,\r\n      nin,\r\n      scriptCodeWriter.toBuffer(),\r\n      satoshisBuffer,\r\n      signingMethod\r\n    );\r\n    return verified;\r\n  }\r\n\r\n  return Sighash.verify(this, sig, pubkey, nin, subscript, signingMethod);\r\n};\r\n\r\n/**\r\n * Check that a transaction passes basic sanity tests. If not, return a string\r\n * describing the error. This function contains the same logic as\r\n * CheckTransaction in bitcoin core.\r\n */\r\nTransaction.prototype.verify = function() {\r\n  // Basic checks that don't depend on any context\r\n  if (this.inputs.length === 0) {\r\n    return 'transaction txins empty';\r\n  }\r\n\r\n  if (this.outputs.length === 0) {\r\n    return 'transaction txouts empty';\r\n  }\r\n\r\n  // Check for negative or overflow output values\r\n  var valueoutbn = new BN(0);\r\n  for (var i = 0; i < this.outputs.length; i++) {\r\n    var txout = this.outputs[i];\r\n\r\n    if (txout.invalidSatoshis()) {\r\n      return 'transaction txout ' + i + ' satoshis is invalid';\r\n    }\r\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\r\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\r\n    }\r\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\r\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\r\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\r\n    }\r\n  }\r\n\r\n  // Size limits\r\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\r\n    return 'transaction over the maximum block size';\r\n  }\r\n\r\n  // Check for duplicate inputs\r\n  var txinmap = {};\r\n  for (i = 0; i < this.inputs.length; i++) {\r\n    var txin = this.inputs[i];\r\n\r\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\r\n    if (!_.isUndefined(txinmap[inputid])) {\r\n      return 'transaction input ' + i + ' duplicate input';\r\n    }\r\n    txinmap[inputid] = true;\r\n  }\r\n\r\n  var isCoinbase = this.isCoinbase();\r\n  if (isCoinbase) {\r\n    var buf = this.inputs[0]._scriptBuffer;\r\n    if (buf.length < 2 || buf.length > 100) {\r\n      return 'coinbase transaction script size invalid';\r\n    }\r\n  } else {\r\n    for (i = 0; i < this.inputs.length; i++) {\r\n      if (this.inputs[i].isNull()) {\r\n        return 'transaction input ' + i + ' has null input';\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Analogous to bitcoind's IsCoinBase function in transaction.h\r\n */\r\nTransaction.prototype.isCoinbase = function() {\r\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\r\n};\r\n\r\n/**\r\n * Determines if this transaction can be replaced in the mempool with another\r\n * transaction that provides a sufficiently higher fee (RBF).\r\n */\r\nTransaction.prototype.isRBF = function() {\r\n  for (var i = 0; i < this.inputs.length; i++) {\r\n    var input = this.inputs[i];\r\n    if (input.sequenceNumber < Input.MAXINT - 1) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\r\n * includes a sufficiently higher fee. It will set the sequenceNumber to\r\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\r\n * already enable RBF.\r\n */\r\nTransaction.prototype.enableRBF = function() {\r\n  for (var i = 0; i < this.inputs.length; i++) {\r\n    var input = this.inputs[i];\r\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\r\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\nTransaction.prototype.setVersion = function(version) {\r\n  $.checkArgument(\r\n    JSUtil.isNaturalNumber(version) && version <= CURRENT_VERSION,\r\n    'Wrong version number');\r\n  this.version = version;\r\n  return this;\r\n};\r\n\r\n\r\n\r\nmodule.exports = Transaction;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}