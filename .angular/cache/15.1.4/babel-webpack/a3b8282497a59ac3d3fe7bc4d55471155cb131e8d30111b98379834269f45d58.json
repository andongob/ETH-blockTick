{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar errors = require('./errors');\nvar $ = require('./util/preconditions');\nvar UNITS = {\n  'BTC': [1e8, 8],\n  'mBTC': [1e5, 5],\n  'uBTC': [1e2, 2],\n  'bits': [1e2, 2],\n  'satoshis': [1, 0]\n};\n\n/**\r\n * Utility for handling and converting bitcoins units. The supported units are\r\n * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an\r\n * amount and a unit code, or alternatively using static methods like {fromBTC}.\r\n * It also allows to be created from a fiat amount and the exchange rate, or\r\n * alternatively using the {fromFiat} static method.\r\n * You can consult for different representation of a unit instance using it's\r\n * {to} method, the fixed unit methods like {toSatoshis} or alternatively using\r\n * the unit accessors. It also can be converted to a fiat amount by providing the\r\n * corresponding BTC/fiat exchange rate.\r\n *\r\n * @example\r\n * ```javascript\r\n * var sats = Unit.fromBTC(1.3).toSatoshis();\r\n * var mili = Unit.fromBits(1.3).to(Unit.mBTC);\r\n * var bits = Unit.fromFiat(1.3, 350).bits;\r\n * var btc = new Unit(1.3, Unit.bits).BTC;\r\n * ```\r\n *\r\n * @param {Number} amount - The amount to be represented\r\n * @param {String|Number} code - The unit of the amount or the exchange rate\r\n * @returns {Unit} A new instance of an Unit\r\n * @constructor\r\n */\nfunction Unit(amount, code) {\n  if (!(this instanceof Unit)) {\n    return new Unit(amount, code);\n  }\n\n  // convert fiat to BTC\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    amount = amount / code;\n    code = Unit.BTC;\n  }\n  this._value = this._from(amount, code);\n  var self = this;\n  var defineAccesor = function (key) {\n    Object.defineProperty(self, key, {\n      get: function () {\n        return self.to(key);\n      },\n      enumerable: true\n    });\n  };\n  Object.keys(UNITS).forEach(defineAccesor);\n}\nObject.keys(UNITS).forEach(function (key) {\n  Unit[key] = key;\n});\n\n/**\r\n * Returns a Unit instance created from JSON string or object\r\n *\r\n * @param {String|Object} json - JSON with keys: amount and code\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromObject = function fromObject(data) {\n  $.checkArgument(_.isObject(data), 'Argument is expected to be an object');\n  return new Unit(data.amount, data.code);\n};\n\n/**\r\n * Returns a Unit instance created from an amount in BTC\r\n *\r\n * @param {Number} amount - The amount in BTC\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromBTC = function (amount) {\n  return new Unit(amount, Unit.BTC);\n};\n\n/**\r\n * Returns a Unit instance created from an amount in mBTC\r\n *\r\n * @param {Number} amount - The amount in mBTC\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromMillis = Unit.fromMilis = function (amount) {\n  return new Unit(amount, Unit.mBTC);\n};\n\n/**\r\n * Returns a Unit instance created from an amount in bits\r\n *\r\n * @param {Number} amount - The amount in bits\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromMicros = Unit.fromBits = function (amount) {\n  return new Unit(amount, Unit.bits);\n};\n\n/**\r\n * Returns a Unit instance created from an amount in satoshis\r\n *\r\n * @param {Number} amount - The amount in satoshis\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromSatoshis = function (amount) {\n  return new Unit(amount, Unit.satoshis);\n};\n\n/**\r\n * Returns a Unit instance created from a fiat amount and exchange rate.\r\n *\r\n * @param {Number} amount - The amount in fiat\r\n * @param {Number} rate - The exchange rate BTC/fiat\r\n * @returns {Unit} A Unit instance\r\n */\nUnit.fromFiat = function (amount, rate) {\n  return new Unit(amount, rate);\n};\nUnit.prototype._from = function (amount, code) {\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n  return parseInt((amount * UNITS[code][0]).toFixed());\n};\n\n/**\r\n * Returns the value represented in the specified unit\r\n *\r\n * @param {String|Number} code - The unit code or exchange rate\r\n * @returns {Number} The converted value\r\n */\nUnit.prototype.to = function (code) {\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    return parseFloat((this.BTC * code).toFixed(2));\n  }\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n  var value = this._value / UNITS[code][0];\n  return parseFloat(value.toFixed(UNITS[code][1]));\n};\n\n/**\r\n * Returns the value represented in BTC\r\n *\r\n * @returns {Number} The value converted to BTC\r\n */\nUnit.prototype.toBTC = function () {\n  return this.to(Unit.BTC);\n};\n\n/**\r\n * Returns the value represented in mBTC\r\n *\r\n * @returns {Number} The value converted to mBTC\r\n */\nUnit.prototype.toMillis = Unit.prototype.toMilis = function () {\n  return this.to(Unit.mBTC);\n};\n\n/**\r\n * Returns the value represented in bits\r\n *\r\n * @returns {Number} The value converted to bits\r\n */\nUnit.prototype.toMicros = Unit.prototype.toBits = function () {\n  return this.to(Unit.bits);\n};\n\n/**\r\n * Returns the value represented in satoshis\r\n *\r\n * @returns {Number} The value converted to satoshis\r\n */\nUnit.prototype.toSatoshis = function () {\n  return this.to(Unit.satoshis);\n};\n\n/**\r\n * Returns the value represented in fiat\r\n *\r\n * @param {string} rate - The exchange rate between BTC/currency\r\n * @returns {Number} The value converted to satoshis\r\n */\nUnit.prototype.atRate = function (rate) {\n  return this.to(rate);\n};\n\n/**\r\n * Returns a the string representation of the value in satoshis\r\n *\r\n * @returns {string} the value in satoshis\r\n */\nUnit.prototype.toString = function () {\n  return this.satoshis + ' satoshis';\n};\n\n/**\r\n * Returns a plain object representation of the Unit\r\n *\r\n * @returns {Object} An object with the keys: amount and code\r\n */\nUnit.prototype.toObject = Unit.prototype.toJSON = function toObject() {\n  return {\n    amount: this.BTC,\n    code: Unit.BTC\n  };\n};\n\n/**\r\n * Returns a string formatted for the console\r\n *\r\n * @returns {string} the value in satoshis\r\n */\nUnit.prototype.inspect = function () {\n  return '<Unit: ' + this.toString() + '>';\n};\nmodule.exports = Unit;","map":{"version":3,"names":["_","require","errors","$","UNITS","Unit","amount","code","isNumber","InvalidRate","BTC","_value","_from","self","defineAccesor","key","Object","defineProperty","get","to","enumerable","keys","forEach","fromObject","data","checkArgument","isObject","fromBTC","fromMillis","fromMilis","mBTC","fromMicros","fromBits","bits","fromSatoshis","satoshis","fromFiat","rate","prototype","UnknownCode","parseInt","toFixed","parseFloat","value","toBTC","toMillis","toMilis","toMicros","toBits","toSatoshis","atRate","toString","toObject","toJSON","inspect","module","exports"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bitcore-lib/lib/unit.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\n\r\nvar errors = require('./errors');\r\nvar $ = require('./util/preconditions');\r\n\r\nvar UNITS = {\r\n  'BTC'      : [1e8, 8],\r\n  'mBTC'     : [1e5, 5],\r\n  'uBTC'     : [1e2, 2],\r\n  'bits'     : [1e2, 2],\r\n  'satoshis' : [1, 0]\r\n};\r\n\r\n/**\r\n * Utility for handling and converting bitcoins units. The supported units are\r\n * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an\r\n * amount and a unit code, or alternatively using static methods like {fromBTC}.\r\n * It also allows to be created from a fiat amount and the exchange rate, or\r\n * alternatively using the {fromFiat} static method.\r\n * You can consult for different representation of a unit instance using it's\r\n * {to} method, the fixed unit methods like {toSatoshis} or alternatively using\r\n * the unit accessors. It also can be converted to a fiat amount by providing the\r\n * corresponding BTC/fiat exchange rate.\r\n *\r\n * @example\r\n * ```javascript\r\n * var sats = Unit.fromBTC(1.3).toSatoshis();\r\n * var mili = Unit.fromBits(1.3).to(Unit.mBTC);\r\n * var bits = Unit.fromFiat(1.3, 350).bits;\r\n * var btc = new Unit(1.3, Unit.bits).BTC;\r\n * ```\r\n *\r\n * @param {Number} amount - The amount to be represented\r\n * @param {String|Number} code - The unit of the amount or the exchange rate\r\n * @returns {Unit} A new instance of an Unit\r\n * @constructor\r\n */\r\nfunction Unit(amount, code) {\r\n  if (!(this instanceof Unit)) {\r\n    return new Unit(amount, code);\r\n  }\r\n\r\n  // convert fiat to BTC\r\n  if (_.isNumber(code)) {\r\n    if (code <= 0) {\r\n      throw new errors.Unit.InvalidRate(code);\r\n    }\r\n    amount = amount / code;\r\n    code = Unit.BTC;\r\n  }\r\n\r\n  this._value = this._from(amount, code);\r\n\r\n  var self = this;\r\n  var defineAccesor = function(key) {\r\n    Object.defineProperty(self, key, {\r\n      get: function() { return self.to(key); },\r\n      enumerable: true,\r\n    });\r\n  };\r\n\r\n  Object.keys(UNITS).forEach(defineAccesor);\r\n}\r\n\r\nObject.keys(UNITS).forEach(function(key) {\r\n  Unit[key] = key;\r\n});\r\n\r\n/**\r\n * Returns a Unit instance created from JSON string or object\r\n *\r\n * @param {String|Object} json - JSON with keys: amount and code\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromObject = function fromObject(data){\r\n  $.checkArgument(_.isObject(data), 'Argument is expected to be an object');\r\n  return new Unit(data.amount, data.code);\r\n};\r\n\r\n/**\r\n * Returns a Unit instance created from an amount in BTC\r\n *\r\n * @param {Number} amount - The amount in BTC\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromBTC = function(amount) {\r\n  return new Unit(amount, Unit.BTC);\r\n};\r\n\r\n/**\r\n * Returns a Unit instance created from an amount in mBTC\r\n *\r\n * @param {Number} amount - The amount in mBTC\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromMillis = Unit.fromMilis = function(amount) {\r\n  return new Unit(amount, Unit.mBTC);\r\n};\r\n\r\n/**\r\n * Returns a Unit instance created from an amount in bits\r\n *\r\n * @param {Number} amount - The amount in bits\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromMicros = Unit.fromBits = function(amount) {\r\n  return new Unit(amount, Unit.bits);\r\n};\r\n\r\n/**\r\n * Returns a Unit instance created from an amount in satoshis\r\n *\r\n * @param {Number} amount - The amount in satoshis\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromSatoshis = function(amount) {\r\n  return new Unit(amount, Unit.satoshis);\r\n};\r\n\r\n/**\r\n * Returns a Unit instance created from a fiat amount and exchange rate.\r\n *\r\n * @param {Number} amount - The amount in fiat\r\n * @param {Number} rate - The exchange rate BTC/fiat\r\n * @returns {Unit} A Unit instance\r\n */\r\nUnit.fromFiat = function(amount, rate) {\r\n  return new Unit(amount, rate);\r\n};\r\n\r\nUnit.prototype._from = function(amount, code) {\r\n  if (!UNITS[code]) {\r\n    throw new errors.Unit.UnknownCode(code);\r\n  }\r\n  return parseInt((amount * UNITS[code][0]).toFixed());\r\n};\r\n\r\n/**\r\n * Returns the value represented in the specified unit\r\n *\r\n * @param {String|Number} code - The unit code or exchange rate\r\n * @returns {Number} The converted value\r\n */\r\nUnit.prototype.to = function(code) {\r\n  if (_.isNumber(code)) {\r\n    if (code <= 0) {\r\n      throw new errors.Unit.InvalidRate(code);\r\n    }\r\n    return parseFloat((this.BTC * code).toFixed(2));\r\n  }\r\n\r\n  if (!UNITS[code]) {\r\n    throw new errors.Unit.UnknownCode(code);\r\n  }\r\n\r\n  var value = this._value / UNITS[code][0];\r\n  return parseFloat(value.toFixed(UNITS[code][1]));\r\n};\r\n\r\n/**\r\n * Returns the value represented in BTC\r\n *\r\n * @returns {Number} The value converted to BTC\r\n */\r\nUnit.prototype.toBTC = function() {\r\n  return this.to(Unit.BTC);\r\n};\r\n\r\n/**\r\n * Returns the value represented in mBTC\r\n *\r\n * @returns {Number} The value converted to mBTC\r\n */\r\nUnit.prototype.toMillis = Unit.prototype.toMilis = function() {\r\n  return this.to(Unit.mBTC);\r\n};\r\n\r\n/**\r\n * Returns the value represented in bits\r\n *\r\n * @returns {Number} The value converted to bits\r\n */\r\nUnit.prototype.toMicros = Unit.prototype.toBits = function() {\r\n  return this.to(Unit.bits);\r\n};\r\n\r\n/**\r\n * Returns the value represented in satoshis\r\n *\r\n * @returns {Number} The value converted to satoshis\r\n */\r\nUnit.prototype.toSatoshis = function() {\r\n  return this.to(Unit.satoshis);\r\n};\r\n\r\n/**\r\n * Returns the value represented in fiat\r\n *\r\n * @param {string} rate - The exchange rate between BTC/currency\r\n * @returns {Number} The value converted to satoshis\r\n */\r\nUnit.prototype.atRate = function(rate) {\r\n  return this.to(rate);\r\n};\r\n\r\n/**\r\n * Returns a the string representation of the value in satoshis\r\n *\r\n * @returns {string} the value in satoshis\r\n */\r\nUnit.prototype.toString = function() {\r\n  return this.satoshis + ' satoshis';\r\n};\r\n\r\n/**\r\n * Returns a plain object representation of the Unit\r\n *\r\n * @returns {Object} An object with the keys: amount and code\r\n */\r\nUnit.prototype.toObject = Unit.prototype.toJSON = function toObject() {\r\n  return {\r\n    amount: this.BTC,\r\n    code: Unit.BTC\r\n  };\r\n};\r\n\r\n/**\r\n * Returns a string formatted for the console\r\n *\r\n * @returns {string} the value in satoshis\r\n */\r\nUnit.prototype.inspect = function() {\r\n  return '<Unit: ' + this.toString() + '>';\r\n};\r\n\r\nmodule.exports = Unit;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEzB,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIE,CAAC,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAEvC,IAAIG,KAAK,GAAG;EACV,KAAK,EAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM,EAAO,CAAC,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM,EAAO,CAAC,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM,EAAO,CAAC,GAAG,EAAE,CAAC,CAAC;EACrB,UAAU,EAAG,CAAC,CAAC,EAAE,CAAC;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAI,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC1B,IAAI,EAAE,IAAI,YAAYF,IAAI,CAAC,EAAE;IAC3B,OAAO,IAAIA,IAAI,CAACC,MAAM,EAAEC,IAAI,CAAC;EAC/B;;EAEA;EACA,IAAIP,CAAC,CAACQ,QAAQ,CAACD,IAAI,CAAC,EAAE;IACpB,IAAIA,IAAI,IAAI,CAAC,EAAE;MACb,MAAM,IAAIL,MAAM,CAACG,IAAI,CAACI,WAAW,CAACF,IAAI,CAAC;IACzC;IACAD,MAAM,GAAGA,MAAM,GAAGC,IAAI;IACtBA,IAAI,GAAGF,IAAI,CAACK,GAAG;EACjB;EAEA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,CAACN,MAAM,EAAEC,IAAI,CAAC;EAEtC,IAAIM,IAAI,GAAG,IAAI;EACf,IAAIC,aAAa,GAAG,UAASC,GAAG,EAAE;IAChCC,MAAM,CAACC,cAAc,CAACJ,IAAI,EAAEE,GAAG,EAAE;MAC/BG,GAAG,EAAE,YAAW;QAAE,OAAOL,IAAI,CAACM,EAAE,CAACJ,GAAG,CAAC;MAAE,CAAC;MACxCK,UAAU,EAAE;IACd,CAAC,CAAC;EACJ,CAAC;EAEDJ,MAAM,CAACK,IAAI,CAACjB,KAAK,CAAC,CAACkB,OAAO,CAACR,aAAa,CAAC;AAC3C;AAEAE,MAAM,CAACK,IAAI,CAACjB,KAAK,CAAC,CAACkB,OAAO,CAAC,UAASP,GAAG,EAAE;EACvCV,IAAI,CAACU,GAAG,CAAC,GAAGA,GAAG;AACjB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAV,IAAI,CAACkB,UAAU,GAAG,SAASA,UAAU,CAACC,IAAI,EAAC;EACzCrB,CAAC,CAACsB,aAAa,CAACzB,CAAC,CAAC0B,QAAQ,CAACF,IAAI,CAAC,EAAE,sCAAsC,CAAC;EACzE,OAAO,IAAInB,IAAI,CAACmB,IAAI,CAAClB,MAAM,EAAEkB,IAAI,CAACjB,IAAI,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACsB,OAAO,GAAG,UAASrB,MAAM,EAAE;EAC9B,OAAO,IAAID,IAAI,CAACC,MAAM,EAAED,IAAI,CAACK,GAAG,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAL,IAAI,CAACuB,UAAU,GAAGvB,IAAI,CAACwB,SAAS,GAAG,UAASvB,MAAM,EAAE;EAClD,OAAO,IAAID,IAAI,CAACC,MAAM,EAAED,IAAI,CAACyB,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzB,IAAI,CAAC0B,UAAU,GAAG1B,IAAI,CAAC2B,QAAQ,GAAG,UAAS1B,MAAM,EAAE;EACjD,OAAO,IAAID,IAAI,CAACC,MAAM,EAAED,IAAI,CAAC4B,IAAI,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5B,IAAI,CAAC6B,YAAY,GAAG,UAAS5B,MAAM,EAAE;EACnC,OAAO,IAAID,IAAI,CAACC,MAAM,EAAED,IAAI,CAAC8B,QAAQ,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA9B,IAAI,CAAC+B,QAAQ,GAAG,UAAS9B,MAAM,EAAE+B,IAAI,EAAE;EACrC,OAAO,IAAIhC,IAAI,CAACC,MAAM,EAAE+B,IAAI,CAAC;AAC/B,CAAC;AAEDhC,IAAI,CAACiC,SAAS,CAAC1B,KAAK,GAAG,UAASN,MAAM,EAAEC,IAAI,EAAE;EAC5C,IAAI,CAACH,KAAK,CAACG,IAAI,CAAC,EAAE;IAChB,MAAM,IAAIL,MAAM,CAACG,IAAI,CAACkC,WAAW,CAAChC,IAAI,CAAC;EACzC;EACA,OAAOiC,QAAQ,CAAC,CAAClC,MAAM,GAAGF,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEkC,OAAO,EAAE,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACApC,IAAI,CAACiC,SAAS,CAACnB,EAAE,GAAG,UAASZ,IAAI,EAAE;EACjC,IAAIP,CAAC,CAACQ,QAAQ,CAACD,IAAI,CAAC,EAAE;IACpB,IAAIA,IAAI,IAAI,CAAC,EAAE;MACb,MAAM,IAAIL,MAAM,CAACG,IAAI,CAACI,WAAW,CAACF,IAAI,CAAC;IACzC;IACA,OAAOmC,UAAU,CAAC,CAAC,IAAI,CAAChC,GAAG,GAAGH,IAAI,EAAEkC,OAAO,CAAC,CAAC,CAAC,CAAC;EACjD;EAEA,IAAI,CAACrC,KAAK,CAACG,IAAI,CAAC,EAAE;IAChB,MAAM,IAAIL,MAAM,CAACG,IAAI,CAACkC,WAAW,CAAChC,IAAI,CAAC;EACzC;EAEA,IAAIoC,KAAK,GAAG,IAAI,CAAChC,MAAM,GAAGP,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,OAAOmC,UAAU,CAACC,KAAK,CAACF,OAAO,CAACrC,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACiC,SAAS,CAACM,KAAK,GAAG,YAAW;EAChC,OAAO,IAAI,CAACzB,EAAE,CAACd,IAAI,CAACK,GAAG,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAL,IAAI,CAACiC,SAAS,CAACO,QAAQ,GAAGxC,IAAI,CAACiC,SAAS,CAACQ,OAAO,GAAG,YAAW;EAC5D,OAAO,IAAI,CAAC3B,EAAE,CAACd,IAAI,CAACyB,IAAI,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAzB,IAAI,CAACiC,SAAS,CAACS,QAAQ,GAAG1C,IAAI,CAACiC,SAAS,CAACU,MAAM,GAAG,YAAW;EAC3D,OAAO,IAAI,CAAC7B,EAAE,CAACd,IAAI,CAAC4B,IAAI,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA5B,IAAI,CAACiC,SAAS,CAACW,UAAU,GAAG,YAAW;EACrC,OAAO,IAAI,CAAC9B,EAAE,CAACd,IAAI,CAAC8B,QAAQ,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA9B,IAAI,CAACiC,SAAS,CAACY,MAAM,GAAG,UAASb,IAAI,EAAE;EACrC,OAAO,IAAI,CAAClB,EAAE,CAACkB,IAAI,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAhC,IAAI,CAACiC,SAAS,CAACa,QAAQ,GAAG,YAAW;EACnC,OAAO,IAAI,CAAChB,QAAQ,GAAG,WAAW;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA9B,IAAI,CAACiC,SAAS,CAACc,QAAQ,GAAG/C,IAAI,CAACiC,SAAS,CAACe,MAAM,GAAG,SAASD,QAAQ,GAAG;EACpE,OAAO;IACL9C,MAAM,EAAE,IAAI,CAACI,GAAG;IAChBH,IAAI,EAAEF,IAAI,CAACK;EACb,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAL,IAAI,CAACiC,SAAS,CAACgB,OAAO,GAAG,YAAW;EAClC,OAAO,SAAS,GAAG,IAAI,CAACH,QAAQ,EAAE,GAAG,GAAG;AAC1C,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGnD,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}