{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsBuffer)(a);\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\nexports.keccak = keccak;\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;\n//# sourceMappingURL=hash.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}