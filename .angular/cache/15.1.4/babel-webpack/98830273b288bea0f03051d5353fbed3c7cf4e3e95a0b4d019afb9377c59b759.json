{"ast":null,"code":"'use strict';\n\nvar inherits = require('inherits');\nvar $ = require('../../util/preconditions');\nvar BufferUtil = require('../../util/buffer');\nvar Address = require('../../address');\nvar Hash = require('../../crypto/hash');\nvar Input = require('./input');\nvar Output = require('../output');\nvar Sighash = require('../sighash');\nvar SighashWitness = require('../sighashwitness');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar BufferUtil = require('../../util/buffer');\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar TransactionSignature = require('../signature');\n\n/**\n * Represents a special kind of input of PayToPublicKeyHash kind.\n * @constructor\n */\nfunction PublicKeyHashInput() {\n  Input.apply(this, arguments);\n}\ninherits(PublicKeyHashInput, Input);\nPublicKeyHashInput.prototype.getRedeemScript = function (publicKey) {\n  if (!this.redeemScript) {\n    var redeemScript = Script.buildWitnessV0Out(publicKey);\n    if (Script.buildScriptHashOut(redeemScript).equals(this.output.script)) {\n      var scriptSig = new Script();\n      scriptSig.add(redeemScript.toBuffer());\n      this.setScript(scriptSig);\n      this.redeemScript = redeemScript;\n    }\n  }\n  return this.redeemScript;\n};\nPublicKeyHashInput.prototype.getScriptCode = function (publicKey) {\n  var writer = new BufferWriter();\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(publicKey);\n  } else {\n    script = this.output.script;\n  }\n  var scriptBuffer = Script.buildPublicKeyHashOut(script.toAddress()).toBuffer();\n  writer.writeVarintNum(scriptBuffer.length);\n  writer.write(scriptBuffer);\n  return writer.toBuffer();\n};\nPublicKeyHashInput.prototype.getSighash = function (transaction, privateKey, index, sigtype) {\n  var scriptCode = this.getScriptCode(privateKey);\n  var satoshisBuffer = this.getSatoshisBuffer();\n  return SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n};\n\n/* jshint maxparams: 5 */\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {Array} of objects that can be\n */\nPublicKeyHashInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa';\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(privateKey.publicKey);\n  } else {\n    script = this.output.script;\n  }\n  if (script && BufferUtil.equals(hashData, script.getPublicKeyHash())) {\n    var signature;\n    if (script.isWitnessPublicKeyHashOut()) {\n      var satoshisBuffer = this.getSatoshisBuffer();\n      var scriptCode = this.getScriptCode(privateKey.publicKey);\n      signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer, signingMethod);\n    } else {\n      signature = Sighash.sign(transaction, privateKey, sigtype, index, this.output.script, signingMethod);\n    }\n    return [new TransactionSignature({\n      publicKey: privateKey.publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: signature,\n      sigtype: sigtype\n    })];\n  }\n  return [];\n};\n/* jshint maxparams: 3 */\n\n/**\n * Add the provided signature\n *\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.addSignature = function (transaction, signature, signingMethod) {\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), 'Signature is invalid');\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    this.setWitnesses([BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]), signature.publicKey.toBuffer()]);\n  } else {\n    this.setScript(Script.buildPublicKeyHashIn(signature.publicKey, signature.signature.toDER(), signature.sigtype));\n  }\n  return this;\n};\n\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.clearSignatures = function () {\n  this.setScript(Script.empty());\n  this.setWitnesses([]);\n  return this;\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nPublicKeyHashInput.prototype.isFullySigned = function () {\n  return this.script.isPublicKeyHashIn() || this.hasWitnesses();\n};\nPublicKeyHashInput.prototype.isValidSignature = function (transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, scriptCode, satoshisBuffer, signingMethod);\n  } else {\n    return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, signingMethod);\n  }\n};\nPublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)\nPublicKeyHashInput.REDEEM_SCRIPT_SIZE = 22; // OP_0 (1) pubkeyhash (1 + 20)\n\nPublicKeyHashInput.prototype._estimateSize = function () {\n  var WITNESS_DISCOUNT = 4;\n  const witnessSize = PublicKeyHashInput.SCRIPT_MAX_SIZE / WITNESS_DISCOUNT;\n  if (this.output.script.isWitnessPublicKeyHashOut()) {\n    return witnessSize;\n  } else if (this.output.script.isScriptHashOut()) {\n    return witnessSize + PublicKeyHashInput.REDEEM_SCRIPT_SIZE;\n  } else {\n    return PublicKeyHashInput.SCRIPT_MAX_SIZE;\n  }\n};\nmodule.exports = PublicKeyHashInput;","map":{"version":3,"names":["inherits","require","$","BufferUtil","Address","Hash","Input","Output","Sighash","SighashWitness","BufferWriter","Script","Signature","TransactionSignature","PublicKeyHashInput","apply","arguments","prototype","getRedeemScript","publicKey","redeemScript","buildWitnessV0Out","buildScriptHashOut","equals","output","script","scriptSig","add","toBuffer","setScript","getScriptCode","writer","isScriptHashOut","scriptBuffer","buildPublicKeyHashOut","toAddress","writeVarintNum","length","write","getSighash","transaction","privateKey","index","sigtype","scriptCode","satoshisBuffer","getSatoshisBuffer","sighash","getSignatures","hashData","signingMethod","checkState","sha256ripemd160","SIGHASH_ALL","getPublicKeyHash","signature","isWitnessPublicKeyHashOut","sign","prevTxId","outputIndex","inputIndex","addSignature","isValidSignature","setWitnesses","concat","toDER","integerAsSingleByteBuffer","buildPublicKeyHashIn","clearSignatures","empty","isFullySigned","isPublicKeyHashIn","hasWitnesses","nhashtype","verify","SCRIPT_MAX_SIZE","REDEEM_SCRIPT_SIZE","_estimateSize","WITNESS_DISCOUNT","witnessSize","module","exports"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/bitcore-lib/lib/transaction/input/publickeyhash.js"],"sourcesContent":["'use strict';\n\nvar inherits = require('inherits');\n\nvar $ = require('../../util/preconditions');\nvar BufferUtil = require('../../util/buffer');\n\nvar Address = require('../../address');\nvar Hash = require('../../crypto/hash');\nvar Input = require('./input');\nvar Output = require('../output');\nvar Sighash = require('../sighash');\nvar SighashWitness = require('../sighashwitness');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar BufferUtil = require('../../util/buffer');\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar TransactionSignature = require('../signature');\n\n/**\n * Represents a special kind of input of PayToPublicKeyHash kind.\n * @constructor\n */\nfunction PublicKeyHashInput() {\n  Input.apply(this, arguments);\n}\ninherits(PublicKeyHashInput, Input);\n\nPublicKeyHashInput.prototype.getRedeemScript = function(publicKey) {\n  if (!this.redeemScript) {\n    var redeemScript = Script.buildWitnessV0Out(publicKey);\n    if (Script.buildScriptHashOut(redeemScript).equals(this.output.script)) {\n      var scriptSig = new Script();\n      scriptSig.add(redeemScript.toBuffer());\n      this.setScript(scriptSig);\n      this.redeemScript = redeemScript;\n    }\n  }\n  return this.redeemScript;\n};\n\nPublicKeyHashInput.prototype.getScriptCode = function(publicKey) {\n  var writer = new BufferWriter();\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(publicKey);\n  } else {\n    script = this.output.script;\n  }\n  var scriptBuffer = Script.buildPublicKeyHashOut(script.toAddress()).toBuffer();\n  writer.writeVarintNum(scriptBuffer.length);\n  writer.write(scriptBuffer);\n  return writer.toBuffer();\n};\n\nPublicKeyHashInput.prototype.getSighash = function(transaction, privateKey, index, sigtype) {\n  var scriptCode = this.getScriptCode(privateKey);\n  var satoshisBuffer = this.getSatoshisBuffer();\n  return SighashWitness.sighash(transaction, sigtype, index, scriptCode, satoshisBuffer);\n};\n\n/* jshint maxparams: 5 */\n/**\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key with which to sign the transaction\n * @param {number} index - the index of the input in the transaction input vector\n * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL\n * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {Array} of objects that can be\n */\nPublicKeyHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa';\n\n  var script;\n  if (this.output.script.isScriptHashOut()) {\n    script = this.getRedeemScript(privateKey.publicKey);\n  } else {\n    script = this.output.script;\n  }\n\n  if (script && BufferUtil.equals(hashData, script.getPublicKeyHash())) {\n    var signature;\n    if (script.isWitnessPublicKeyHashOut()) {\n      var satoshisBuffer = this.getSatoshisBuffer();\n      var scriptCode = this.getScriptCode(privateKey.publicKey);\n      signature = SighashWitness.sign(transaction, privateKey, sigtype, index, scriptCode, satoshisBuffer, signingMethod);\n    } else {\n      signature = Sighash.sign(transaction, privateKey, sigtype, index, this.output.script, signingMethod);\n    }\n\n    return [new TransactionSignature({\n      publicKey: privateKey.publicKey,\n      prevTxId: this.prevTxId,\n      outputIndex: this.outputIndex,\n      inputIndex: index,\n      signature: signature,\n      sigtype: sigtype\n    })];\n  }\n  return [];\n};\n/* jshint maxparams: 3 */\n\n/**\n * Add the provided signature\n *\n * @param {Object} signature\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @param {number=} signature.sigtype\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.addSignature = function(transaction, signature, signingMethod) {\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), 'Signature is invalid');\n\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    this.setWitnesses([\n      BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]),\n      signature.publicKey.toBuffer()\n    ]);\n  } else {\n    this.setScript(Script.buildPublicKeyHashIn(\n      signature.publicKey,\n      signature.signature.toDER(),\n      signature.sigtype\n    ));\n  }\n  return this;\n};\n\n/**\n * Clear the input's signature\n * @return {PublicKeyHashInput} this, for chaining\n */\nPublicKeyHashInput.prototype.clearSignatures = function() {\n  this.setScript(Script.empty());\n  this.setWitnesses([]);\n  return this;\n};\n\n/**\n * Query whether the input is signed\n * @return {boolean}\n */\nPublicKeyHashInput.prototype.isFullySigned = function() {\n  return this.script.isPublicKeyHashIn() || this.hasWitnesses();\n};\n\nPublicKeyHashInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  if (this.output.script.isWitnessPublicKeyHashOut() || this.output.script.isScriptHashOut()) {\n    var scriptCode = this.getScriptCode();\n    var satoshisBuffer = this.getSatoshisBuffer();\n    return SighashWitness.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      scriptCode,\n      satoshisBuffer,\n      signingMethod\n    );\n  } else {\n    return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.output.script,\n      signingMethod\n    );\n  }\n};\n\n\nPublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)\nPublicKeyHashInput.REDEEM_SCRIPT_SIZE = 22; // OP_0 (1) pubkeyhash (1 + 20)\n\nPublicKeyHashInput.prototype._estimateSize = function() {\n  var WITNESS_DISCOUNT = 4;\n  const witnessSize = PublicKeyHashInput.SCRIPT_MAX_SIZE / WITNESS_DISCOUNT;\n  if (this.output.script.isWitnessPublicKeyHashOut()) {\n    return witnessSize;\n  } else if (this.output.script.isScriptHashOut()) {\n    return witnessSize + PublicKeyHashInput.REDEEM_SCRIPT_SIZE;\n  } else {\n    return PublicKeyHashInput.SCRIPT_MAX_SIZE;\n  }\n};\n\nmodule.exports = PublicKeyHashInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}