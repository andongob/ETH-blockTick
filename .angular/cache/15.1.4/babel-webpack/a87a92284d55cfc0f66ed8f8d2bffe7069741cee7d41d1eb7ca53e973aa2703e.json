{"ast":null,"code":"import _asyncToGenerator from \"D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DOCUMENT } from '@angular/common';\nimport * as Mnemonic from \"bitcore-mnemonic\";\nimport * as CryptoJS from \"crypto-js\";\nimport { hdkey } from \"ethereumjs-wallet\";\nimport * as bip39 from \"bip39\";\nimport * as util from \"ethereumjs-util\";\nimport Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction MetamaskComponent_form_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"textarea\", 7);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MetamaskComponent_form_2_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function MetamaskComponent_form_2_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.removeSeeds());\n    });\n    i0.ɵɵtext(1, \"Clear Seeds\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MetamaskComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function MetamaskComponent_form_2_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.sendLogin(ctx_r6.loginForm.value));\n    });\n    i0.ɵɵtemplate(1, MetamaskComponent_form_2_div_1_Template, 2, 0, \"div\", 1);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵelement(3, \"input\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 4);\n    i0.ɵɵtext(5, \"Login\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, MetamaskComponent_form_2_button_6_Template, 2, 0, \"button\", 5);\n    i0.ɵɵelementStart(7, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function MetamaskComponent_form_2_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.loginWithMetamask());\n    });\n    i0.ɵɵtext(8, \"Login with Metamask\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.loginForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.encrypted);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.encrypted);\n  }\n}\nfunction MetamaskComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\")(6, \"a\", 8);\n    i0.ɵɵtext(7, \"Ver tu cuenta en Etherscan (TestNet goerli)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"h2\");\n    i0.ɵɵtext(9, \"Send Ethers\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function MetamaskComponent_div_3_Template_form_ngSubmit_10_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.sendEther(ctx_r9.sendForm.value));\n    });\n    i0.ɵɵelementStart(11, \"div\");\n    i0.ɵɵelement(12, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\");\n    i0.ɵɵelement(14, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 4);\n    i0.ɵɵtext(16, \"Send\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Hello \", ctx_r1.wallet.address, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tu saldo en ETH es: \", ctx_r1.wallet.balance, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"href\", \"https://goerli.etherscan.io/address/\", ctx_r1.wallet.address, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.sendForm);\n  }\n}\nexport class MetamaskComponent {\n  constructor(document, formBuilder) {\n    this.document = document;\n    this.formBuilder = formBuilder;\n    this.wallet = {\n      address: '',\n      privateKey: ''\n    };\n    this.mining = false;\n    this.window = document.defaultView;\n    this.loginForm = this.formBuilder.group({\n      seeds: '',\n      password: ''\n    });\n    this.sendForm = this.formBuilder.group({\n      to: '',\n      amount: ''\n    });\n    this.encrypted = window.localStorage.getItem('seeds');\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\n    //this.web3 = new Web3;\n    this.web3 = new Web3(this.window.ethereum);\n    /*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n    */\n  }\n  // february current defy one inform wet hurry cupboard type enable spare famous\n  initWallet(seeds) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var mnemonic = new Mnemonic(seeds);\n      var seed = yield bip39.mnemonicToSeed(mnemonic.toString());\n      var path = \"m/44'/60'/0'/0/0\";\n      var wallet = hdkey.fromMasterSeed(seed).derivePath(path).getWallet();\n      var privateKey = wallet.getPrivateKey();\n      var publicKey = util.privateToPublic(privateKey);\n      var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\n      _this.wallet.privateKey = privateKey;\n      _this.getBalance(address);\n      _this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\n      _this.wallet.balance = yield _this.web3.eth.getBalance(address).then(result => {\n        return _this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\n      });\n    })();\n  }\n\n  getBalance(address) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.wallet.address = address;\n      _this2.wallet.balance = yield _this2.web3.eth.getBalance(address).then(result => {\n        return _this2.web3.utils.fromWei(result, 'ether');\n      });\n    })();\n  }\n  sendLogin(loginData) {\n    if (loginData.password == '') {\n      return alert('Introduce tu contraseña');\n    }\n    if (this.encrypted) {\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\n    }\n    if (!Mnemonic.isValid(loginData.seeds)) {\n      return alert('Semilla inválida');\n    }\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\n    window.localStorage.setItem('seeds', encrypted);\n    this.loginForm.reset();\n    this.initWallet(loginData.seed);\n  }\n  loginWithMetamask() {\n    if (!this.window.ethereum) {\n      return alert('Metamask no está instalado');\n    }\n    this.window.ethereum.enable().then(accounts => {\n      let address = accounts[0];\n      this.getBalance(address);\n      this.wallet.address = address;\n    });\n  }\n  removeSeeds() {\n    window.localStorage.removeItem('seeds');\n    this.encrypted = '';\n    this.wallet = {\n      address: '',\n      balance: ''\n    };\n  }\n  sendEther(sendData) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (sendData.to == '' || sendData.amount == null) {\n        return alert('Campos son obligatorios');\n      }\n      if (!util.isValidAddress(sendData.to)) {\n        return alert('Dirección inválida');\n      }\n      _this3.mining = true;\n      var rawData = {\n        from: _this3.wallet.address,\n        to: sendData.to,\n        value: sendData.amount,\n        gasPrice: _this3.web3.utils.toHex(10000000000),\n        gasLimit: _this3.web3.utils.toHex(1000000)\n        //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\n      };\n\n      var signed = yield _this3.web3.eth.sendTransaction(rawData).then(receipt => {\n        console.log(\"Transaction succeeded\", receipt);\n        _this3.mining = false;\n        _this3.lastTransaction = receipt;\n        _this3.sendForm.reset();\n      });\n      //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\n      /*\r\n      this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n        this.mining = false;\r\n        this.lastTransaction = receipt;\r\n              this.sendForm.reset();\r\n      });\r\n      */\n    })();\n  }\n}\n\nMetamaskComponent.ɵfac = function MetamaskComponent_Factory(t) {\n  return new (t || MetamaskComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nMetamaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MetamaskComponent,\n  selectors: [[\"app-metamask\"]],\n  decls: 4,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\"], [\"type\", \"submit\"], [\"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 3, \"click\"], [\"formControlName\", \"seeds\", \"rows\", \"4\", \"placeholder\", \"Seeds\"], [\"target\", \"_blank\", 3, \"href\"], [\"formControlName\", \"to\", \"type\", \"text\", \"placeholder\", \"To\"], [\"formControlName\", \"amount\", \"type\", \"number\", \"placeholder\", \"Amount\"]],\n  template: function MetamaskComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"metamask works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, MetamaskComponent_form_2_Template, 9, 3, \"form\", 0);\n      i0.ɵɵtemplate(3, MetamaskComponent_div_3_Template, 17, 4, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.wallet.address);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.wallet.address);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["DOCUMENT","Mnemonic","CryptoJS","hdkey","bip39","util","Web3","i0","MetamaskComponent","constructor","document","formBuilder","address","privateKey","window","defaultView","loginForm","group","seeds","password","sendForm","to","amount","encrypted","localStorage","getItem","web3","ethereum","initWallet","mnemonic","seed","mnemonicToSeed","toString","path","wallet","fromMasterSeed","derivePath","getWallet","getPrivateKey","publicKey","privateToPublic","pubToAddress","getBalance","balance","eth","then","result","utils","fromWei","sendLogin","loginData","alert","decrypt","AES","enc","Utf8","isValid","encrypt","setItem","reset","loginWithMetamask","enable","accounts","removeSeeds","removeItem","sendEther","sendData","isValidAddress","mining","rawData","from","value","gasPrice","toHex","gasLimit","signed","sendTransaction","receipt","console","log","lastTransaction","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\Documentos\\BLOCKCHAIN\\Doble Grado BlockChain\\Blockchain Engineering\\TFG - Enginering\\BLOCKTICK\\blocktick_dApp\\src\\app\\components\\metamask\\metamask.component.ts","D:\\Documentos\\BLOCKCHAIN\\Doble Grado BlockChain\\Blockchain Engineering\\TFG - Enginering\\BLOCKTICK\\blocktick_dApp\\src\\app\\components\\metamask\\metamask.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport * as Mnemonic from \"bitcore-mnemonic\";\nimport * as CryptoJS from \"crypto-js\";\nimport { hdkey } from \"ethereumjs-wallet\";\nimport * as bip39 from \"bip39\";\nimport * as util from \"ethereumjs-util\";\nimport Web3 from 'web3';\n\n@Component({\n  selector: 'app-metamask',\n  templateUrl: './metamask.component.html',\n  styleUrls: ['./metamask.component.scss']\n})\nexport class MetamaskComponent {\n  \n  loginForm: any;\n\n  sendForm: any;\n\n  encrypted: any;\n\n  wallet:any = {\n    address: '',\n    privateKey: '',\n  }\n\n  web3: any;\n\n  window: any;\n\n  mining = false;\n\n  lastTransaction: any;\n\n  constructor(@Inject(DOCUMENT) private document: Document, private formBuilder: FormBuilder) {\n    this.window = document.defaultView;\n\n    this.loginForm = this.formBuilder.group({\n      seeds: '',\n      password: ''\n    });\n\n    this.sendForm = this.formBuilder.group({\n      to: '',\n      amount: ''\n    });\n\n    this.encrypted = window.localStorage.getItem('seeds');\n\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\n\n    //this.web3 = new Web3;\n\t\n\tthis.web3 = new Web3(this.window.ethereum); \n\n\t/*\n    this.web3.setProvider(\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\n    );\n\t*/\n  }\n\n  // february current defy one inform wet hurry cupboard type enable spare famous\n  async initWallet(seeds: string) {\n    var mnemonic = new Mnemonic(seeds);\n    var seed = await bip39.mnemonicToSeed(mnemonic.toString());\n    var path = \"m/44'/60'/0'/0/0\";\n\n    var wallet = hdkey\n      .fromMasterSeed(seed)\n      .derivePath(path)\n      .getWallet();\n\n    var privateKey = wallet.getPrivateKey();\n    var publicKey = util.privateToPublic(privateKey);\n    var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\n\n    this.wallet.privateKey = privateKey;\n\n    this.getBalance(address);\n    this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\n\n this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\n    return this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\n  });\n  }\n\n  async getBalance(address:string) {\n    this.wallet.address = address;\n    this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\n      return this.web3.utils.fromWei(result, 'ether');\n    });\n  }\n\n  sendLogin(loginData:any) {\n    if (loginData.password == '') {\n      return alert('Introduce tu contraseña');\n    }\n\n    if (this.encrypted) {\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\n    }\n\n    if (!Mnemonic.isValid(loginData.seeds)) {\n      return alert('Semilla inválida');\n    }\n\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\n\n    window.localStorage.setItem('seeds', encrypted);\n\n    this.loginForm.reset();\n\n    this.initWallet(loginData.seed);\n  }\n\n  loginWithMetamask() {\n    if (!this.window.ethereum) {\n      return alert('Metamask no está instalado');\n    }\n\n    this.window.ethereum.enable().then((accounts:any) => {\n      let address = accounts[0];\n      this.getBalance(address);\n\t  this.wallet.address = address;\n    });\n  }\n\n  removeSeeds() {\n    window.localStorage.removeItem('seeds');\n    this.encrypted = '';\n    this.wallet = {\n      address: '',\n      balance: ''\n    };\n  }\n\n  async sendEther(sendData:any) {\n    if (sendData.to == '' || sendData.amount == null) {\n      return alert('Campos son obligatorios');\n    }\n\n    if ( ! util.isValidAddress(sendData.to)) {\n      return alert('Dirección inválida');\n    }\n\n    this.mining = true;\n\n    var rawData = {\n      from: this.wallet.address,\n      to: sendData.to,\n      value: sendData.amount,\n      gasPrice: this.web3.utils.toHex(10000000000),\n      gasLimit: this.web3.utils.toHex(1000000),\n      //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\n    };\n\n\tvar signed = await this.web3.eth.sendTransaction(rawData).then((receipt:any) => {\n\t\n  \t  console.log(\"Transaction succeeded\", receipt);\t\t\n      this.mining = false;\n      this.lastTransaction = receipt;\n\n      this.sendForm.reset();\n    });\n\t\n    //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\n\n\t/*\n    this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\n      this.mining = false;\n      this.lastTransaction = receipt;\n\n      this.sendForm.reset();\n    });\n\t*/\n  }\n\n}\n","<p>metamask works!</p>\n\n<form *ngIf=\"!wallet.address\" [formGroup]=\"loginForm\" (ngSubmit)=\"sendLogin(loginForm.value)\">\n\n    <div *ngIf=\"!encrypted\"> <!-- *ngIf indica cuando quieres que se muestre el campo -->\n      <textarea formControlName=\"seeds\" rows=\"4\" placeholder=\"Seeds\"></textarea>\n    </div>\n  \n    <div>\n      <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" />\n    </div>\n  \n    <button type=\"submit\">Login</button> <!-- los botones, etiquetas, etc,.. siempre van asociados a un método que se declara en app.components.ts -->\n    <button type=\"button\" (click)=\"removeSeeds()\" *ngIf=\"encrypted\">Clear Seeds</button> <!-- borra las semillas -->\n    <button type=\"button\" (click)=\"loginWithMetamask()\">Login with Metamask</button> \n  </form>\n  \n  <div *ngIf=\"wallet.address\"> \n    <h1> Hello {{ wallet.address }} </h1> \n      <p>Tu saldo en ETH es: {{ wallet.balance }}</p>\n      <p><a href=\"https://goerli.etherscan.io/address/{{ wallet.address }}\" target=\"_blank\">Ver tu cuenta en Etherscan (TestNet goerli)</a></p>\n    \n    <h2>Send Ethers</h2> <!-- formulario envío de Ethers -->\n      <form [formGroup]=\"sendForm\" (ngSubmit)=\"sendEther(sendForm.value)\">\n        <div>\n          <input formControlName=\"to\" type=\"text\" placeholder=\"To\" />\n        </div>\n        <div>\n          <input formControlName=\"amount\" type=\"number\" placeholder=\"Amount\" />\n        </div>\n        <button type=\"submit\">Send</button> \n      </form>\n      \n      \n   </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}