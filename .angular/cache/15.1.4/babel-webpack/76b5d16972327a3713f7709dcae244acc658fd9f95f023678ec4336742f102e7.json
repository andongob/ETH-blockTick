{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Transaction = require('../transaction');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\r\n * @constructor\r\n */\nfunction MultiSigInput(input, pubkeys, threshold, signatures, opts) {\n  opts = opts || {};\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  if (opts.noSorting) {\n    this.publicKeys = pubkeys;\n  } else {\n    this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script), 'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigInput, Input);\nMultiSigInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\nMultiSigInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\nMultiSigInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\nMultiSigInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype, hashData, signingMethod) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  signingMethod = signingMethod || 'ecdsa';\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script, signingMethod),\n        sigtype: sigtype\n      }));\n    }\n  });\n  return results;\n};\nMultiSigInput.prototype.addSignature = function (transaction, signature, signingMethod) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()], \"Signature Undefined\"), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), \"Invalid Signature\");\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\nMultiSigInput.prototype._updateScript = function () {\n  this.setScript(Script.buildMultisigIn(this.publicKeys, this.threshold, this._createSignatures()));\n  return this;\n};\nMultiSigInput.prototype._createSignatures = function () {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }),\n  // Future signature types may need refactor of toDER\n  function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\nMultiSigInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\nMultiSigInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\nMultiSigInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\nMultiSigInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\nMultiSigInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\nMultiSigInput.prototype.isValidSignature = function (transaction, signature, signingMethod) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, signingMethod);\n};\n\n/**\r\n *\r\n * @param {Buffer[]} signatures\r\n * @param {PublicKey[]} publicKeys\r\n * @param {Transaction} transaction\r\n * @param {Integer} inputIndex\r\n * @param {Input} input\r\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\r\n * @returns {TransactionSignature[]}\r\n */\nMultiSigInput.normalizeSignatures = function (transaction, input, inputIndex, signatures, publicKeys, signingMethod) {\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, input.output.script, signingMethod);\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n      return true;\n    });\n    return signatureMatch ? signatureMatch : null;\n  });\n};\nMultiSigInput.OPCODES_SIZE = 1; // 0\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function () {\n  return MultiSigInput.OPCODES_SIZE + this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\nmodule.exports = MultiSigInput;","map":{"version":3,"names":["_","require","inherits","Transaction","Input","Output","$","Script","Signature","Sighash","PublicKey","BufferUtil","TransactionSignature","MultiSigInput","input","pubkeys","threshold","signatures","opts","apply","arguments","self","publicKeys","noSorting","sortBy","publicKey","toString","checkState","buildMultisigOut","equals","output","script","publicKeyIndex","each","index","_deserializeSignatures","Array","length","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getSignatures","transaction","privateKey","sigtype","hashData","signingMethod","SIGHASH_ALL","results","push","prevTxId","outputIndex","inputIndex","sign","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","setScript","buildMultisigIn","_createSignatures","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","normalizeSignatures","pubKey","signatureMatch","signatureBuffer","fromTxFormat","isMatch","OPCODES_SIZE","SIGNATURE_SIZE","_estimateSize","module","exports"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/bitcore-lib/lib/transaction/input/multisig.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\nvar inherits = require('inherits');\r\nvar Transaction = require('../transaction');\r\nvar Input = require('./input');\r\nvar Output = require('../output');\r\nvar $ = require('../../util/preconditions');\r\n\r\nvar Script = require('../../script');\r\nvar Signature = require('../../crypto/signature');\r\nvar Sighash = require('../sighash');\r\nvar PublicKey = require('../../publickey');\r\nvar BufferUtil = require('../../util/buffer');\r\nvar TransactionSignature = require('../signature');\r\n\r\n/**\r\n * @constructor\r\n */\r\nfunction MultiSigInput(input, pubkeys, threshold, signatures, opts) {\r\n  opts = opts || {};\r\n  Input.apply(this, arguments);\r\n  var self = this;\r\n  pubkeys = pubkeys || input.publicKeys;\r\n  threshold = threshold || input.threshold;\r\n  signatures = signatures || input.signatures;\r\n  if (opts.noSorting) {\r\n    this.publicKeys = pubkeys\r\n  } else  {\r\n    this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\r\n  }\r\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script),\r\n    'Provided public keys don\\'t match to the provided output script');\r\n  this.publicKeyIndex = {};\r\n  _.each(this.publicKeys, function(publicKey, index) {\r\n    self.publicKeyIndex[publicKey.toString()] = index;\r\n  });\r\n  this.threshold = threshold;\r\n  // Empty array of signatures\r\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\r\n}\r\ninherits(MultiSigInput, Input);\r\n\r\nMultiSigInput.prototype.toObject = function() {\r\n  var obj = Input.prototype.toObject.apply(this, arguments);\r\n  obj.threshold = this.threshold;\r\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\r\n  obj.signatures = this._serializeSignatures();\r\n  return obj;\r\n};\r\n\r\nMultiSigInput.prototype._deserializeSignatures = function(signatures) {\r\n  return _.map(signatures, function(signature) {\r\n    if (!signature) {\r\n      return undefined;\r\n    }\r\n    return new TransactionSignature(signature);\r\n  });\r\n};\r\n\r\nMultiSigInput.prototype._serializeSignatures = function() {\r\n  return _.map(this.signatures, function(signature) {\r\n    if (!signature) {\r\n      return undefined;\r\n    }\r\n    return signature.toObject();\r\n  });\r\n};\r\n\r\nMultiSigInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData, signingMethod) {\r\n  $.checkState(this.output instanceof Output);\r\n  sigtype = sigtype || Signature.SIGHASH_ALL;\r\n  signingMethod = signingMethod || 'ecdsa';\r\n\r\n  var self = this;\r\n  var results = [];\r\n  _.each(this.publicKeys, function(publicKey) {\r\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\r\n      results.push(new TransactionSignature({\r\n        publicKey: privateKey.publicKey,\r\n        prevTxId: self.prevTxId,\r\n        outputIndex: self.outputIndex,\r\n        inputIndex: index,\r\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script, signingMethod),\r\n        sigtype: sigtype\r\n      }));\r\n    }\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nMultiSigInput.prototype.addSignature = function(transaction, signature, signingMethod) {\r\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\r\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()], \"Signature Undefined\"),\r\n    'Signature has no matching public key');\r\n  $.checkState(this.isValidSignature(transaction, signature, signingMethod), \"Invalid Signature\");\r\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\r\n  this._updateScript();\r\n  return this;\r\n};\r\n\r\nMultiSigInput.prototype._updateScript = function() {\r\n  this.setScript(Script.buildMultisigIn(\r\n    this.publicKeys,\r\n    this.threshold,\r\n    this._createSignatures()\r\n  ));\r\n  return this;\r\n};\r\n\r\nMultiSigInput.prototype._createSignatures = function() {\r\n  return _.map(\r\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\r\n    // Future signature types may need refactor of toDER\r\n    function(signature) {\r\n      return BufferUtil.concat([\r\n        signature.signature.toDER(),\r\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\r\n      ]);\r\n    }\r\n  );\r\n};\r\n\r\nMultiSigInput.prototype.clearSignatures = function() {\r\n  this.signatures = new Array(this.publicKeys.length);\r\n  this._updateScript();\r\n};\r\n\r\nMultiSigInput.prototype.isFullySigned = function() {\r\n  return this.countSignatures() === this.threshold;\r\n};\r\n\r\nMultiSigInput.prototype.countMissingSignatures = function() {\r\n  return this.threshold - this.countSignatures();\r\n};\r\n\r\nMultiSigInput.prototype.countSignatures = function() {\r\n  return _.reduce(this.signatures, function(sum, signature) {\r\n    return sum + (!!signature);\r\n  }, 0);\r\n};\r\n\r\nMultiSigInput.prototype.publicKeysWithoutSignature = function() {\r\n  var self = this;\r\n  return _.filter(this.publicKeys, function(publicKey) {\r\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\r\n  });\r\n};\r\n\r\nMultiSigInput.prototype.isValidSignature = function(transaction, signature, signingMethod) {\r\n  // FIXME: Refactor signature so this is not necessary\r\n  signature.signature.nhashtype = signature.sigtype;\r\n  return Sighash.verify(\r\n    transaction,\r\n    signature.signature,\r\n    signature.publicKey,\r\n    signature.inputIndex,\r\n    this.output.script,\r\n    signingMethod\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * @param {Buffer[]} signatures\r\n * @param {PublicKey[]} publicKeys\r\n * @param {Transaction} transaction\r\n * @param {Integer} inputIndex\r\n * @param {Input} input\r\n * @param {String} signingMethod - method used to sign - 'ecdsa' or 'schnorr' (future signing method)\r\n * @returns {TransactionSignature[]}\r\n */\r\nMultiSigInput.normalizeSignatures = function(transaction, input, inputIndex, signatures, publicKeys, signingMethod) {\r\n  return publicKeys.map(function (pubKey) {\r\n    var signatureMatch = null;\r\n    signatures = signatures.filter(function (signatureBuffer) {\r\n      if (signatureMatch) {\r\n        return true;\r\n      }\r\n\r\n      var signature = new TransactionSignature({\r\n        signature: Signature.fromTxFormat(signatureBuffer),\r\n        publicKey: pubKey,\r\n        prevTxId: input.prevTxId,\r\n        outputIndex: input.outputIndex,\r\n        inputIndex: inputIndex,\r\n        sigtype: Signature.SIGHASH_ALL\r\n      });\r\n\r\n      signature.signature.nhashtype = signature.sigtype;\r\n      var isMatch = Sighash.verify(\r\n          transaction,\r\n          signature.signature,\r\n          signature.publicKey,\r\n          signature.inputIndex,\r\n          input.output.script,\r\n          signingMethod\r\n      );\r\n\r\n      if (isMatch) {\r\n        signatureMatch = signature;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    return signatureMatch ? signatureMatch : null;\r\n  });\r\n};\r\n\r\nMultiSigInput.OPCODES_SIZE = 1; // 0\r\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\r\n\r\nMultiSigInput.prototype._estimateSize = function() {\r\n  return MultiSigInput.OPCODES_SIZE +\r\n    this.threshold * MultiSigInput.SIGNATURE_SIZE;\r\n};\r\n\r\nmodule.exports = MultiSigInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}