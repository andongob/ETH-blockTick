{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar createHash = require('create-hash');\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsBuffer)(a);\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\nexports.keccak = keccak;\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\nexports.keccak256 = keccak256;\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\nexports.keccakFromString = keccakFromString;\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromHexString = keccakFromHexString;\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\nexports.keccakFromArray = keccakFromArray;\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\nexports.sha256 = sha256;\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\nexports.sha256FromString = sha256FromString;\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\nexports.sha256FromArray = sha256FromArray;\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160 = ripemd160;\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromString = ripemd160FromString;\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\nexports.rlphash = rlphash;","map":{"version":3,"names":["Object","defineProperty","exports","value","rlphash","ripemd160FromArray","ripemd160FromString","ripemd160","sha256FromArray","sha256FromString","sha256","keccakFromArray","keccakFromHexString","keccakFromString","keccak256","keccak","keccak_1","require","createHash","externals_1","bytes_1","helpers_1","a","bits","assertIsBuffer","keccak224","keccak384","keccak512","Error","concat","assertIsString","buf","Buffer","from","assertIsHexString","toBuffer","assertIsArray","_sha256","update","digest","_ripemd160","padded","hash","setLengthLeft","rlp","encode"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-util/dist.browser/hash.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\r\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\r\nvar createHash = require('create-hash');\r\nvar externals_1 = require(\"./externals\");\r\nvar bytes_1 = require(\"./bytes\");\r\nvar helpers_1 = require(\"./helpers\");\r\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccak = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    switch (bits) {\r\n        case 224: {\r\n            return (0, keccak_1.keccak224)(a);\r\n        }\r\n        case 256: {\r\n            return (0, keccak_1.keccak256)(a);\r\n        }\r\n        case 384: {\r\n            return (0, keccak_1.keccak384)(a);\r\n        }\r\n        case 512: {\r\n            return (0, keccak_1.keccak512)(a);\r\n        }\r\n        default: {\r\n            throw new Error(\"Invald algorithm: keccak\".concat(bits));\r\n        }\r\n    }\r\n};\r\nexports.keccak = keccak;\r\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\r\nvar keccak256 = function (a) {\r\n    return (0, exports.keccak)(a);\r\n};\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsString)(a);\r\n    var buf = Buffer.from(a, 'utf8');\r\n    return (0, exports.keccak)(buf, bits);\r\n};\r\nexports.keccakFromString = keccakFromString;\r\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromHexString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsHexString)(a);\r\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\r\n};\r\nexports.keccakFromHexString = keccakFromHexString;\r\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromArray = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\r\n};\r\nexports.keccakFromArray = keccakFromArray;\r\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\r\nvar _sha256 = function (a) {\r\n    a = (0, bytes_1.toBuffer)(a);\r\n    return createHash('sha256').update(a).digest();\r\n};\r\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\r\nvar sha256 = function (a) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256 = sha256;\r\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\r\nvar sha256FromString = function (a) {\r\n    (0, helpers_1.assertIsString)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256FromString = sha256FromString;\r\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\r\nvar sha256FromArray = function (a) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256FromArray = sha256FromArray;\r\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar _ripemd160 = function (a, padded) {\r\n    a = (0, bytes_1.toBuffer)(a);\r\n    var hash = createHash('rmd160').update(a).digest();\r\n    if (padded === true) {\r\n        return (0, bytes_1.setLengthLeft)(hash, 32);\r\n    }\r\n    else {\r\n        return hash;\r\n    }\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160 = function (a, padded) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160 = ripemd160;\r\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160FromString = function (a, padded) {\r\n    (0, helpers_1.assertIsString)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160FromString = ripemd160FromString;\r\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160FromArray = function (a, padded) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160FromArray = ripemd160FromArray;\r\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\r\nvar rlphash = function (a) {\r\n    return (0, exports.keccak)(externals_1.rlp.encode(a));\r\n};\r\nexports.rlphash = rlphash;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}