{"ast":null,"code":"// FIXME: Kind of a weird way to throw exceptions, consider removing\nvar assert = require('assert');\nvar BigInteger = require('./bigi');\n\n/**\n * Turns a byte array into a big integer.\n *\n * This function will interpret a byte array as a big integer in big\n * endian notation.\n */\nBigInteger.fromByteArrayUnsigned = function (byteArray) {\n  // BigInteger expects a DER integer conformant byte array\n  if (byteArray[0] & 0x80) {\n    return new BigInteger([0].concat(byteArray));\n  }\n  return new BigInteger(byteArray);\n};\n\n/**\n * Returns a byte array representation of the big integer.\n *\n * This returns the absolute of the contained value in big endian\n * form. A value of zero results in an empty array.\n */\nBigInteger.prototype.toByteArrayUnsigned = function () {\n  var byteArray = this.toByteArray();\n  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray;\n};\nBigInteger.fromDERInteger = function (byteArray) {\n  return new BigInteger(byteArray);\n};\n\n/*\n * Converts BigInteger to a DER integer representation.\n *\n * The format for this value uses the most significant bit as a sign\n * bit.  If the most significant bit is already set and the integer is\n * positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nBigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray;\nBigInteger.fromBuffer = function (buffer) {\n  // BigInteger expects a DER integer conformant byte array\n  if (buffer[0] & 0x80) {\n    var byteArray = Array.prototype.slice.call(buffer);\n    return new BigInteger([0].concat(byteArray));\n  }\n  return new BigInteger(buffer);\n};\nBigInteger.fromHex = function (hex) {\n  if (hex === '') return BigInteger.ZERO;\n  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string');\n  assert.equal(hex.length % 2, 0, 'Incomplete hex');\n  return new BigInteger(hex, 16);\n};\nBigInteger.prototype.toBuffer = function (size) {\n  var byteArray = this.toByteArrayUnsigned();\n  var zeros = [];\n  var padding = size - byteArray.length;\n  while (zeros.length < padding) zeros.push(0);\n  return new Buffer(zeros.concat(byteArray));\n};\nBigInteger.prototype.toHex = function (size) {\n  return this.toBuffer(size).toString('hex');\n};","map":{"version":3,"names":["assert","require","BigInteger","fromByteArrayUnsigned","byteArray","concat","prototype","toByteArrayUnsigned","toByteArray","slice","fromDERInteger","toDERInteger","fromBuffer","buffer","Array","call","fromHex","hex","ZERO","equal","match","length","toBuffer","size","zeros","padding","push","Buffer","toHex","toString"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/bigi/lib/convert.js"],"sourcesContent":["// FIXME: Kind of a weird way to throw exceptions, consider removing\nvar assert = require('assert')\nvar BigInteger = require('./bigi')\n\n/**\n * Turns a byte array into a big integer.\n *\n * This function will interpret a byte array as a big integer in big\n * endian notation.\n */\nBigInteger.fromByteArrayUnsigned = function(byteArray) {\n  // BigInteger expects a DER integer conformant byte array\n  if (byteArray[0] & 0x80) {\n    return new BigInteger([0].concat(byteArray))\n  }\n\n  return new BigInteger(byteArray)\n}\n\n/**\n * Returns a byte array representation of the big integer.\n *\n * This returns the absolute of the contained value in big endian\n * form. A value of zero results in an empty array.\n */\nBigInteger.prototype.toByteArrayUnsigned = function() {\n  var byteArray = this.toByteArray()\n  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray\n}\n\nBigInteger.fromDERInteger = function(byteArray) {\n  return new BigInteger(byteArray)\n}\n\n/*\n * Converts BigInteger to a DER integer representation.\n *\n * The format for this value uses the most significant bit as a sign\n * bit.  If the most significant bit is already set and the integer is\n * positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nBigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray\n\nBigInteger.fromBuffer = function(buffer) {\n  // BigInteger expects a DER integer conformant byte array\n  if (buffer[0] & 0x80) {\n    var byteArray = Array.prototype.slice.call(buffer)\n\n    return new BigInteger([0].concat(byteArray))\n  }\n\n  return new BigInteger(buffer)\n}\n\nBigInteger.fromHex = function(hex) {\n  if (hex === '') return BigInteger.ZERO\n\n  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')\n  assert.equal(hex.length % 2, 0, 'Incomplete hex')\n  return new BigInteger(hex, 16)\n}\n\nBigInteger.prototype.toBuffer = function(size) {\n  var byteArray = this.toByteArrayUnsigned()\n  var zeros = []\n\n  var padding = size - byteArray.length\n  while (zeros.length < padding) zeros.push(0)\n\n  return new Buffer(zeros.concat(byteArray))\n}\n\nBigInteger.prototype.toHex = function(size) {\n  return this.toBuffer(size).toString('hex')\n}\n"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,UAAU,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACAC,UAAU,CAACC,qBAAqB,GAAG,UAASC,SAAS,EAAE;EACrD;EACA,IAAIA,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;IACvB,OAAO,IAAIF,UAAU,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM,CAACD,SAAS,CAAC,CAAC;EAC9C;EAEA,OAAO,IAAIF,UAAU,CAACE,SAAS,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,UAAU,CAACI,SAAS,CAACC,mBAAmB,GAAG,YAAW;EACpD,IAAIH,SAAS,GAAG,IAAI,CAACI,WAAW,EAAE;EAClC,OAAOJ,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,GAAGA,SAAS,CAACK,KAAK,CAAC,CAAC,CAAC,GAAGL,SAAS;AAC5D,CAAC;AAEDF,UAAU,CAACQ,cAAc,GAAG,UAASN,SAAS,EAAE;EAC9C,OAAO,IAAIF,UAAU,CAACE,SAAS,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,UAAU,CAACI,SAAS,CAACK,YAAY,GAAGT,UAAU,CAACI,SAAS,CAACE,WAAW;AAEpEN,UAAU,CAACU,UAAU,GAAG,UAASC,MAAM,EAAE;EACvC;EACA,IAAIA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;IACpB,IAAIT,SAAS,GAAGU,KAAK,CAACR,SAAS,CAACG,KAAK,CAACM,IAAI,CAACF,MAAM,CAAC;IAElD,OAAO,IAAIX,UAAU,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM,CAACD,SAAS,CAAC,CAAC;EAC9C;EAEA,OAAO,IAAIF,UAAU,CAACW,MAAM,CAAC;AAC/B,CAAC;AAEDX,UAAU,CAACc,OAAO,GAAG,UAASC,GAAG,EAAE;EACjC,IAAIA,GAAG,KAAK,EAAE,EAAE,OAAOf,UAAU,CAACgB,IAAI;EAEtClB,MAAM,CAACmB,KAAK,CAACF,GAAG,EAAEA,GAAG,CAACG,KAAK,CAAC,eAAe,CAAC,EAAE,oBAAoB,CAAC;EACnEpB,MAAM,CAACmB,KAAK,CAACF,GAAG,CAACI,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC;EACjD,OAAO,IAAInB,UAAU,CAACe,GAAG,EAAE,EAAE,CAAC;AAChC,CAAC;AAEDf,UAAU,CAACI,SAAS,CAACgB,QAAQ,GAAG,UAASC,IAAI,EAAE;EAC7C,IAAInB,SAAS,GAAG,IAAI,CAACG,mBAAmB,EAAE;EAC1C,IAAIiB,KAAK,GAAG,EAAE;EAEd,IAAIC,OAAO,GAAGF,IAAI,GAAGnB,SAAS,CAACiB,MAAM;EACrC,OAAOG,KAAK,CAACH,MAAM,GAAGI,OAAO,EAAED,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC;EAE5C,OAAO,IAAIC,MAAM,CAACH,KAAK,CAACnB,MAAM,CAACD,SAAS,CAAC,CAAC;AAC5C,CAAC;AAEDF,UAAU,CAACI,SAAS,CAACsB,KAAK,GAAG,UAASL,IAAI,EAAE;EAC1C,OAAO,IAAI,CAACD,QAAQ,CAACC,IAAI,CAAC,CAACM,QAAQ,CAAC,KAAK,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}