{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\r\n * A network is merely a map containing values that correspond to version\r\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\r\n * (a.k.a. \"mainnet\") and \"testnet\".\r\n * @constructor\r\n */\nfunction Network() {}\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\r\n * @function\r\n * @member Networks#get\r\n * Retrieves the network associated with a magic number or string.\r\n * @param {string|number|Network} arg\r\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\r\n * @return Network\r\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function (key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  if (networkMaps[arg] && networkMaps[arg].length >= 1) {\n    return networkMaps[arg][0];\n  } else {\n    return networkMaps[arg];\n  }\n}\n\n/**\r\n * @function\r\n * @member Networks#add\r\n * Will add a custom Network\r\n * @param {Object} data\r\n * @param {string} data.name - The name of the network\r\n * @param {string} data.alias - The aliased name of the network\r\n * @param {Number} data.pubkeyhash - The publickey hash prefix\r\n * @param {Number} data.privatekey - The privatekey prefix\r\n * @param {Number} data.scripthash - The scripthash prefix\r\n * @param {string} data.bech32prefix - The native segwit prefix\r\n * @param {Number} data.xpubkey - The extended public key magic\r\n * @param {Number} data.xprivkey - The extended private key magic\r\n * @param {Number} data.networkMagic - The network magic number\r\n * @param {Number} data.port - The network port\r\n * @param {Array}  data.dnsSeeds - An array of dns seeds\r\n * @return Network\r\n */\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    bech32prefix: data.bech32prefix,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      if (!networkMaps[value]) {\n        networkMaps[value] = [];\n      }\n      networkMaps[value].push(network);\n    }\n  });\n  networks.push(network);\n  return network;\n}\n\n/**\r\n * @function\r\n * @member Networks#remove\r\n * Will remove a custom network\r\n * @param {Network} network\r\n */\nfunction removeNetwork(network) {\n  if (typeof network !== 'object') {\n    network = get(network);\n  }\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key].length) {\n      const index = networkMaps[key].indexOf(network);\n      if (index >= 0) {\n        networkMaps[key].splice(index, 1);\n      }\n      if (networkMaps[key].length === 0) {\n        delete networkMaps[key];\n      }\n    } else if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  bech32prefix: 'bc',\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: ['seed.bitcoin.sipa.be', 'dnsseed.bluematt.me', 'dnsseed.bitcoin.dashjr.org', 'seed.bitcoinstats.com', 'seed.bitnodes.io', 'bitseed.xf2.org']\n});\n\n/**\r\n * @instance\r\n * @member Networks#livenet\r\n */\nvar livenet = get('livenet');\naddNetwork({\n  name: 'testnet',\n  alias: 'test',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'tb',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0x0b110907,\n  port: 18333,\n  dnsSeeds: ['testnet-seed.bitcoin.petertodd.org', 'testnet-seed.bluematt.me', 'testnet-seed.alexykot.me', 'testnet-seed.bitcoin.schildbach.de']\n});\n\n/**\r\n * @instance\r\n * @member Networks#testnet\r\n */\nvar testnet = get('testnet');\naddNetwork({\n  name: 'regtest',\n  alias: 'dev',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  bech32prefix: 'bcrt',\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xfabfb5da,\n  port: 18444,\n  dnsSeeds: []\n});\n\n/**\r\n * @instance\r\n * @member Networks#testnet\r\n */\nvar regtest = get('regtest');\n\n/**\r\n * @function\r\n * @deprecated\r\n * @member Networks#enableRegtest\r\n * Will enable regtest features for testnet\r\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\r\n * @function\r\n * @deprecated\r\n * @member Networks#disableRegtest\r\n * Will disable regtest features for testnet\r\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\r\n * @namespace Networks\r\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","containsArg","key","index","some","undefined","length","addNetwork","data","network","defineImmutable","alias","pubkeyhash","privatekey","scripthash","bech32prefix","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","each","value","isUndefined","isObject","push","removeNetwork","i","splice","livenet","testnet","regtest","enableRegtest","regtestEnabled","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/bitcore-lib/lib/networks.js"],"sourcesContent":["'use strict';\r\nvar _ = require('lodash');\r\n\r\nvar BufferUtil = require('./util/buffer');\r\nvar JSUtil = require('./util/js');\r\nvar networks = [];\r\nvar networkMaps = {};\r\n\r\n/**\r\n * A network is merely a map containing values that correspond to version\r\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\r\n * (a.k.a. \"mainnet\") and \"testnet\".\r\n * @constructor\r\n */\r\nfunction Network() {}\r\n\r\nNetwork.prototype.toString = function toString() {\r\n  return this.name;\r\n};\r\n\r\n/**\r\n * @function\r\n * @member Networks#get\r\n * Retrieves the network associated with a magic number or string.\r\n * @param {string|number|Network} arg\r\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\r\n * @return Network\r\n */\r\nfunction get(arg, keys) {\r\n  if (~networks.indexOf(arg)) {\r\n    return arg;\r\n  }\r\n  if (keys) {\r\n    if (!_.isArray(keys)) {\r\n      keys = [keys];\r\n    }\r\n    var containsArg = function(key) {\r\n      return networks[index][key] === arg;\r\n    };\r\n    for (var index in networks) {\r\n      if (_.some(keys, containsArg)) {\r\n        return networks[index];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n  if(networkMaps[arg] && networkMaps[arg].length >= 1) {\r\n    return networkMaps[arg][0];\r\n  } else {\r\n    return networkMaps[arg];\r\n  }\r\n}\r\n\r\n/**\r\n * @function\r\n * @member Networks#add\r\n * Will add a custom Network\r\n * @param {Object} data\r\n * @param {string} data.name - The name of the network\r\n * @param {string} data.alias - The aliased name of the network\r\n * @param {Number} data.pubkeyhash - The publickey hash prefix\r\n * @param {Number} data.privatekey - The privatekey prefix\r\n * @param {Number} data.scripthash - The scripthash prefix\r\n * @param {string} data.bech32prefix - The native segwit prefix\r\n * @param {Number} data.xpubkey - The extended public key magic\r\n * @param {Number} data.xprivkey - The extended private key magic\r\n * @param {Number} data.networkMagic - The network magic number\r\n * @param {Number} data.port - The network port\r\n * @param {Array}  data.dnsSeeds - An array of dns seeds\r\n * @return Network\r\n */\r\nfunction addNetwork(data) {\r\n\r\n  var network = new Network();\r\n\r\n  JSUtil.defineImmutable(network, {\r\n    name: data.name,\r\n    alias: data.alias,\r\n    pubkeyhash: data.pubkeyhash,\r\n    privatekey: data.privatekey,\r\n    scripthash: data.scripthash,\r\n    bech32prefix: data.bech32prefix,\r\n    xpubkey: data.xpubkey,\r\n    xprivkey: data.xprivkey\r\n  });\r\n\r\n  if (data.networkMagic) {\r\n    JSUtil.defineImmutable(network, {\r\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\r\n    });\r\n  }\r\n\r\n  if (data.port) {\r\n    JSUtil.defineImmutable(network, {\r\n      port: data.port\r\n    });\r\n  }\r\n\r\n  if (data.dnsSeeds) {\r\n    JSUtil.defineImmutable(network, {\r\n      dnsSeeds: data.dnsSeeds\r\n    });\r\n  }\r\n  _.each(network, function(value) {\r\n    if (!_.isUndefined(value) && !_.isObject(value)) {\r\n      if(!networkMaps[value]) {\r\n        networkMaps[value] = [];\r\n      }\r\n      networkMaps[value].push(network);\r\n    }\r\n  });\r\n\r\n  networks.push(network);\r\n\r\n  return network;\r\n\r\n}\r\n\r\n/**\r\n * @function\r\n * @member Networks#remove\r\n * Will remove a custom network\r\n * @param {Network} network\r\n */\r\nfunction removeNetwork(network) {\r\n  if (typeof network !== 'object') {\r\n    network = get(network);\r\n  }\r\n  for (var i = 0; i < networks.length; i++) {\r\n    if (networks[i] === network) {\r\n      networks.splice(i, 1);\r\n    }\r\n  }\r\n  for (var key in networkMaps) {\r\n    if (networkMaps[key].length) {\r\n      const index = networkMaps[key].indexOf(network);\r\n      if (index >= 0) {\r\n        networkMaps[key].splice(index, 1);\r\n      }\r\n      if (networkMaps[key].length === 0) {\r\n        delete networkMaps[key];\r\n      }\r\n    } else if (networkMaps[key] === network) {\r\n      delete networkMaps[key];\r\n    }\r\n  }\r\n}\r\n\r\naddNetwork({\r\n  name: 'livenet',\r\n  alias: 'mainnet',\r\n  pubkeyhash: 0x00,\r\n  privatekey: 0x80,\r\n  scripthash: 0x05,\r\n  bech32prefix: 'bc',\r\n  xpubkey: 0x0488b21e,\r\n  xprivkey: 0x0488ade4,\r\n  networkMagic: 0xf9beb4d9,\r\n  port: 8333,\r\n  dnsSeeds: [\r\n    'seed.bitcoin.sipa.be',\r\n    'dnsseed.bluematt.me',\r\n    'dnsseed.bitcoin.dashjr.org',\r\n    'seed.bitcoinstats.com',\r\n    'seed.bitnodes.io',\r\n    'bitseed.xf2.org'\r\n  ]\r\n});\r\n\r\n/**\r\n * @instance\r\n * @member Networks#livenet\r\n */\r\nvar livenet = get('livenet');\r\n\r\naddNetwork({\r\n  name: 'testnet',\r\n  alias: 'test',\r\n  pubkeyhash: 0x6f,\r\n  privatekey: 0xef,\r\n  scripthash: 0xc4,\r\n  bech32prefix: 'tb',\r\n  xpubkey: 0x043587cf,\r\n  xprivkey: 0x04358394,\r\n  networkMagic: 0x0b110907,\r\n  port: 18333,\r\n  dnsSeeds: [\r\n    'testnet-seed.bitcoin.petertodd.org',\r\n    'testnet-seed.bluematt.me',\r\n    'testnet-seed.alexykot.me',\r\n    'testnet-seed.bitcoin.schildbach.de'\r\n  ]\r\n});\r\n\r\n/**\r\n * @instance\r\n * @member Networks#testnet\r\n */\r\nvar testnet = get('testnet');\r\n\r\naddNetwork({\r\n  name: 'regtest',\r\n  alias: 'dev',\r\n  pubkeyhash: 0x6f,\r\n  privatekey: 0xef,\r\n  scripthash: 0xc4,\r\n  bech32prefix: 'bcrt',\r\n  xpubkey: 0x043587cf,\r\n  xprivkey: 0x04358394,\r\n  networkMagic: 0xfabfb5da,\r\n  port: 18444,\r\n  dnsSeeds: []\r\n});\r\n\r\n/**\r\n * @instance\r\n * @member Networks#testnet\r\n */\r\nvar regtest = get('regtest');\r\n\r\n/**\r\n * @function\r\n * @deprecated\r\n * @member Networks#enableRegtest\r\n * Will enable regtest features for testnet\r\n */\r\nfunction enableRegtest() {\r\n  testnet.regtestEnabled = true;\r\n}\r\n\r\n/**\r\n * @function\r\n * @deprecated\r\n * @member Networks#disableRegtest\r\n * Will disable regtest features for testnet\r\n */\r\nfunction disableRegtest() {\r\n  testnet.regtestEnabled = false;\r\n}\r\n\r\n/**\r\n * @namespace Networks\r\n */\r\nmodule.exports = {\r\n  add: addNetwork,\r\n  remove: removeNetwork,\r\n  defaultNetwork: livenet,\r\n  livenet: livenet,\r\n  mainnet: livenet,\r\n  testnet: testnet,\r\n  regtest: regtest,\r\n  get: get,\r\n  enableRegtest: enableRegtest,\r\n  disableRegtest: disableRegtest\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}