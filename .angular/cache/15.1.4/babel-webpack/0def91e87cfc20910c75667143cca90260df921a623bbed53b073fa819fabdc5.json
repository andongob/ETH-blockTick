{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\n/**\r\n * Determines whether a string contains only hexadecimal values\r\n *\r\n * @name JSUtil.isHexa\r\n * @param {string} value\r\n * @return {boolean} true if the string is the hexa representation of a number\r\n */\nvar isHexa = function isHexa(value) {\n  if (!_.isString(value)) {\n    return false;\n  }\n  return /^[0-9a-fA-F]+$/.test(value);\n};\n\n/**\r\n * @namespace JSUtil\r\n */\nmodule.exports = {\n  /**\r\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\r\n   * value (the json object decoded), so no double JSON.parse call is necessary\r\n   *\r\n   * @param {string} arg\r\n   * @return {Object|boolean} false if the argument is not a JSON string.\r\n   */\n  isValidJSON: function isValidJSON(arg) {\n    var parsed;\n    if (!_.isString(arg)) {\n      return false;\n    }\n    try {\n      parsed = JSON.parse(arg);\n    } catch (e) {\n      return false;\n    }\n    if (typeof parsed === 'object') {\n      return true;\n    }\n    return false;\n  },\n  isHexa: isHexa,\n  isHexaString: isHexa,\n  /**\r\n   * Clone an array\r\n   */\n  cloneArray: function (array) {\n    return [].concat(array);\n  },\n  /**\r\n   * Define immutable properties on a target object\r\n   *\r\n   * @param {Object} target - An object to be extended\r\n   * @param {Object} values - An object of properties\r\n   * @return {Object} The target object\r\n   */\n  defineImmutable: function defineImmutable(target, values) {\n    Object.keys(values).forEach(function (key) {\n      Object.defineProperty(target, key, {\n        configurable: false,\n        enumerable: true,\n        value: values[key]\n      });\n    });\n    return target;\n  },\n  /**\r\n   * Checks that a value is a natural number, a positive integer or zero.\r\n   *\r\n   * @param {*} value\r\n   * @return {Boolean}\r\n   */\n  isNaturalNumber: function isNaturalNumber(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n};","map":{"version":3,"names":["_","require","isHexa","value","isString","test","module","exports","isValidJSON","arg","parsed","JSON","parse","e","isHexaString","cloneArray","array","concat","defineImmutable","target","values","Object","keys","forEach","key","defineProperty","configurable","enumerable","isNaturalNumber","isFinite","Math","floor"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bitcore-lib/lib/util/js.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\n\r\n/**\r\n * Determines whether a string contains only hexadecimal values\r\n *\r\n * @name JSUtil.isHexa\r\n * @param {string} value\r\n * @return {boolean} true if the string is the hexa representation of a number\r\n */\r\nvar isHexa = function isHexa(value) {\r\n  if (!_.isString(value)) {\r\n    return false;\r\n  }\r\n  return /^[0-9a-fA-F]+$/.test(value);\r\n};\r\n\r\n/**\r\n * @namespace JSUtil\r\n */\r\nmodule.exports = {\r\n  /**\r\n   * Test if an argument is a valid JSON object. If it is, returns a truthy\r\n   * value (the json object decoded), so no double JSON.parse call is necessary\r\n   *\r\n   * @param {string} arg\r\n   * @return {Object|boolean} false if the argument is not a JSON string.\r\n   */\r\n  isValidJSON: function isValidJSON(arg) {\r\n    var parsed;\r\n    if (!_.isString(arg)) {\r\n      return false;\r\n    }\r\n    try {\r\n      parsed = JSON.parse(arg);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    if (typeof(parsed) === 'object') {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  isHexa: isHexa,\r\n  isHexaString: isHexa,\r\n\r\n  /**\r\n   * Clone an array\r\n   */\r\n  cloneArray: function(array) {\r\n    return [].concat(array);\r\n  },\r\n\r\n  /**\r\n   * Define immutable properties on a target object\r\n   *\r\n   * @param {Object} target - An object to be extended\r\n   * @param {Object} values - An object of properties\r\n   * @return {Object} The target object\r\n   */\r\n  defineImmutable: function defineImmutable(target, values) {\r\n    Object.keys(values).forEach(function(key){\r\n      Object.defineProperty(target, key, {\r\n        configurable: false,\r\n        enumerable: true,\r\n        value: values[key]\r\n      });\r\n    });\r\n    return target;\r\n  },\r\n  /**\r\n   * Checks that a value is a natural number, a positive integer or zero.\r\n   *\r\n   * @param {*} value\r\n   * @return {Boolean}\r\n   */\r\n  isNaturalNumber: function isNaturalNumber(value) {\r\n    return typeof value === 'number' &&\r\n      isFinite(value) &&\r\n      Math.floor(value) === value &&\r\n      value >= 0;\r\n  }\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,SAASA,MAAM,CAACC,KAAK,EAAE;EAClC,IAAI,CAACH,CAAC,CAACI,QAAQ,CAACD,KAAK,CAAC,EAAE;IACtB,OAAO,KAAK;EACd;EACA,OAAO,gBAAgB,CAACE,IAAI,CAACF,KAAK,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASA,WAAW,CAACC,GAAG,EAAE;IACrC,IAAIC,MAAM;IACV,IAAI,CAACV,CAAC,CAACI,QAAQ,CAACK,GAAG,CAAC,EAAE;MACpB,OAAO,KAAK;IACd;IACA,IAAI;MACFC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC;IAC1B,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV,OAAO,KAAK;IACd;IACA,IAAI,OAAOH,MAAO,KAAK,QAAQ,EAAE;MAC/B,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;EACDR,MAAM,EAAEA,MAAM;EACdY,YAAY,EAAEZ,MAAM;EAEpB;AACF;AACA;EACEa,UAAU,EAAE,UAASC,KAAK,EAAE;IAC1B,OAAO,EAAE,CAACC,MAAM,CAACD,KAAK,CAAC;EACzB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,eAAe,EAAE,SAASA,eAAe,CAACC,MAAM,EAAEC,MAAM,EAAE;IACxDC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAAC,UAASC,GAAG,EAAC;MACvCH,MAAM,CAACI,cAAc,CAACN,MAAM,EAAEK,GAAG,EAAE;QACjCE,YAAY,EAAE,KAAK;QACnBC,UAAU,EAAE,IAAI;QAChBxB,KAAK,EAAEiB,MAAM,CAACI,GAAG;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOL,MAAM;EACf,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACES,eAAe,EAAE,SAASA,eAAe,CAACzB,KAAK,EAAE;IAC/C,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAC9B0B,QAAQ,CAAC1B,KAAK,CAAC,IACf2B,IAAI,CAACC,KAAK,CAAC5B,KAAK,CAAC,KAAKA,KAAK,IAC3BA,KAAK,IAAI,CAAC;EACd;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}