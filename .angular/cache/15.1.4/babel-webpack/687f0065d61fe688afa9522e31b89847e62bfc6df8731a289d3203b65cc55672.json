{"ast":null,"code":"\"use strict\";\n\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n// begin\n0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n// private key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// middle\n0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x21, 0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n// public key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n// begin\n0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n// private key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// middle\n0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04, 0x41, 0x04, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0e, 0x11, 0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10, 0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n// public key\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\n  privateKey.copy(result, compressed ? 8 : 9);\n  publicKey.copy(result, compressed ? 181 : 214);\n  return result;\n};\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length;\n  // sequence header\n  var index = 0;\n  if (length < index + 1 || privateKey[index] !== 0x30) return null;\n  index += 1;\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return null;\n  var lenb = privateKey[index] & 0x7f;\n  index += 1;\n  if (lenb < 1 || lenb > 2) return null;\n  if (length < index + lenb) return null;\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\n  index += lenb;\n  if (length < index + len) return null;\n  // sequence element 0: version number (=1)\n  if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {\n    return null;\n  }\n  index += 3;\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {\n    return null;\n  }\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\n};\nexports.signatureImportLax = function (signature) {\n  var r = Buffer.alloc(32, 0);\n  var s = Buffer.alloc(32, 0);\n  var length = signature.length;\n  var index = 0;\n  // sequence tag byte\n  if (signature[index++] !== 0x30) {\n    return null;\n  }\n  // sequence length byte\n  var lenbyte = signature[index++];\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80;\n    if (index > length) {\n      return null;\n    }\n  }\n  // sequence tag byte for r\n  if (signature[index++] !== 0x02) {\n    return null;\n  }\n  // length for r\n  var rlen = signature[index++];\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80;\n    if (index + lenbyte > length) {\n      return null;\n    }\n    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + signature[index];\n  }\n  if (rlen > length - index) {\n    return null;\n  }\n  var rindex = index;\n  index += rlen;\n  // sequence tag byte for s\n  if (signature[index++] !== 0x02) {\n    return null;\n  }\n  // length for s\n  var slen = signature[index++];\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80;\n    if (index + lenbyte > length) {\n      return null;\n    }\n    for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + signature[index];\n  }\n  if (slen > length - index) {\n    return null;\n  }\n  var sindex = index;\n  index += slen;\n  // ignore leading zeros in r\n  for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) {\n    return null;\n  }\n  var rvalue = signature.slice(rindex, rindex + rlen);\n  rvalue.copy(r, 32 - rvalue.length);\n  // ignore leading zeros in s\n  for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) {\n    return null;\n  }\n  var svalue = signature.slice(sindex, sindex + slen);\n  svalue.copy(s, 32 - svalue.length);\n  return {\n    r: r,\n    s: s\n  };\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","EC_PRIVKEY_EXPORT_DER_COMPRESSED","Buffer","from","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","privateKeyExport","privateKey","publicKey","compressed","result","copy","privateKeyImport","length","index","lenb","len","slice","signatureImportLax","signature","r","alloc","s","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js"],"sourcesContent":["\"use strict\";\r\n// This file is imported from secp256k1 v3\r\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\r\n    // begin\r\n    0x30,\r\n    0x81,\r\n    0xd3,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0x04,\r\n    0x20,\r\n    // private key\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    // middle\r\n    0xa0,\r\n    0x81,\r\n    0x85,\r\n    0x30,\r\n    0x81,\r\n    0x82,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0x30,\r\n    0x2c,\r\n    0x06,\r\n    0x07,\r\n    0x2a,\r\n    0x86,\r\n    0x48,\r\n    0xce,\r\n    0x3d,\r\n    0x01,\r\n    0x01,\r\n    0x02,\r\n    0x21,\r\n    0x00,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xfe,\r\n    0xff,\r\n    0xff,\r\n    0xfc,\r\n    0x2f,\r\n    0x30,\r\n    0x06,\r\n    0x04,\r\n    0x01,\r\n    0x00,\r\n    0x04,\r\n    0x01,\r\n    0x07,\r\n    0x04,\r\n    0x21,\r\n    0x02,\r\n    0x79,\r\n    0xbe,\r\n    0x66,\r\n    0x7e,\r\n    0xf9,\r\n    0xdc,\r\n    0xbb,\r\n    0xac,\r\n    0x55,\r\n    0xa0,\r\n    0x62,\r\n    0x95,\r\n    0xce,\r\n    0x87,\r\n    0x0b,\r\n    0x07,\r\n    0x02,\r\n    0x9b,\r\n    0xfc,\r\n    0xdb,\r\n    0x2d,\r\n    0xce,\r\n    0x28,\r\n    0xd9,\r\n    0x59,\r\n    0xf2,\r\n    0x81,\r\n    0x5b,\r\n    0x16,\r\n    0xf8,\r\n    0x17,\r\n    0x98,\r\n    0x02,\r\n    0x21,\r\n    0x00,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xfe,\r\n    0xba,\r\n    0xae,\r\n    0xdc,\r\n    0xe6,\r\n    0xaf,\r\n    0x48,\r\n    0xa0,\r\n    0x3b,\r\n    0xbf,\r\n    0xd2,\r\n    0x5e,\r\n    0x8c,\r\n    0xd0,\r\n    0x36,\r\n    0x41,\r\n    0x41,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0xa1,\r\n    0x24,\r\n    0x03,\r\n    0x22,\r\n    0x00,\r\n    // public key\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n]);\r\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\r\n    // begin\r\n    0x30,\r\n    0x82,\r\n    0x01,\r\n    0x13,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0x04,\r\n    0x20,\r\n    // private key\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    // middle\r\n    0xa0,\r\n    0x81,\r\n    0xa5,\r\n    0x30,\r\n    0x81,\r\n    0xa2,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0x30,\r\n    0x2c,\r\n    0x06,\r\n    0x07,\r\n    0x2a,\r\n    0x86,\r\n    0x48,\r\n    0xce,\r\n    0x3d,\r\n    0x01,\r\n    0x01,\r\n    0x02,\r\n    0x21,\r\n    0x00,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xfe,\r\n    0xff,\r\n    0xff,\r\n    0xfc,\r\n    0x2f,\r\n    0x30,\r\n    0x06,\r\n    0x04,\r\n    0x01,\r\n    0x00,\r\n    0x04,\r\n    0x01,\r\n    0x07,\r\n    0x04,\r\n    0x41,\r\n    0x04,\r\n    0x79,\r\n    0xbe,\r\n    0x66,\r\n    0x7e,\r\n    0xf9,\r\n    0xdc,\r\n    0xbb,\r\n    0xac,\r\n    0x55,\r\n    0xa0,\r\n    0x62,\r\n    0x95,\r\n    0xce,\r\n    0x87,\r\n    0x0b,\r\n    0x07,\r\n    0x02,\r\n    0x9b,\r\n    0xfc,\r\n    0xdb,\r\n    0x2d,\r\n    0xce,\r\n    0x28,\r\n    0xd9,\r\n    0x59,\r\n    0xf2,\r\n    0x81,\r\n    0x5b,\r\n    0x16,\r\n    0xf8,\r\n    0x17,\r\n    0x98,\r\n    0x48,\r\n    0x3a,\r\n    0xda,\r\n    0x77,\r\n    0x26,\r\n    0xa3,\r\n    0xc4,\r\n    0x65,\r\n    0x5d,\r\n    0xa4,\r\n    0xfb,\r\n    0xfc,\r\n    0x0e,\r\n    0x11,\r\n    0x08,\r\n    0xa8,\r\n    0xfd,\r\n    0x17,\r\n    0xb4,\r\n    0x48,\r\n    0xa6,\r\n    0x85,\r\n    0x54,\r\n    0x19,\r\n    0x9c,\r\n    0x47,\r\n    0xd0,\r\n    0x8f,\r\n    0xfb,\r\n    0x10,\r\n    0xd4,\r\n    0xb8,\r\n    0x02,\r\n    0x21,\r\n    0x00,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xff,\r\n    0xfe,\r\n    0xba,\r\n    0xae,\r\n    0xdc,\r\n    0xe6,\r\n    0xaf,\r\n    0x48,\r\n    0xa0,\r\n    0x3b,\r\n    0xbf,\r\n    0xd2,\r\n    0x5e,\r\n    0x8c,\r\n    0xd0,\r\n    0x36,\r\n    0x41,\r\n    0x41,\r\n    0x02,\r\n    0x01,\r\n    0x01,\r\n    0xa1,\r\n    0x44,\r\n    0x03,\r\n    0x42,\r\n    0x00,\r\n    // public key\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n    0x00,\r\n]);\r\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\r\n    if (compressed === void 0) { compressed = true; }\r\n    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\r\n    privateKey.copy(result, compressed ? 8 : 9);\r\n    publicKey.copy(result, compressed ? 181 : 214);\r\n    return result;\r\n};\r\nexports.privateKeyImport = function (privateKey) {\r\n    var length = privateKey.length;\r\n    // sequence header\r\n    var index = 0;\r\n    if (length < index + 1 || privateKey[index] !== 0x30)\r\n        return null;\r\n    index += 1;\r\n    // sequence length constructor\r\n    if (length < index + 1 || !(privateKey[index] & 0x80))\r\n        return null;\r\n    var lenb = privateKey[index] & 0x7f;\r\n    index += 1;\r\n    if (lenb < 1 || lenb > 2)\r\n        return null;\r\n    if (length < index + lenb)\r\n        return null;\r\n    // sequence length\r\n    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\r\n    index += lenb;\r\n    if (length < index + len)\r\n        return null;\r\n    // sequence element 0: version number (=1)\r\n    if (length < index + 3 ||\r\n        privateKey[index] !== 0x02 ||\r\n        privateKey[index + 1] !== 0x01 ||\r\n        privateKey[index + 2] !== 0x01) {\r\n        return null;\r\n    }\r\n    index += 3;\r\n    // sequence element 1: octet string, up to 32 bytes\r\n    if (length < index + 2 ||\r\n        privateKey[index] !== 0x04 ||\r\n        privateKey[index + 1] > 0x20 ||\r\n        length < index + 2 + privateKey[index + 1]) {\r\n        return null;\r\n    }\r\n    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\r\n};\r\nexports.signatureImportLax = function (signature) {\r\n    var r = Buffer.alloc(32, 0);\r\n    var s = Buffer.alloc(32, 0);\r\n    var length = signature.length;\r\n    var index = 0;\r\n    // sequence tag byte\r\n    if (signature[index++] !== 0x30) {\r\n        return null;\r\n    }\r\n    // sequence length byte\r\n    var lenbyte = signature[index++];\r\n    if (lenbyte & 0x80) {\r\n        index += lenbyte - 0x80;\r\n        if (index > length) {\r\n            return null;\r\n        }\r\n    }\r\n    // sequence tag byte for r\r\n    if (signature[index++] !== 0x02) {\r\n        return null;\r\n    }\r\n    // length for r\r\n    var rlen = signature[index++];\r\n    if (rlen & 0x80) {\r\n        lenbyte = rlen - 0x80;\r\n        if (index + lenbyte > length) {\r\n            return null;\r\n        }\r\n        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)\r\n            ;\r\n        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)\r\n            rlen = (rlen << 8) + signature[index];\r\n    }\r\n    if (rlen > length - index) {\r\n        return null;\r\n    }\r\n    var rindex = index;\r\n    index += rlen;\r\n    // sequence tag byte for s\r\n    if (signature[index++] !== 0x02) {\r\n        return null;\r\n    }\r\n    // length for s\r\n    var slen = signature[index++];\r\n    if (slen & 0x80) {\r\n        lenbyte = slen - 0x80;\r\n        if (index + lenbyte > length) {\r\n            return null;\r\n        }\r\n        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)\r\n            ;\r\n        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)\r\n            slen = (slen << 8) + signature[index];\r\n    }\r\n    if (slen > length - index) {\r\n        return null;\r\n    }\r\n    var sindex = index;\r\n    index += slen;\r\n    // ignore leading zeros in r\r\n    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)\r\n        ;\r\n    // copy r value\r\n    if (rlen > 32) {\r\n        return null;\r\n    }\r\n    var rvalue = signature.slice(rindex, rindex + rlen);\r\n    rvalue.copy(r, 32 - rvalue.length);\r\n    // ignore leading zeros in s\r\n    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)\r\n        ;\r\n    // copy s value\r\n    if (slen > 32) {\r\n        return null;\r\n    }\r\n    var svalue = signature.slice(sindex, sindex + slen);\r\n    svalue.copy(s, 32 - svalue.length);\r\n    return { r: r, s: s };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}