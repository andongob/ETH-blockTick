{"ast":null,"code":"import _asyncToGenerator from \"D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DOCUMENT } from '@angular/common';\nimport * as Mnemonic from \"bitcore-mnemonic\";\nimport * as CryptoJS from \"crypto-js\";\nimport { hdkey } from \"ethereumjs-wallet\";\nimport * as bip39 from \"bip39\";\nimport * as util from \"ethereumjs-util\";\nimport Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class AppComponent {\n  constructor(document, formBuilder) {\n    this.document = document;\n    this.formBuilder = formBuilder;\n    this.wallet = {\n      address: '',\n      privateKey: ''\n    };\n    this.mining = false;\n    this.window = document.defaultView;\n    this.loginForm = this.formBuilder.group({\n      seeds: '',\n      password: ''\n    });\n    this.sendForm = this.formBuilder.group({\n      to: '',\n      amount: ''\n    });\n    this.encrypted = window.localStorage.getItem('seeds');\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\n    //this.web3 = new Web3;\n    this.web3 = new Web3(this.window.ethereum);\n    /*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n    */\n  }\n  // february current defy one inform wet hurry cupboard type enable spare famous\n  initWallet(seeds) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var mnemonic = new Mnemonic(seeds);\n      var seed = yield bip39.mnemonicToSeed(mnemonic.toString());\n      var path = \"m/44'/60'/0'/0/0\";\n      var wallet = hdkey.fromMasterSeed(seed).derivePath(path).getWallet();\n      var privateKey = wallet.getPrivateKey();\n      var publicKey = util.privateToPublic(privateKey);\n      var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\n      _this.wallet.privateKey = privateKey;\n      _this.getBalance(address);\n      _this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\n      _this.wallet.balance = yield _this.web3.eth.getBalance(address).then(result => {\n        return _this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\n      });\n    })();\n  }\n\n  getBalance(address) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.wallet.address = address;\n      _this2.wallet.balance = yield _this2.web3.eth.getBalance(address).then(result => {\n        return _this2.web3.utils.fromWei(result, 'ether');\n      });\n    })();\n  }\n  sendLogin(loginData) {\n    if (loginData.password == '') {\n      return alert('Introduce tu contraseña');\n    }\n    if (this.encrypted) {\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\n    }\n    if (!Mnemonic.isValid(loginData.seeds)) {\n      return alert('Semilla inválida');\n    }\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\n    window.localStorage.setItem('seeds', encrypted);\n    this.loginForm.reset();\n    this.initWallet(loginData.seed);\n  }\n  loginWithMetamask() {\n    if (!this.window.ethereum) {\n      return alert('Metamask no está instalado');\n    }\n    this.window.ethereum.enable().then(accounts => {\n      let address = accounts[0];\n      this.getBalance(address);\n      this.wallet.address = address;\n    });\n  }\n  removeSeeds() {\n    window.localStorage.removeItem('seeds');\n    this.encrypted = '';\n    this.wallet = {\n      address: '',\n      balance: ''\n    };\n  }\n  sendEther(sendData) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (sendData.to == '' || sendData.amount == null) {\n        return alert('Campos son obligatorios');\n      }\n      if (!util.isValidAddress(sendData.to)) {\n        return alert('Dirección inválida');\n      }\n      _this3.mining = true;\n      var rawData = {\n        from: _this3.wallet.address,\n        to: sendData.to,\n        value: sendData.amount,\n        gasPrice: _this3.web3.utils.toHex(10000000000),\n        gasLimit: _this3.web3.utils.toHex(1000000)\n        //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\n      };\n\n      var signed = yield _this3.web3.eth.sendTransaction(rawData).then(receipt => {\n        console.log(\"Transaction succeeded\", receipt);\n        _this3.mining = false;\n        _this3.lastTransaction = receipt;\n        _this3.sendForm.reset();\n      });\n      //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\n      /*\r\n      this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n        this.mining = false;\r\n        this.lastTransaction = receipt;\r\n              this.sendForm.reset();\r\n      });\r\n      */\n    })();\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"ae-container-fluid\", \"rk-main\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-header\")(1, \"section\", 0)(2, \"router-outlet\")(3, \"app-footer\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["DOCUMENT","Mnemonic","CryptoJS","hdkey","bip39","util","Web3","AppComponent","constructor","document","formBuilder","address","privateKey","window","defaultView","loginForm","group","seeds","password","sendForm","to","amount","encrypted","localStorage","getItem","web3","ethereum","initWallet","mnemonic","seed","mnemonicToSeed","toString","path","wallet","fromMasterSeed","derivePath","getWallet","getPrivateKey","publicKey","privateToPublic","pubToAddress","getBalance","balance","eth","then","result","utils","fromWei","sendLogin","loginData","alert","decrypt","AES","enc","Utf8","isValid","encrypt","setItem","reset","loginWithMetamask","enable","accounts","removeSeeds","removeItem","sendEther","sendData","isValidAddress","mining","rawData","from","value","gasPrice","toHex","gasLimit","signed","sendTransaction","receipt","console","log","lastTransaction","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["D:\\Documentos\\BLOCKCHAIN\\Doble Grado BlockChain\\Blockchain Engineering\\TFG - Enginering\\BLOCKTICK\\blocktick_dApp\\src\\app\\app.component.ts","D:\\Documentos\\BLOCKCHAIN\\Doble Grado BlockChain\\Blockchain Engineering\\TFG - Enginering\\BLOCKTICK\\blocktick_dApp\\src\\app\\app.component.html"],"sourcesContent":["\r\n\r\n\r\n\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport * as Mnemonic from \"bitcore-mnemonic\";\r\nimport * as CryptoJS from \"crypto-js\";\r\nimport { hdkey } from \"ethereumjs-wallet\";\r\nimport * as bip39 from \"bip39\";\r\nimport * as util from \"ethereumjs-util\";\r\nimport Web3 from 'web3';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  loginForm: any;\r\n\r\n  sendForm: any;\r\n\r\n  encrypted: any;\r\n\r\n  wallet:any = {\r\n    address: '',\r\n    privateKey: '',\r\n  }\r\n\r\n  web3: any;\r\n\r\n  window: any;\r\n\r\n  mining = false;\r\n\r\n  lastTransaction: any;\r\n\r\n  constructor(@Inject(DOCUMENT) private document: Document, private formBuilder: FormBuilder) {\r\n    this.window = document.defaultView;\r\n\r\n    this.loginForm = this.formBuilder.group({\r\n      seeds: '',\r\n      password: ''\r\n    });\r\n\r\n    this.sendForm = this.formBuilder.group({\r\n      to: '',\r\n      amount: ''\r\n    });\r\n\r\n    this.encrypted = window.localStorage.getItem('seeds');\r\n\r\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\r\n\r\n    //this.web3 = new Web3;\r\n\t\r\n\tthis.web3 = new Web3(this.window.ethereum); \r\n\r\n\t/*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n\t*/\r\n\r\n\r\n  }\r\n\r\n  // february current defy one inform wet hurry cupboard type enable spare famous\r\n  async initWallet(seeds: string) {\r\n    var mnemonic = new Mnemonic(seeds);\r\n    var seed = await bip39.mnemonicToSeed(mnemonic.toString());\r\n    var path = \"m/44'/60'/0'/0/0\";\r\n\r\n    var wallet = hdkey\r\n      .fromMasterSeed(seed)\r\n      .derivePath(path)\r\n      .getWallet();\r\n\r\n    var privateKey = wallet.getPrivateKey();\r\n    var publicKey = util.privateToPublic(privateKey);\r\n    var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\r\n\r\n    this.wallet.privateKey = privateKey;\r\n\r\n    this.getBalance(address);\r\n    this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\r\n\r\n this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n    return this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\r\n  });\r\n  }\r\n\r\n  async getBalance(address:string) {\r\n    this.wallet.address = address;\r\n    this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n      return this.web3.utils.fromWei(result, 'ether');\r\n    });\r\n  }\r\n\r\n  sendLogin(loginData:any) {\r\n    if (loginData.password == '') {\r\n      return alert('Introduce tu contraseña');\r\n    }\r\n\r\n    if (this.encrypted) {\r\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\r\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\r\n    }\r\n\r\n    if (!Mnemonic.isValid(loginData.seeds)) {\r\n      return alert('Semilla inválida');\r\n    }\r\n\r\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\r\n\r\n    window.localStorage.setItem('seeds', encrypted);\r\n\r\n    this.loginForm.reset();\r\n\r\n    this.initWallet(loginData.seed);\r\n  }\r\n\r\n  loginWithMetamask() {\r\n    if (!this.window.ethereum) {\r\n      return alert('Metamask no está instalado');\r\n    }\r\n\r\n    this.window.ethereum.enable().then((accounts:any) => {\r\n      let address = accounts[0];\r\n      this.getBalance(address);\r\n\t  this.wallet.address = address;\r\n    });\r\n  }\r\n\r\n  removeSeeds() {\r\n    window.localStorage.removeItem('seeds');\r\n    this.encrypted = '';\r\n    this.wallet = {\r\n      address: '',\r\n      balance: ''\r\n    };\r\n  }\r\n\r\n  async sendEther(sendData:any) {\r\n    if (sendData.to == '' || sendData.amount == null) {\r\n      return alert('Campos son obligatorios');\r\n    }\r\n\r\n    if ( ! util.isValidAddress(sendData.to)) {\r\n      return alert('Dirección inválida');\r\n    }\r\n\r\n    this.mining = true;\r\n\r\n    var rawData = {\r\n      from: this.wallet.address,\r\n      to: sendData.to,\r\n      value: sendData.amount,\r\n      gasPrice: this.web3.utils.toHex(10000000000),\r\n      gasLimit: this.web3.utils.toHex(1000000),\r\n      //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\r\n    };\r\n\r\n\tvar signed = await this.web3.eth.sendTransaction(rawData).then((receipt:any) => {\r\n\t\r\n  \t  console.log(\"Transaction succeeded\", receipt);\t\t\r\n      this.mining = false;\r\n      this.lastTransaction = receipt;\r\n\r\n      this.sendForm.reset();\r\n    });\r\n\t\r\n    //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\r\n\r\n\t/*\r\n    this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n      this.mining = false;\r\n      this.lastTransaction = receipt;\r\n\r\n      this.sendForm.reset();\r\n    });\r\n\t*/\r\n\r\n  }\r\n\r\n}\r\n\r\n","\r\n  <app-header></app-header>\r\n\r\n  <section class=\"ae-container-fluid rk-main\">\r\n  </section>\r\n\r\n<!-- <app-inicio></app-inicio> -->\r\n<!-- <app-tickets></app-tickets>  -->\r\n\r\n<!-- <app-events></app-events> -->\r\n<!-- <app-create-events></app-create-events> -->\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<!--\r\n<form *ngIf=\"!wallet.address\" [formGroup]=\"loginForm\" (ngSubmit)=\"sendLogin(loginForm.value)\">\r\n\r\n  <div *ngIf=\"!encrypted\"> <!-- *ngIf indica cuando quieres que se muestre el campo \r\n    <textarea formControlName=\"seeds\" rows=\"4\" placeholder=\"Seeds\"></textarea>\r\n  </div>\r\n\r\n  <div>\r\n    <input formControlName=\"password\" type=\"password\" placeholder=\"Password\" />\r\n  </div>\r\n\r\n  <button type=\"submit\">Login</button> <!-- los botones, etiquetas, etc,.. siempre van asociados a un método que se declara en app.components.ts \r\n  <button type=\"button\" (click)=\"removeSeeds()\" *ngIf=\"encrypted\">Clear Seeds</button> <!-- borra las semillas \r\n  <button type=\"button\" (click)=\"loginWithMetamask()\">Login with Metamask</button> \r\n</form>\r\n\r\n<div *ngIf=\"wallet.address\"> \r\n  <h1> Hello {{ wallet.address }} </h1> \r\n    <p>Tu saldo en ETH es: {{ wallet.balance }}</p>\r\n    <p><a href=\"https://goerli.etherscan.io/address/{{ wallet.address }}\" target=\"_blank\">Ver tu cuenta en Etherscan (TestNet goerli)</a></p>\r\n  \r\n  <h2>Send Ethers</h2> <!-- formulario envío de Ethers \r\n    <form [formGroup]=\"sendForm\" (ngSubmit)=\"sendEther(sendForm.value)\">\r\n      <div>\r\n        <input formControlName=\"to\" type=\"text\" placeholder=\"To\" />\r\n      </div>\r\n      <div>\r\n        <input formControlName=\"amount\" type=\"number\" placeholder=\"Amount\" />\r\n      </div>\r\n      <button type=\"submit\">Send</button> \r\n    </form>\r\n    \r\n    \r\n </div> \r\n-->\r\n <app-footer></app-footer>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}