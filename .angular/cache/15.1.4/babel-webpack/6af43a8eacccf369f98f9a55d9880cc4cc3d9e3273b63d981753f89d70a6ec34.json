{"ast":null,"code":";\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./sha1\", \"./hmac\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA1 = C_algo.SHA1;\n    var HMAC = C_algo.HMAC;\n\n    /**\r\n     * Password-Based Key Derivation Function 2 algorithm.\r\n     */\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n       * @property {Hasher} hasher The hasher to use. Default: SHA1\r\n       * @property {number} iterations The number of iterations to perform. Default: 1\r\n       */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: SHA1,\n        iterations: 1\n      }),\n      /**\r\n       * Initializes a newly created key derivation function.\r\n       *\r\n       * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n       *\r\n       * @example\r\n       *\r\n       *     var kdf = CryptoJS.algo.PBKDF2.create();\r\n       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\r\n       *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\r\n       */\n      init: function (cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n      /**\r\n       * Computes the Password-Based Key Derivation Function 2.\r\n       *\r\n       * @param {WordArray|string} password The password.\r\n       * @param {WordArray|string} salt A salt.\r\n       *\r\n       * @return {WordArray} The derived key.\r\n       *\r\n       * @example\r\n       *\r\n       *     var key = kdf.compute(password, salt);\r\n       */\n      compute: function (password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init HMAC\n        var hmac = HMAC.create(cfg.hasher, password);\n\n        // Initial values\n        var derivedKey = WordArray.create();\n        var blockIndex = WordArray.create([0x00000001]);\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var blockIndexWords = blockIndex.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          var block = hmac.update(salt).finalize(blockIndex);\n          hmac.reset();\n\n          // Shortcuts\n          var blockWords = block.words;\n          var blockWordsLength = blockWords.length;\n\n          // Iterations\n          var intermediate = block;\n          for (var i = 1; i < iterations; i++) {\n            intermediate = hmac.finalize(intermediate);\n            hmac.reset();\n\n            // Shortcut\n            var intermediateWords = intermediate.words;\n\n            // XOR intermediate with block\n            for (var j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = keySize * 4;\n        return derivedKey;\n      }\n    });\n\n    /**\r\n     * Computes the Password-Based Key Derivation Function 2.\r\n     *\r\n     * @param {WordArray|string} password The password.\r\n     * @param {WordArray|string} salt A salt.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n     *\r\n     * @return {WordArray} The derived key.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var key = CryptoJS.PBKDF2(password, salt);\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\r\n     */\n    C.PBKDF2 = function (password, salt, cfg) {\n      return PBKDF2.create(cfg).compute(password, salt);\n    };\n  })();\n  return CryptoJS.PBKDF2;\n});","map":{"version":3,"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","C","C_lib","lib","Base","WordArray","C_algo","algo","SHA1","HMAC","PBKDF2","extend","cfg","keySize","hasher","iterations","init","compute","password","salt","hmac","create","derivedKey","blockIndex","derivedKeyWords","words","blockIndexWords","length","block","update","finalize","reset","blockWords","blockWordsLength","intermediate","i","intermediateWords","j","concat","sigBytes"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/crypto-js/pbkdf2.js"],"sourcesContent":[";(function (root, factory, undef) {\r\n\tif (typeof exports === \"object\") {\r\n\t\t// CommonJS\r\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\r\n\t}\r\n\telse if (typeof define === \"function\" && define.amd) {\r\n\t\t// AMD\r\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\r\n\t}\r\n\telse {\r\n\t\t// Global (browser)\r\n\t\tfactory(root.CryptoJS);\r\n\t}\r\n}(this, function (CryptoJS) {\r\n\r\n\t(function () {\r\n\t    // Shortcuts\r\n\t    var C = CryptoJS;\r\n\t    var C_lib = C.lib;\r\n\t    var Base = C_lib.Base;\r\n\t    var WordArray = C_lib.WordArray;\r\n\t    var C_algo = C.algo;\r\n\t    var SHA1 = C_algo.SHA1;\r\n\t    var HMAC = C_algo.HMAC;\r\n\r\n\t    /**\r\n\t     * Password-Based Key Derivation Function 2 algorithm.\r\n\t     */\r\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\r\n\t        /**\r\n\t         * Configuration options.\r\n\t         *\r\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\r\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\r\n\t         */\r\n\t        cfg: Base.extend({\r\n\t            keySize: 128/32,\r\n\t            hasher: SHA1,\r\n\t            iterations: 1\r\n\t        }),\r\n\r\n\t        /**\r\n\t         * Initializes a newly created key derivation function.\r\n\t         *\r\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\r\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\r\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\r\n\t         */\r\n\t        init: function (cfg) {\r\n\t            this.cfg = this.cfg.extend(cfg);\r\n\t        },\r\n\r\n\t        /**\r\n\t         * Computes the Password-Based Key Derivation Function 2.\r\n\t         *\r\n\t         * @param {WordArray|string} password The password.\r\n\t         * @param {WordArray|string} salt A salt.\r\n\t         *\r\n\t         * @return {WordArray} The derived key.\r\n\t         *\r\n\t         * @example\r\n\t         *\r\n\t         *     var key = kdf.compute(password, salt);\r\n\t         */\r\n\t        compute: function (password, salt) {\r\n\t            // Shortcut\r\n\t            var cfg = this.cfg;\r\n\r\n\t            // Init HMAC\r\n\t            var hmac = HMAC.create(cfg.hasher, password);\r\n\r\n\t            // Initial values\r\n\t            var derivedKey = WordArray.create();\r\n\t            var blockIndex = WordArray.create([0x00000001]);\r\n\r\n\t            // Shortcuts\r\n\t            var derivedKeyWords = derivedKey.words;\r\n\t            var blockIndexWords = blockIndex.words;\r\n\t            var keySize = cfg.keySize;\r\n\t            var iterations = cfg.iterations;\r\n\r\n\t            // Generate key\r\n\t            while (derivedKeyWords.length < keySize) {\r\n\t                var block = hmac.update(salt).finalize(blockIndex);\r\n\t                hmac.reset();\r\n\r\n\t                // Shortcuts\r\n\t                var blockWords = block.words;\r\n\t                var blockWordsLength = blockWords.length;\r\n\r\n\t                // Iterations\r\n\t                var intermediate = block;\r\n\t                for (var i = 1; i < iterations; i++) {\r\n\t                    intermediate = hmac.finalize(intermediate);\r\n\t                    hmac.reset();\r\n\r\n\t                    // Shortcut\r\n\t                    var intermediateWords = intermediate.words;\r\n\r\n\t                    // XOR intermediate with block\r\n\t                    for (var j = 0; j < blockWordsLength; j++) {\r\n\t                        blockWords[j] ^= intermediateWords[j];\r\n\t                    }\r\n\t                }\r\n\r\n\t                derivedKey.concat(block);\r\n\t                blockIndexWords[0]++;\r\n\t            }\r\n\t            derivedKey.sigBytes = keySize * 4;\r\n\r\n\t            return derivedKey;\r\n\t        }\r\n\t    });\r\n\r\n\t    /**\r\n\t     * Computes the Password-Based Key Derivation Function 2.\r\n\t     *\r\n\t     * @param {WordArray|string} password The password.\r\n\t     * @param {WordArray|string} salt A salt.\r\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n\t     *\r\n\t     * @return {WordArray} The derived key.\r\n\t     *\r\n\t     * @static\r\n\t     *\r\n\t     * @example\r\n\t     *\r\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\r\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\r\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\r\n\t     */\r\n\t    C.PBKDF2 = function (password, salt, cfg) {\r\n\t        return PBKDF2.create(cfg).compute(password, salt);\r\n\t    };\r\n\t}());\r\n\r\n\r\n\treturn CryptoJS.PBKDF2;\r\n\r\n}));"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}