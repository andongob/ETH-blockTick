{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'),\n  keccak224 = _a.keccak224,\n  keccak384 = _a.keccak384,\n  k256 = _a.keccak256,\n  keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\r\n * Creates Keccak hash of the input\r\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\r\n * it's interpreted as hexadecimal, otherwise as utf8.\r\n * @param bits The Keccak width\r\n */\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n  if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n    a = Buffer.from(a, 'utf8');\n  } else {\n    a = bytes_1.toBuffer(a);\n  }\n  if (!bits) bits = 256;\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\r\n * Creates SHA256 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\nexports.sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\nexports.ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return bytes_1.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","rlphash","ripemd160","sha256","keccak256","keccak","_a","require","keccak224","keccak384","k256","keccak512","createHash","ethjsUtil","rlp","bytes_1","a","bits","isHexString","Buffer","from","toBuffer","Error","update","digest","padded","hash","setLength","encode"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-tx/node_modules/ethereumjs-util/dist/hash.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\r\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\r\nvar createHash = require('create-hash');\r\nvar ethjsUtil = require('ethjs-util');\r\nvar rlp = require(\"rlp\");\r\nvar bytes_1 = require(\"./bytes\");\r\n/**\r\n * Creates Keccak hash of the input\r\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\r\n * it's interpreted as hexadecimal, otherwise as utf8.\r\n * @param bits The Keccak width\r\n */\r\nexports.keccak = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\r\n        a = Buffer.from(a, 'utf8');\r\n    }\r\n    else {\r\n        a = bytes_1.toBuffer(a);\r\n    }\r\n    if (!bits)\r\n        bits = 256;\r\n    switch (bits) {\r\n        case 224: {\r\n            return keccak224(a);\r\n        }\r\n        case 256: {\r\n            return k256(a);\r\n        }\r\n        case 384: {\r\n            return keccak384(a);\r\n        }\r\n        case 512: {\r\n            return keccak512(a);\r\n        }\r\n        default: {\r\n            throw new Error(\"Invald algorithm: keccak\" + bits);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\r\nexports.keccak256 = function (a) {\r\n    return exports.keccak(a);\r\n};\r\n/**\r\n * Creates SHA256 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n */\r\nexports.sha256 = function (a) {\r\n    a = bytes_1.toBuffer(a);\r\n    return createHash('sha256')\r\n        .update(a)\r\n        .digest();\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nexports.ripemd160 = function (a, padded) {\r\n    a = bytes_1.toBuffer(a);\r\n    var hash = createHash('rmd160')\r\n        .update(a)\r\n        .digest();\r\n    if (padded === true) {\r\n        return bytes_1.setLength(hash, 32);\r\n    }\r\n    else {\r\n        return hash;\r\n    }\r\n};\r\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\r\nexports.rlphash = function (a) {\r\n    return exports.keccak(rlp.encode(a));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}