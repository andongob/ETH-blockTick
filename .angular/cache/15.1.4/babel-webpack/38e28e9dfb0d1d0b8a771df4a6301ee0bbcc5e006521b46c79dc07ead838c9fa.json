{"ast":null,"code":"'use strict';\n\nfunction Random() {}\n\n/* secure random bytes that sometimes throws an error due to lack of entropy */\nRandom.getRandomBuffer = function (size) {\n  if (process.browser) return Random.getRandomBufferBrowser(size);else return Random.getRandomBufferNode(size);\n};\nRandom.getRandomBufferNode = function (size) {\n  var crypto = require('crypto');\n  return crypto.randomBytes(size);\n};\nRandom.getRandomBufferBrowser = function (size) {\n  if (!window.crypto && !window.msCrypto) throw new Error('window.crypto not available');\n  if (window.crypto && window.crypto.getRandomValues) var crypto = window.crypto;else if (window.msCrypto && window.msCrypto.getRandomValues)\n    //internet explorer\n    var crypto = window.msCrypto;else throw new Error('window.crypto.getRandomValues not available');\n  var bbuf = new Uint8Array(size);\n  crypto.getRandomValues(bbuf);\n  var buf = Buffer.from(bbuf);\n  return buf;\n};\n\n/* insecure random bytes, but it never fails */\nRandom.getPseudoRandomBuffer = function (size) {\n  var b32 = 0x100000000;\n  var b = Buffer.alloc(size);\n  var r;\n  for (var i = 0; i <= size; i++) {\n    var j = Math.floor(i / 4);\n    var k = i - j * 4;\n    if (k === 0) {\n      r = Math.random() * b32;\n      b[i] = r & 0xff;\n    } else {\n      b[i] = (r = r >>> 8) & 0xff;\n    }\n  }\n  return b;\n};\nmodule.exports = Random;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}