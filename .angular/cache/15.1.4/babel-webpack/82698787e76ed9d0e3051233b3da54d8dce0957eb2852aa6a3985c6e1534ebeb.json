{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar URL = require('url');\nvar Address = require('./address');\nvar Unit = require('./unit');\n\n/**\r\n * Bitcore URI\r\n *\r\n * Instantiate an URI from a bitcoin URI String or an Object. An URI instance\r\n * can be created with a bitcoin uri string or an object. All instances of\r\n * URI are valid, the static method isValid allows checking before instantiation.\r\n *\r\n * All standard parameters can be found as members of the class, the address\r\n * is represented using an {Address} instance and the amount is represented in\r\n * satoshis. Any other non-standard parameters can be found under the extra member.\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');\r\n * console.log(uri.address, uri.amount);\r\n * ```\r\n *\r\n * @param {string|Object} data - A bitcoin URI string or an Object\r\n * @param {Array.<string>=} knownParams - Required non-standard params\r\n * @throws {TypeError} Invalid bitcoin address\r\n * @throws {TypeError} Invalid amount\r\n * @throws {Error} Unknown required argument\r\n * @returns {URI} A new valid and frozen instance of URI\r\n * @constructor\r\n */\nvar URI = function (data, knownParams) {\n  if (!(this instanceof URI)) {\n    return new URI(data, knownParams);\n  }\n  this.extras = {};\n  this.knownParams = knownParams || [];\n  this.address = this.network = this.amount = this.message = null;\n  if (typeof data === 'string') {\n    var params = URI.parse(data);\n    if (params.amount) {\n      params.amount = this._parseAmount(params.amount);\n    }\n    this._fromObject(params);\n  } else if (typeof data === 'object') {\n    this._fromObject(data);\n  } else {\n    throw new TypeError('Unrecognized data format.');\n  }\n};\n\n/**\r\n * Instantiate a URI from a String\r\n *\r\n * @param {string} str - JSON string or object of the URI\r\n * @returns {URI} A new instance of a URI\r\n */\nURI.fromString = function fromString(str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return new URI(str);\n};\n\n/**\r\n * Instantiate a URI from an Object\r\n *\r\n * @param {Object} data - object of the URI\r\n * @returns {URI} A new instance of a URI\r\n */\nURI.fromObject = function fromObject(json) {\n  return new URI(json);\n};\n\n/**\r\n * Check if an bitcoin URI string is valid\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');\r\n * // true\r\n * ```\r\n *\r\n * @param {string|Object} data - A bitcoin URI string or an Object\r\n * @param {Array.<string>=} knownParams - Required non-standard params\r\n * @returns {boolean} Result of uri validation\r\n */\nURI.isValid = function (arg, knownParams) {\n  try {\n    new URI(arg, knownParams);\n  } catch (err) {\n    return false;\n  }\n  return true;\n};\n\n/**\r\n * Convert a bitcoin URI string into a simple object.\r\n *\r\n * @param {string} uri - A bitcoin URI string\r\n * @throws {TypeError} Invalid bitcoin URI\r\n * @returns {Object} An object with the parsed params\r\n */\nURI.parse = function (uri) {\n  var info = URL.parse(uri, true);\n  if (info.protocol !== 'bitcoin:') {\n    throw new TypeError('Invalid bitcoin URI');\n  }\n\n  // workaround to host insensitiveness\n  var group = /[^:]*:\\/?\\/?([^?]*)/.exec(uri);\n  info.query.address = group && group[1] || undefined;\n  return info.query;\n};\nURI.Members = ['address', 'amount', 'message', 'label', 'r'];\n\n/**\r\n * Internal function to load the URI instance with an object.\r\n *\r\n * @param {Object} obj - Object with the information\r\n * @throws {TypeError} Invalid bitcoin address\r\n * @throws {TypeError} Invalid amount\r\n * @throws {Error} Unknown required argument\r\n */\nURI.prototype._fromObject = function (obj) {\n  /* jshint maxcomplexity: 10 */\n\n  if (!Address.isValid(obj.address)) {\n    throw new TypeError('Invalid bitcoin address');\n  }\n  this.address = new Address(obj.address);\n  this.network = this.address.network;\n  this.amount = obj.amount;\n  for (var key in obj) {\n    if (key === 'address' || key === 'amount') {\n      continue;\n    }\n    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {\n      throw Error('Unknown required argument ' + key);\n    }\n    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;\n    destination[key] = obj[key];\n  }\n};\n\n/**\r\n * Internal function to transform a BTC string amount into satoshis\r\n *\r\n * @param {string} amount - Amount BTC string\r\n * @throws {TypeError} Invalid amount\r\n * @returns {Object} Amount represented in satoshis\r\n */\nURI.prototype._parseAmount = function (amount) {\n  amount = Number(amount);\n  if (isNaN(amount)) {\n    throw new TypeError('Invalid amount');\n  }\n  return Unit.fromBTC(amount).toSatoshis();\n};\nURI.prototype.toObject = URI.prototype.toJSON = function toObject() {\n  var json = {};\n  for (var i = 0; i < URI.Members.length; i++) {\n    var m = URI.Members[i];\n    if (this.hasOwnProperty(m) && typeof this[m] !== 'undefined') {\n      json[m] = this[m].toString();\n    }\n  }\n  _.extend(json, this.extras);\n  return json;\n};\n\n/**\r\n * Will return a the string representation of the URI\r\n *\r\n * @returns {string} Bitcoin URI string\r\n */\nURI.prototype.toString = function () {\n  var query = {};\n  if (this.amount) {\n    query.amount = Unit.fromSatoshis(this.amount).toBTC();\n  }\n  if (this.message) {\n    query.message = this.message;\n  }\n  if (this.label) {\n    query.label = this.label;\n  }\n  if (this.r) {\n    query.r = this.r;\n  }\n  _.extend(query, this.extras);\n  return URL.format({\n    protocol: 'bitcoin:',\n    host: this.address,\n    query: query\n  });\n};\n\n/**\r\n * Will return a string formatted for the console\r\n *\r\n * @returns {string} Bitcoin URI\r\n */\nURI.prototype.inspect = function () {\n  return '<URI: ' + this.toString() + '>';\n};\nmodule.exports = URI;","map":{"version":3,"names":["_","require","URL","Address","Unit","URI","data","knownParams","extras","address","network","amount","message","params","parse","_parseAmount","_fromObject","TypeError","fromString","str","fromObject","json","isValid","arg","err","uri","info","protocol","group","exec","query","undefined","Members","prototype","obj","key","indexOf","Error","destination","Number","isNaN","fromBTC","toSatoshis","toObject","toJSON","i","length","m","hasOwnProperty","toString","extend","fromSatoshis","toBTC","label","r","format","host","inspect","module","exports"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bitcore-lib/lib/uri.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\nvar URL = require('url');\r\n\r\nvar Address = require('./address');\r\nvar Unit = require('./unit');\r\n\r\n/**\r\n * Bitcore URI\r\n *\r\n * Instantiate an URI from a bitcoin URI String or an Object. An URI instance\r\n * can be created with a bitcoin uri string or an object. All instances of\r\n * URI are valid, the static method isValid allows checking before instantiation.\r\n *\r\n * All standard parameters can be found as members of the class, the address\r\n * is represented using an {Address} instance and the amount is represented in\r\n * satoshis. Any other non-standard parameters can be found under the extra member.\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');\r\n * console.log(uri.address, uri.amount);\r\n * ```\r\n *\r\n * @param {string|Object} data - A bitcoin URI string or an Object\r\n * @param {Array.<string>=} knownParams - Required non-standard params\r\n * @throws {TypeError} Invalid bitcoin address\r\n * @throws {TypeError} Invalid amount\r\n * @throws {Error} Unknown required argument\r\n * @returns {URI} A new valid and frozen instance of URI\r\n * @constructor\r\n */\r\nvar URI = function(data, knownParams) {\r\n  if (!(this instanceof URI)) {\r\n    return new URI(data, knownParams);\r\n  }\r\n\r\n  this.extras = {};\r\n  this.knownParams = knownParams || [];\r\n  this.address = this.network = this.amount = this.message = null;\r\n\r\n  if (typeof(data) === 'string') {\r\n    var params = URI.parse(data);\r\n    if (params.amount) {\r\n      params.amount = this._parseAmount(params.amount);\r\n    }\r\n    this._fromObject(params);\r\n  } else if (typeof(data) === 'object') {\r\n    this._fromObject(data);\r\n  } else {\r\n    throw new TypeError('Unrecognized data format.');\r\n  }\r\n};\r\n\r\n/**\r\n * Instantiate a URI from a String\r\n *\r\n * @param {string} str - JSON string or object of the URI\r\n * @returns {URI} A new instance of a URI\r\n */\r\nURI.fromString = function fromString(str) {\r\n  if (typeof(str) !== 'string') {\r\n    throw new TypeError('Expected a string');\r\n  }\r\n  return new URI(str);\r\n};\r\n\r\n/**\r\n * Instantiate a URI from an Object\r\n *\r\n * @param {Object} data - object of the URI\r\n * @returns {URI} A new instance of a URI\r\n */\r\nURI.fromObject = function fromObject(json) {\r\n  return new URI(json);\r\n};\r\n\r\n/**\r\n * Check if an bitcoin URI string is valid\r\n *\r\n * @example\r\n * ```javascript\r\n *\r\n * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');\r\n * // true\r\n * ```\r\n *\r\n * @param {string|Object} data - A bitcoin URI string or an Object\r\n * @param {Array.<string>=} knownParams - Required non-standard params\r\n * @returns {boolean} Result of uri validation\r\n */\r\nURI.isValid = function(arg, knownParams) {\r\n  try {\r\n    new URI(arg, knownParams);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Convert a bitcoin URI string into a simple object.\r\n *\r\n * @param {string} uri - A bitcoin URI string\r\n * @throws {TypeError} Invalid bitcoin URI\r\n * @returns {Object} An object with the parsed params\r\n */\r\nURI.parse = function(uri) {\r\n  var info = URL.parse(uri, true);\r\n\r\n  if (info.protocol !== 'bitcoin:') {\r\n    throw new TypeError('Invalid bitcoin URI');\r\n  }\r\n\r\n  // workaround to host insensitiveness\r\n  var group = /[^:]*:\\/?\\/?([^?]*)/.exec(uri);\r\n  info.query.address = group && group[1] || undefined;\r\n\r\n  return info.query;\r\n};\r\n\r\nURI.Members = ['address', 'amount', 'message', 'label', 'r'];\r\n\r\n/**\r\n * Internal function to load the URI instance with an object.\r\n *\r\n * @param {Object} obj - Object with the information\r\n * @throws {TypeError} Invalid bitcoin address\r\n * @throws {TypeError} Invalid amount\r\n * @throws {Error} Unknown required argument\r\n */\r\nURI.prototype._fromObject = function(obj) {\r\n  /* jshint maxcomplexity: 10 */\r\n\r\n  if (!Address.isValid(obj.address)) {\r\n    throw new TypeError('Invalid bitcoin address');\r\n  }\r\n\r\n  this.address = new Address(obj.address);\r\n  this.network = this.address.network;\r\n  this.amount = obj.amount;\r\n\r\n  for (var key in obj) {\r\n    if (key === 'address' || key === 'amount') {\r\n      continue;\r\n    }\r\n\r\n    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {\r\n      throw Error('Unknown required argument ' + key);\r\n    }\r\n\r\n    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;\r\n    destination[key] = obj[key];\r\n  }\r\n};\r\n\r\n/**\r\n * Internal function to transform a BTC string amount into satoshis\r\n *\r\n * @param {string} amount - Amount BTC string\r\n * @throws {TypeError} Invalid amount\r\n * @returns {Object} Amount represented in satoshis\r\n */\r\nURI.prototype._parseAmount = function(amount) {\r\n  amount = Number(amount);\r\n  if (isNaN(amount)) {\r\n    throw new TypeError('Invalid amount');\r\n  }\r\n  return Unit.fromBTC(amount).toSatoshis();\r\n};\r\n\r\nURI.prototype.toObject = URI.prototype.toJSON = function toObject() {\r\n  var json = {};\r\n  for (var i = 0; i < URI.Members.length; i++) {\r\n    var m = URI.Members[i];\r\n    if (this.hasOwnProperty(m) && typeof(this[m]) !== 'undefined') {\r\n      json[m] = this[m].toString();\r\n    }\r\n  }\r\n  _.extend(json, this.extras);\r\n  return json;\r\n};\r\n\r\n/**\r\n * Will return a the string representation of the URI\r\n *\r\n * @returns {string} Bitcoin URI string\r\n */\r\nURI.prototype.toString = function() {\r\n  var query = {};\r\n  if (this.amount) {\r\n    query.amount = Unit.fromSatoshis(this.amount).toBTC();\r\n  }\r\n  if (this.message) {\r\n    query.message = this.message;\r\n  }\r\n  if (this.label) {\r\n    query.label = this.label;\r\n  }\r\n  if (this.r) {\r\n    query.r = this.r;\r\n  }\r\n  _.extend(query, this.extras);\r\n\r\n  return URL.format({\r\n    protocol: 'bitcoin:',\r\n    host: this.address,\r\n    query: query\r\n  });\r\n};\r\n\r\n/**\r\n * Will return a string formatted for the console\r\n *\r\n * @returns {string} Bitcoin URI\r\n */\r\nURI.prototype.inspect = function() {\r\n  return '<URI: ' + this.toString() + '>';\r\n};\r\n\r\nmodule.exports = URI;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}