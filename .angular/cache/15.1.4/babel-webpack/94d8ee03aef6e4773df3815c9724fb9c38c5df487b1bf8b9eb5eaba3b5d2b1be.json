{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar index_1 = __importDefault(require(\"./index\"));\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */function () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\r\n   * Creates an instance based on a seed.\r\n   *\r\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\r\n   * create one from a BIP39 mnemonic.\r\n   */\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\r\n   * Create an instance based on a BIP32 extended private or public key.\r\n   */\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\r\n   * Returns a BIP32 extended private key (xprv)\r\n   */\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\r\n   * Return a BIP32 extended public key (xpub)\r\n   */\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\r\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\r\n   */\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\r\n   * Derive a node based on a child index\r\n   */\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\r\n   * Return a `Wallet` instance as seen above\r\n   */\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n  return EthereumHDKey;\n}();\nexports.default = EthereumHDKey;\n//# sourceMappingURL=hdkey.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}