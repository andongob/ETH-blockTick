{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\r\n * Common class to access chain and hardfork parameters\r\n */\nvar Common = /** @class */function () {\n  /**\r\n   * @constructor\r\n   * @param chain String ('mainnet') or Number (1) chain\r\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n   */\n  function Common(chain, hardfork, supportedHardforks) {\n    this._chainParams = this.setChain(chain);\n    this._hardfork = null;\n    this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n    if (hardfork) {\n      this.setHardfork(hardfork);\n    }\n  }\n  /**\r\n   * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\r\n   * params from [[baseChain]] except the ones overridden in [[customChainParams]].\r\n   *\r\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\r\n   * chain params on.\r\n   * @param customChainParams The custom parameters of the chain.\r\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n   */\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n    return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n  };\n  Common._getChainParams = function (chain) {\n    if (typeof chain === 'number') {\n      if (chains_1.chains['names'][chain]) {\n        return chains_1.chains[chains_1.chains['names'][chain]];\n      }\n      throw new Error(\"Chain with ID \" + chain + \" not supported\");\n    }\n    if (chains_1.chains[chain]) {\n      return chains_1.chains[chain];\n    }\n    throw new Error(\"Chain with name \" + chain + \" not supported\");\n  };\n  /**\r\n   * Sets the chain\r\n   * @param chain String ('mainnet') or Number (1) chain\r\n   *     representation. Or, a Dictionary of chain parameters for a private network.\r\n   * @returns The dictionary with parameters set as chain\r\n   */\n  Common.prototype.setChain = function (chain) {\n    if (typeof chain === 'number' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain);\n    } else if (typeof chain === 'object') {\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n      for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n        var param = required_1[_i];\n        if (chain[param] === undefined) {\n          throw new Error(\"Missing required chain parameter: \" + param);\n        }\n      }\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n    return this._chainParams;\n  };\n  /**\r\n   * Sets the hardfork to get params for\r\n   * @param hardfork String identifier ('byzantium')\r\n   */\n  Common.prototype.setHardfork = function (hardfork) {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    var changed = false;\n    for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n      var hfChanges = hardforkChanges_1[_i];\n      if (hfChanges[0] === hardfork) {\n        this._hardfork = hardfork;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n    }\n  };\n  /**\r\n   * Internal helper function to choose between hardfork set and hardfork provided as param\r\n   * @param hardfork Hardfork given to function as a parameter\r\n   * @returns Hardfork chosen to be used\r\n   */\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    onlySupported = onlySupported === undefined ? true : onlySupported;\n    if (!hardfork) {\n      if (!this._hardfork) {\n        throw new Error('Method called with neither a hardfork set nor provided by param');\n      } else {\n        hardfork = this._hardfork;\n      }\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    return hardfork;\n  };\n  /**\r\n   * Internal helper function, returns the params for the given hardfork for the chain set\r\n   * @param hardfork Hardfork name\r\n   * @returns Dictionary with hardfork params\r\n   */\n  Common.prototype._getHardfork = function (hardfork) {\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n      var hf = hfs_1[_i];\n      if (hf['name'] === hardfork) return hf;\n    }\n    throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n  };\n  /**\r\n   * Internal helper function to check if a hardfork is set to be supported by the library\r\n   * @param hardfork Hardfork name\r\n   * @returns True if hardfork is supported\r\n   */\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    if (this._supportedHardforks.length > 0) {\n      for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n        var supportedHf = _a[_i];\n        if (hardfork === supportedHf) return true;\n      }\n    } else {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Returns the parameter corresponding to a hardfork\r\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\r\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\r\n   * @param hardfork Hardfork name, optional if hardfork set\r\n   */\n  Common.prototype.param = function (topic, name, hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    var value;\n    for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n      var hfChanges = hardforkChanges_2[_i];\n      if (!hfChanges[1][topic]) {\n        throw new Error(\"Topic \" + topic + \" not defined\");\n      }\n      if (hfChanges[1][topic][name] !== undefined) {\n        value = hfChanges[1][topic][name].v;\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    if (value === undefined) {\n      throw new Error(topic + \" value for \" + name + \" not found\");\n    }\n    return value;\n  };\n  /**\r\n   * Returns a parameter for the hardfork active on block number\r\n   * @param topic Parameter topic\r\n   * @param name Parameter name\r\n   * @param blockNumber Block number\r\n   */\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.param(topic, name, hardfork);\n  };\n  /**\r\n   * Checks if set or provided hardfork is active on block number\r\n   * @param hardfork Hardfork name or null (for HF set)\r\n   * @param blockNumber\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if HF is active on block number\r\n   */\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlock(hardfork);\n    if (hfBlock !== null && blockNumber >= hfBlock) return true;\n    return false;\n  };\n  /**\r\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\r\n   * @param blockNumber\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if HF is active on block number\r\n   */\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\r\n   * Sequence based check if given or set HF1 is greater than or equal HF2\r\n   * @param hardfork1 Hardfork name or null (if set)\r\n   * @param hardfork2 Hardfork name\r\n   * @param opts Hardfork options\r\n   * @returns True if HF1 gte HF2\r\n   */\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n    var posHf1 = -1,\n      posHf2 = -1;\n    var index = 0;\n    for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n      var hf = hardforks_2[_i];\n      if (hf['name'] === hardfork1) posHf1 = index;\n      if (hf['name'] === hardfork2) posHf2 = index;\n      index += 1;\n    }\n    return posHf1 >= posHf2;\n  };\n  /**\r\n   * Alias to hardforkGteHardfork when hardfork is set\r\n   * @param hardfork Hardfork name\r\n   * @param opts Hardfork options\r\n   * @returns True if hardfork set is greater than hardfork provided\r\n   */\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\r\n   * Checks if given or set hardfork is active on the chain\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @returns True if hardfork is active on the chain\r\n   */\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n      var hf = _a[_i];\n      if (hf['name'] === hardfork && hf['block'] !== null) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Returns the active hardfork switches for the current chain\r\n   * @param blockNumber up to block if provided, otherwise for the whole chain\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @return Array with hardfork arrays\r\n   */\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n      var hf = hfs_2[_i];\n      if (hf['block'] === null) continue;\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n      activeHardforks.push(hf);\n    }\n    return activeHardforks;\n  };\n  /**\r\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\r\n   * @param blockNumber up to block if provided, otherwise for the whole chain\r\n   * @param opts Hardfork options (onlyActive unused)\r\n   * @return Hardfork name\r\n   */\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\r\n   * Returns the hardfork change block for hardfork provided or set\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @returns Block number\r\n   */\n  Common.prototype.hardforkBlock = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    return this._getHardfork(hardfork)['block'];\n  };\n  /**\r\n   * True if block number provided is the hardfork (given or set) change block of the current chain\r\n   * @param blockNumber Number of the block to check\r\n   * @param hardfork Hardfork name, optional if HF set\r\n   * @returns True if blockNumber is HF block\r\n   */\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    if (this.hardforkBlock(hardfork) === blockNumber) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Provide the consensus type for the hardfork set or provided as param\r\n   * @param hardfork Hardfork name, optional if hardfork set\r\n   * @returns Consensus type (e.g. 'pow', 'poa')\r\n   */\n  Common.prototype.consensus = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['consensus'];\n  };\n  /**\r\n   * Provide the finality type for the hardfork set or provided as param\r\n   * @param {String} hardfork Hardfork name, optional if hardfork set\r\n   * @returns {String} Finality type (e.g. 'pos', null of no finality)\r\n   */\n  Common.prototype.finality = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['finality'];\n  };\n  /**\r\n   * Returns the Genesis parameters of current chain\r\n   * @returns Genesis dictionary\r\n   */\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\r\n   * Returns the hardforks for current chain\r\n   * @returns {Array} Array with arrays of hardforks\r\n   */\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\r\n   * Returns bootstrap nodes for the current chain\r\n   * @returns {Dictionary} Dict with bootstrap nodes\r\n   */\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\r\n   * Returns the hardfork set\r\n   * @returns Hardfork name\r\n   */\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\r\n   * Returns the Id of current chain\r\n   * @returns chain Id\r\n   */\n  Common.prototype.chainId = function () {\n    return this._chainParams['chainId'];\n  };\n  /**\r\n   * Returns the name of current chain\r\n   * @returns chain name (lower case)\r\n   */\n  Common.prototype.chainName = function () {\n    return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n  };\n  /**\r\n   * Returns the Id of current network\r\n   * @returns network Id\r\n   */\n  Common.prototype.networkId = function () {\n    return this._chainParams['networkId'];\n  };\n  return Common;\n}();\nexports.default = Common;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","chains_1","require","hardforks_1","Common","chain","hardfork","supportedHardforks","_chainParams","setChain","_hardfork","_supportedHardforks","undefined","setHardfork","forCustomChain","baseChain","customChainParams","standardChainParams","_getChainParams","chains","Error","required","_i","required_1","param","_isSupportedHardfork","changed","hardforkChanges_1","hardforks","hfChanges","_chooseHardfork","onlySupported","_getHardfork","hfs","hfs_1","hf","chainName","_a","supportedHf","topic","name","hardforkChanges_2","v","paramByBlock","blockNumber","activeHfs","activeHardforks","hardforkIsActiveOnBlock","opts","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","onlyActive","posHf1","posHf2","index","hardforks_2","gteHardfork","hardforkIsActiveOnChain","hfs_2","push","activeHardfork","isHardforkBlock","consensus","finality","genesis","bootstrapNodes","chainId","networkId","default"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-common/dist/index.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar chains_1 = require(\"./chains\");\r\nvar hardforks_1 = require(\"./hardforks\");\r\n/**\r\n * Common class to access chain and hardfork parameters\r\n */\r\nvar Common = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param chain String ('mainnet') or Number (1) chain\r\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n     */\r\n    function Common(chain, hardfork, supportedHardforks) {\r\n        this._chainParams = this.setChain(chain);\r\n        this._hardfork = null;\r\n        this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\r\n        if (hardfork) {\r\n            this.setHardfork(hardfork);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\r\n     * params from [[baseChain]] except the ones overridden in [[customChainParams]].\r\n     *\r\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\r\n     * chain params on.\r\n     * @param customChainParams The custom parameters of the chain.\r\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\r\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\r\n     */\r\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\r\n        var standardChainParams = Common._getChainParams(baseChain);\r\n        return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\r\n    };\r\n    Common._getChainParams = function (chain) {\r\n        if (typeof chain === 'number') {\r\n            if (chains_1.chains['names'][chain]) {\r\n                return chains_1.chains[chains_1.chains['names'][chain]];\r\n            }\r\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\r\n        }\r\n        if (chains_1.chains[chain]) {\r\n            return chains_1.chains[chain];\r\n        }\r\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\r\n    };\r\n    /**\r\n     * Sets the chain\r\n     * @param chain String ('mainnet') or Number (1) chain\r\n     *     representation. Or, a Dictionary of chain parameters for a private network.\r\n     * @returns The dictionary with parameters set as chain\r\n     */\r\n    Common.prototype.setChain = function (chain) {\r\n        if (typeof chain === 'number' || typeof chain === 'string') {\r\n            this._chainParams = Common._getChainParams(chain);\r\n        }\r\n        else if (typeof chain === 'object') {\r\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\r\n            for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\r\n                var param = required_1[_i];\r\n                if (chain[param] === undefined) {\r\n                    throw new Error(\"Missing required chain parameter: \" + param);\r\n                }\r\n            }\r\n            this._chainParams = chain;\r\n        }\r\n        else {\r\n            throw new Error('Wrong input format');\r\n        }\r\n        return this._chainParams;\r\n    };\r\n    /**\r\n     * Sets the hardfork to get params for\r\n     * @param hardfork String identifier ('byzantium')\r\n     */\r\n    Common.prototype.setHardfork = function (hardfork) {\r\n        if (!this._isSupportedHardfork(hardfork)) {\r\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\r\n        }\r\n        var changed = false;\r\n        for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\r\n            var hfChanges = hardforkChanges_1[_i];\r\n            if (hfChanges[0] === hardfork) {\r\n                this._hardfork = hardfork;\r\n                changed = true;\r\n            }\r\n        }\r\n        if (!changed) {\r\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\r\n        }\r\n    };\r\n    /**\r\n     * Internal helper function to choose between hardfork set and hardfork provided as param\r\n     * @param hardfork Hardfork given to function as a parameter\r\n     * @returns Hardfork chosen to be used\r\n     */\r\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\r\n        onlySupported = onlySupported === undefined ? true : onlySupported;\r\n        if (!hardfork) {\r\n            if (!this._hardfork) {\r\n                throw new Error('Method called with neither a hardfork set nor provided by param');\r\n            }\r\n            else {\r\n                hardfork = this._hardfork;\r\n            }\r\n        }\r\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\r\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\r\n        }\r\n        return hardfork;\r\n    };\r\n    /**\r\n     * Internal helper function, returns the params for the given hardfork for the chain set\r\n     * @param hardfork Hardfork name\r\n     * @returns Dictionary with hardfork params\r\n     */\r\n    Common.prototype._getHardfork = function (hardfork) {\r\n        var hfs = this.hardforks();\r\n        for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\r\n            var hf = hfs_1[_i];\r\n            if (hf['name'] === hardfork)\r\n                return hf;\r\n        }\r\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\r\n    };\r\n    /**\r\n     * Internal helper function to check if a hardfork is set to be supported by the library\r\n     * @param hardfork Hardfork name\r\n     * @returns True if hardfork is supported\r\n     */\r\n    Common.prototype._isSupportedHardfork = function (hardfork) {\r\n        if (this._supportedHardforks.length > 0) {\r\n            for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\r\n                var supportedHf = _a[_i];\r\n                if (hardfork === supportedHf)\r\n                    return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Returns the parameter corresponding to a hardfork\r\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\r\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\r\n     * @param hardfork Hardfork name, optional if hardfork set\r\n     */\r\n    Common.prototype.param = function (topic, name, hardfork) {\r\n        hardfork = this._chooseHardfork(hardfork);\r\n        var value;\r\n        for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\r\n            var hfChanges = hardforkChanges_2[_i];\r\n            if (!hfChanges[1][topic]) {\r\n                throw new Error(\"Topic \" + topic + \" not defined\");\r\n            }\r\n            if (hfChanges[1][topic][name] !== undefined) {\r\n                value = hfChanges[1][topic][name].v;\r\n            }\r\n            if (hfChanges[0] === hardfork)\r\n                break;\r\n        }\r\n        if (value === undefined) {\r\n            throw new Error(topic + \" value for \" + name + \" not found\");\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns a parameter for the hardfork active on block number\r\n     * @param topic Parameter topic\r\n     * @param name Parameter name\r\n     * @param blockNumber Block number\r\n     */\r\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\r\n        var activeHfs = this.activeHardforks(blockNumber);\r\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\r\n        return this.param(topic, name, hardfork);\r\n    };\r\n    /**\r\n     * Checks if set or provided hardfork is active on block number\r\n     * @param hardfork Hardfork name or null (for HF set)\r\n     * @param blockNumber\r\n     * @param opts Hardfork options (onlyActive unused)\r\n     * @returns True if HF is active on block number\r\n     */\r\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\r\n        opts = opts !== undefined ? opts : {};\r\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\r\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\r\n        var hfBlock = this.hardforkBlock(hardfork);\r\n        if (hfBlock !== null && blockNumber >= hfBlock)\r\n            return true;\r\n        return false;\r\n    };\r\n    /**\r\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\r\n     * @param blockNumber\r\n     * @param opts Hardfork options (onlyActive unused)\r\n     * @returns True if HF is active on block number\r\n     */\r\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\r\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\r\n    };\r\n    /**\r\n     * Sequence based check if given or set HF1 is greater than or equal HF2\r\n     * @param hardfork1 Hardfork name or null (if set)\r\n     * @param hardfork2 Hardfork name\r\n     * @param opts Hardfork options\r\n     * @returns True if HF1 gte HF2\r\n     */\r\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\r\n        opts = opts !== undefined ? opts : {};\r\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\r\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\r\n        var hardforks;\r\n        if (onlyActive) {\r\n            hardforks = this.activeHardforks(null, opts);\r\n        }\r\n        else {\r\n            hardforks = this.hardforks();\r\n        }\r\n        var posHf1 = -1, posHf2 = -1;\r\n        var index = 0;\r\n        for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\r\n            var hf = hardforks_2[_i];\r\n            if (hf['name'] === hardfork1)\r\n                posHf1 = index;\r\n            if (hf['name'] === hardfork2)\r\n                posHf2 = index;\r\n            index += 1;\r\n        }\r\n        return posHf1 >= posHf2;\r\n    };\r\n    /**\r\n     * Alias to hardforkGteHardfork when hardfork is set\r\n     * @param hardfork Hardfork name\r\n     * @param opts Hardfork options\r\n     * @returns True if hardfork set is greater than hardfork provided\r\n     */\r\n    Common.prototype.gteHardfork = function (hardfork, opts) {\r\n        return this.hardforkGteHardfork(null, hardfork, opts);\r\n    };\r\n    /**\r\n     * Checks if given or set hardfork is active on the chain\r\n     * @param hardfork Hardfork name, optional if HF set\r\n     * @param opts Hardfork options (onlyActive unused)\r\n     * @returns True if hardfork is active on the chain\r\n     */\r\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\r\n        opts = opts !== undefined ? opts : {};\r\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\r\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\r\n        for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\r\n            var hf = _a[_i];\r\n            if (hf['name'] === hardfork && hf['block'] !== null)\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Returns the active hardfork switches for the current chain\r\n     * @param blockNumber up to block if provided, otherwise for the whole chain\r\n     * @param opts Hardfork options (onlyActive unused)\r\n     * @return Array with hardfork arrays\r\n     */\r\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\r\n        opts = opts !== undefined ? opts : {};\r\n        var activeHardforks = [];\r\n        var hfs = this.hardforks();\r\n        for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\r\n            var hf = hfs_2[_i];\r\n            if (hf['block'] === null)\r\n                continue;\r\n            if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\r\n                break;\r\n            if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\r\n                continue;\r\n            activeHardforks.push(hf);\r\n        }\r\n        return activeHardforks;\r\n    };\r\n    /**\r\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\r\n     * @param blockNumber up to block if provided, otherwise for the whole chain\r\n     * @param opts Hardfork options (onlyActive unused)\r\n     * @return Hardfork name\r\n     */\r\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\r\n        opts = opts !== undefined ? opts : {};\r\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\r\n        if (activeHardforks.length > 0) {\r\n            return activeHardforks[activeHardforks.length - 1]['name'];\r\n        }\r\n        else {\r\n            throw new Error(\"No (supported) active hardfork found\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns the hardfork change block for hardfork provided or set\r\n     * @param hardfork Hardfork name, optional if HF set\r\n     * @returns Block number\r\n     */\r\n    Common.prototype.hardforkBlock = function (hardfork) {\r\n        hardfork = this._chooseHardfork(hardfork, false);\r\n        return this._getHardfork(hardfork)['block'];\r\n    };\r\n    /**\r\n     * True if block number provided is the hardfork (given or set) change block of the current chain\r\n     * @param blockNumber Number of the block to check\r\n     * @param hardfork Hardfork name, optional if HF set\r\n     * @returns True if blockNumber is HF block\r\n     */\r\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\r\n        hardfork = this._chooseHardfork(hardfork, false);\r\n        if (this.hardforkBlock(hardfork) === blockNumber) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Provide the consensus type for the hardfork set or provided as param\r\n     * @param hardfork Hardfork name, optional if hardfork set\r\n     * @returns Consensus type (e.g. 'pow', 'poa')\r\n     */\r\n    Common.prototype.consensus = function (hardfork) {\r\n        hardfork = this._chooseHardfork(hardfork);\r\n        return this._getHardfork(hardfork)['consensus'];\r\n    };\r\n    /**\r\n     * Provide the finality type for the hardfork set or provided as param\r\n     * @param {String} hardfork Hardfork name, optional if hardfork set\r\n     * @returns {String} Finality type (e.g. 'pos', null of no finality)\r\n     */\r\n    Common.prototype.finality = function (hardfork) {\r\n        hardfork = this._chooseHardfork(hardfork);\r\n        return this._getHardfork(hardfork)['finality'];\r\n    };\r\n    /**\r\n     * Returns the Genesis parameters of current chain\r\n     * @returns Genesis dictionary\r\n     */\r\n    Common.prototype.genesis = function () {\r\n        return this._chainParams['genesis'];\r\n    };\r\n    /**\r\n     * Returns the hardforks for current chain\r\n     * @returns {Array} Array with arrays of hardforks\r\n     */\r\n    Common.prototype.hardforks = function () {\r\n        return this._chainParams['hardforks'];\r\n    };\r\n    /**\r\n     * Returns bootstrap nodes for the current chain\r\n     * @returns {Dictionary} Dict with bootstrap nodes\r\n     */\r\n    Common.prototype.bootstrapNodes = function () {\r\n        return this._chainParams['bootstrapNodes'];\r\n    };\r\n    /**\r\n     * Returns the hardfork set\r\n     * @returns Hardfork name\r\n     */\r\n    Common.prototype.hardfork = function () {\r\n        return this._hardfork;\r\n    };\r\n    /**\r\n     * Returns the Id of current chain\r\n     * @returns chain Id\r\n     */\r\n    Common.prototype.chainId = function () {\r\n        return this._chainParams['chainId'];\r\n    };\r\n    /**\r\n     * Returns the name of current chain\r\n     * @returns chain name (lower case)\r\n     */\r\n    Common.prototype.chainName = function () {\r\n        return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\r\n    };\r\n    /**\r\n     * Returns the Id of current network\r\n     * @returns network Id\r\n     */\r\n    Common.prototype.networkId = function () {\r\n        return this._chainParams['networkId'];\r\n    };\r\n    return Common;\r\n}());\r\nexports.default = Common;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}