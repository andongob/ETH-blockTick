{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nvar externals_1 = require(\"./externals\");\nvar internal_1 = require(\"./internal\");\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\nvar intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n  return \"0x\".concat(i.toString(16));\n};\nexports.intToHex = intToHex;\n/**\r\n * Converts an `Number` to a `Buffer`\r\n * @param {Number} i\r\n * @return {Buffer}\r\n */\nvar intToBuffer = function (i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\nvar zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\r\n * Pads a `Buffer` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer)\r\n */\nvar setLength = function (msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\r\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\nvar setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\r\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\r\n * it truncates the end if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\nvar setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\r\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\nvar stripZeros = function (a) {\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\r\n * Trims leading zeros from a `Buffer`.\r\n * @param a (Buffer)\r\n * @return (Buffer)\r\n */\nvar unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\r\n * Trims leading zeros from an `Array` (of numbers).\r\n * @param a (number[])\r\n * @return (number[])\r\n */\nvar unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\r\n * Trims leading zeros from a hex-prefixed `String`.\r\n * @param a (String)\r\n * @return (String)\r\n */\nvar unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\r\n * Attempts to turn a value into a `Buffer`.\r\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\r\n * with a `toArray()` or `toBuffer()` method.\r\n * @param v the value\r\n */\nvar toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (externals_1.BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\n    }\n    return v.toArrayLike(Buffer);\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\nvar bufferToInt = function (buf) {\n  return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\n};\nexports.bufferToInt = bufferToInt;\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\nvar bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\nvar fromSigned = function (num) {\n  return new externals_1.BN(num).fromTwos(256);\n};\nexports.fromSigned = fromSigned;\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\nvar toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\nexports.toUnsigned = toUnsigned;\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\nvar addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\r\n * Returns the utf8 string representation from a hex string.\r\n *\r\n * Examples:\r\n *\r\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\r\n * Input 2: '657468657265756d'\r\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\r\n *\r\n * Output (all 3 input variants): 'ethereum'\r\n *\r\n * Note that this method is not intended to be used with hex strings\r\n * representing quantities in both big endian or little endian notation.\r\n *\r\n * @param string Hex string, should be `0x` prefixed\r\n * @return Utf8 string\r\n */\nvar toUtf8 = function (hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\nvar baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\r\n * Checks provided Buffers for leading zeroes and throws if found.\r\n *\r\n * Examples:\r\n *\r\n * Valid values: 0x1, 0x, 0x01, 0x1234\r\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\r\n *\r\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\r\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\r\n * @param values An object containing string keys and Buffer values\r\n * @throws if any provided value is found to have leading zero bytes\r\n */\nvar validateNoLeadingZeroes = function (values) {\n  var e_1, _a;\n  try {\n    for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        k = _d[0],\n        v = _d[1];\n      if (v !== undefined && v.length > 0 && v[0] === 0) {\n        throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(function (a) {\n    return arrToBufArr(a);\n  });\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n  return arr.map(function (a) {\n    return bufArrToArr(a);\n  });\n}\nexports.bufArrToArr = bufArrToArr;","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","ar","e","push","error","Object","defineProperty","exports","bufArrToArr","arrToBufArr","validateNoLeadingZeroes","baToJSON","toUtf8","addHexPrefix","toUnsigned","fromSigned","bufferToHex","bufferToInt","toBuffer","unpadHexString","unpadArray","unpadBuffer","setLengthRight","setLengthLeft","zeros","intToBuffer","intToHex","externals_1","require","internal_1","helpers_1","Number","isSafeInteger","Error","concat","toString","hex","Buffer","from","padToEven","slice","bytes","allocUnsafe","fill","setLength","msg","right","buf","copy","assertIsBuffer","stripZeros","a","first","assertIsArray","assertIsHexString","stripHexPrefix","v","undefined","isBuffer","Array","isArray","Uint8Array","isHexString","BN","isBN","isNeg","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","zerosRegexp","bufferVal","replace","ba","array","values","e_1","_a","_b","entries","_c","_d","k","e_1_1","return","arr","map"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-util/dist.browser/bytes.js"],"sourcesContent":["\"use strict\";\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\r\nvar externals_1 = require(\"./externals\");\r\nvar internal_1 = require(\"./internal\");\r\nvar helpers_1 = require(\"./helpers\");\r\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\r\nvar intToHex = function (i) {\r\n    if (!Number.isSafeInteger(i) || i < 0) {\r\n        throw new Error(\"Received an invalid integer type: \".concat(i));\r\n    }\r\n    return \"0x\".concat(i.toString(16));\r\n};\r\nexports.intToHex = intToHex;\r\n/**\r\n * Converts an `Number` to a `Buffer`\r\n * @param {Number} i\r\n * @return {Buffer}\r\n */\r\nvar intToBuffer = function (i) {\r\n    var hex = (0, exports.intToHex)(i);\r\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\r\n};\r\nexports.intToBuffer = intToBuffer;\r\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\r\nvar zeros = function (bytes) {\r\n    return Buffer.allocUnsafe(bytes).fill(0);\r\n};\r\nexports.zeros = zeros;\r\n/**\r\n * Pads a `Buffer` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer)\r\n */\r\nvar setLength = function (msg, length, right) {\r\n    var buf = (0, exports.zeros)(length);\r\n    if (right) {\r\n        if (msg.length < length) {\r\n            msg.copy(buf);\r\n            return buf;\r\n        }\r\n        return msg.slice(0, length);\r\n    }\r\n    else {\r\n        if (msg.length < length) {\r\n            msg.copy(buf, length - msg.length);\r\n            return buf;\r\n        }\r\n        return msg.slice(-length);\r\n    }\r\n};\r\n/**\r\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\r\nvar setLengthLeft = function (msg, length) {\r\n    (0, helpers_1.assertIsBuffer)(msg);\r\n    return setLength(msg, length, false);\r\n};\r\nexports.setLengthLeft = setLengthLeft;\r\n/**\r\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\r\n * it truncates the end if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\r\nvar setLengthRight = function (msg, length) {\r\n    (0, helpers_1.assertIsBuffer)(msg);\r\n    return setLength(msg, length, true);\r\n};\r\nexports.setLengthRight = setLengthRight;\r\n/**\r\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\r\nvar stripZeros = function (a) {\r\n    var first = a[0];\r\n    while (a.length > 0 && first.toString() === '0') {\r\n        a = a.slice(1);\r\n        first = a[0];\r\n    }\r\n    return a;\r\n};\r\n/**\r\n * Trims leading zeros from a `Buffer`.\r\n * @param a (Buffer)\r\n * @return (Buffer)\r\n */\r\nvar unpadBuffer = function (a) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadBuffer = unpadBuffer;\r\n/**\r\n * Trims leading zeros from an `Array` (of numbers).\r\n * @param a (number[])\r\n * @return (number[])\r\n */\r\nvar unpadArray = function (a) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadArray = unpadArray;\r\n/**\r\n * Trims leading zeros from a hex-prefixed `String`.\r\n * @param a (String)\r\n * @return (String)\r\n */\r\nvar unpadHexString = function (a) {\r\n    (0, helpers_1.assertIsHexString)(a);\r\n    a = (0, internal_1.stripHexPrefix)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadHexString = unpadHexString;\r\n/**\r\n * Attempts to turn a value into a `Buffer`.\r\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\r\n * with a `toArray()` or `toBuffer()` method.\r\n * @param v the value\r\n */\r\nvar toBuffer = function (v) {\r\n    if (v === null || v === undefined) {\r\n        return Buffer.allocUnsafe(0);\r\n    }\r\n    if (Buffer.isBuffer(v)) {\r\n        return Buffer.from(v);\r\n    }\r\n    if (Array.isArray(v) || v instanceof Uint8Array) {\r\n        return Buffer.from(v);\r\n    }\r\n    if (typeof v === 'string') {\r\n        if (!(0, internal_1.isHexString)(v)) {\r\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\r\n        }\r\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\r\n    }\r\n    if (typeof v === 'number') {\r\n        return (0, exports.intToBuffer)(v);\r\n    }\r\n    if (externals_1.BN.isBN(v)) {\r\n        if (v.isNeg()) {\r\n            throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\r\n        }\r\n        return v.toArrayLike(Buffer);\r\n    }\r\n    if (v.toArray) {\r\n        // converts a BN to a Buffer\r\n        return Buffer.from(v.toArray());\r\n    }\r\n    if (v.toBuffer) {\r\n        return Buffer.from(v.toBuffer());\r\n    }\r\n    throw new Error('invalid type');\r\n};\r\nexports.toBuffer = toBuffer;\r\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\r\nvar bufferToInt = function (buf) {\r\n    return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\r\n};\r\nexports.bufferToInt = bufferToInt;\r\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\r\nvar bufferToHex = function (buf) {\r\n    buf = (0, exports.toBuffer)(buf);\r\n    return '0x' + buf.toString('hex');\r\n};\r\nexports.bufferToHex = bufferToHex;\r\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\r\nvar fromSigned = function (num) {\r\n    return new externals_1.BN(num).fromTwos(256);\r\n};\r\nexports.fromSigned = fromSigned;\r\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\r\nvar toUnsigned = function (num) {\r\n    return Buffer.from(num.toTwos(256).toArray());\r\n};\r\nexports.toUnsigned = toUnsigned;\r\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\r\nvar addHexPrefix = function (str) {\r\n    if (typeof str !== 'string') {\r\n        return str;\r\n    }\r\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\r\n};\r\nexports.addHexPrefix = addHexPrefix;\r\n/**\r\n * Returns the utf8 string representation from a hex string.\r\n *\r\n * Examples:\r\n *\r\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\r\n * Input 2: '657468657265756d'\r\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\r\n *\r\n * Output (all 3 input variants): 'ethereum'\r\n *\r\n * Note that this method is not intended to be used with hex strings\r\n * representing quantities in both big endian or little endian notation.\r\n *\r\n * @param string Hex string, should be `0x` prefixed\r\n * @return Utf8 string\r\n */\r\nvar toUtf8 = function (hex) {\r\n    var zerosRegexp = /^(00)+|(00)+$/g;\r\n    hex = (0, internal_1.stripHexPrefix)(hex);\r\n    if (hex.length % 2 !== 0) {\r\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\r\n    }\r\n    var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\r\n    return bufferVal.toString('utf8');\r\n};\r\nexports.toUtf8 = toUtf8;\r\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\r\nvar baToJSON = function (ba) {\r\n    if (Buffer.isBuffer(ba)) {\r\n        return \"0x\".concat(ba.toString('hex'));\r\n    }\r\n    else if (ba instanceof Array) {\r\n        var array = [];\r\n        for (var i = 0; i < ba.length; i++) {\r\n            array.push((0, exports.baToJSON)(ba[i]));\r\n        }\r\n        return array;\r\n    }\r\n};\r\nexports.baToJSON = baToJSON;\r\n/**\r\n * Checks provided Buffers for leading zeroes and throws if found.\r\n *\r\n * Examples:\r\n *\r\n * Valid values: 0x1, 0x, 0x01, 0x1234\r\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\r\n *\r\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\r\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\r\n * @param values An object containing string keys and Buffer values\r\n * @throws if any provided value is found to have leading zero bytes\r\n */\r\nvar validateNoLeadingZeroes = function (values) {\r\n    var e_1, _a;\r\n    try {\r\n        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\r\n            if (v !== undefined && v.length > 0 && v[0] === 0) {\r\n                throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n};\r\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\r\nfunction arrToBufArr(arr) {\r\n    if (!Array.isArray(arr)) {\r\n        return Buffer.from(arr);\r\n    }\r\n    return arr.map(function (a) { return arrToBufArr(a); });\r\n}\r\nexports.arrToBufArr = arrToBufArr;\r\nfunction bufArrToArr(arr) {\r\n    if (!Array.isArray(arr)) {\r\n        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\r\n    }\r\n    return arr.map(function (a) { return bufArrToArr(a); });\r\n}\r\nexports.bufArrToArr = bufArrToArr;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}