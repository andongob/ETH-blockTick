{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nvar assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nvar assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nvar assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nvar assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsString = assertIsString;","map":{"version":3,"names":["Object","defineProperty","exports","value","assertIsString","assertIsArray","assertIsBuffer","assertIsHexString","internal_1","require","input","isHexString","msg","concat","Error","Buffer","isBuffer","Array","isArray"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/ethereumjs-util/dist.browser/helpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nvar assertIsHexString = function (input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nvar assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        var msg = \"This method only supports Buffer but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nvar assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        var msg = \"This method only supports number arrays but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nvar assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        var msg = \"This method only supports strings but input was: \".concat(input);\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,aAAa,GAAGH,OAAO,CAACI,cAAc,GAAGJ,OAAO,CAACK,iBAAiB,GAAG,KAAK,CAAC;AAC5G,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC;AACA;AACA;AACA;AACA,IAAIF,iBAAiB,GAAG,UAAUG,KAAK,EAAE;EACrC,IAAI,CAAC,CAAC,CAAC,EAAEF,UAAU,CAACG,WAAW,EAAED,KAAK,CAAC,EAAE;IACrC,IAAIE,GAAG,GAAG,mEAAmE,CAACC,MAAM,CAACH,KAAK,CAAC;IAC3F,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AACDV,OAAO,CAACK,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA;AACA;AACA;AACA,IAAID,cAAc,GAAG,UAAUI,KAAK,EAAE;EAClC,IAAI,CAACK,MAAM,CAACC,QAAQ,CAACN,KAAK,CAAC,EAAE;IACzB,IAAIE,GAAG,GAAG,kDAAkD,CAACC,MAAM,CAACH,KAAK,CAAC;IAC1E,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AACDV,OAAO,CAACI,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA;AACA,IAAID,aAAa,GAAG,UAAUK,KAAK,EAAE;EACjC,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,EAAE;IACvB,IAAIE,GAAG,GAAG,yDAAyD,CAACC,MAAM,CAACH,KAAK,CAAC;IACjF,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AACDV,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA,IAAID,cAAc,GAAG,UAAUM,KAAK,EAAE;EAClC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIE,GAAG,GAAG,mDAAmD,CAACC,MAAM,CAACH,KAAK,CAAC;IAC3E,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;EACxB;AACJ,CAAC;AACDV,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}