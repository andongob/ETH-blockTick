{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This function takes in a data, convert it to buffer if not, and a length for recursion\r\n * @param input - will be converted to buffer\r\n * @returns returns buffer of encoded data\r\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\nexports.encode = encode;\n/**\r\n * Parse integers. Check if there is no leading zeros\r\n * @param v The value to parse\r\n * @param base The base to parse the integer into\r\n */\nfunction safeParseInt(v, base) {\n  if (v[0] === '0' && v[1] === '0') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n  return decoded.data;\n}\nexports.decode = decode;\n/**\r\n * Get the length of the RLP input\r\n * @param input\r\n * @returns The length of the input or an empty Buffer if no input\r\n */\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length_1;\n  }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (bn_js_1.default.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getLength","decode","encode","bn_js_1","require","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","safeParseInt","v","base","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","stream","inputBuffer","decoded","_decode","remainder","data","llength","length_1","slice","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","integer","hex","padToEven","a","intToBuffer","isBuffer","undefined","Uint8Array","default","isBN","toArray"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/rlp/dist.browser/index.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getLength = exports.decode = exports.encode = void 0;\r\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\r\n/**\r\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\r\n * This function takes in a data, convert it to buffer if not, and a length for recursion\r\n * @param input - will be converted to buffer\r\n * @returns returns buffer of encoded data\r\n **/\r\nfunction encode(input) {\r\n    if (Array.isArray(input)) {\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            output.push(encode(input[i]));\r\n        }\r\n        var buf = Buffer.concat(output);\r\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\r\n    }\r\n    else {\r\n        var inputBuf = toBuffer(input);\r\n        return inputBuf.length === 1 && inputBuf[0] < 128\r\n            ? inputBuf\r\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\r\n    }\r\n}\r\nexports.encode = encode;\r\n/**\r\n * Parse integers. Check if there is no leading zeros\r\n * @param v The value to parse\r\n * @param base The base to parse the integer into\r\n */\r\nfunction safeParseInt(v, base) {\r\n    if (v[0] === '0' && v[1] === '0') {\r\n        throw new Error('invalid RLP: extra zeros');\r\n    }\r\n    return parseInt(v, base);\r\n}\r\nfunction encodeLength(len, offset) {\r\n    if (len < 56) {\r\n        return Buffer.from([len + offset]);\r\n    }\r\n    else {\r\n        var hexLength = intToHex(len);\r\n        var lLength = hexLength.length / 2;\r\n        var firstByte = intToHex(offset + 55 + lLength);\r\n        return Buffer.from(firstByte + hexLength, 'hex');\r\n    }\r\n}\r\nfunction decode(input, stream) {\r\n    if (stream === void 0) { stream = false; }\r\n    if (!input || input.length === 0) {\r\n        return Buffer.from([]);\r\n    }\r\n    var inputBuffer = toBuffer(input);\r\n    var decoded = _decode(inputBuffer);\r\n    if (stream) {\r\n        return decoded;\r\n    }\r\n    if (decoded.remainder.length !== 0) {\r\n        throw new Error('invalid remainder');\r\n    }\r\n    return decoded.data;\r\n}\r\nexports.decode = decode;\r\n/**\r\n * Get the length of the RLP input\r\n * @param input\r\n * @returns The length of the input or an empty Buffer if no input\r\n */\r\nfunction getLength(input) {\r\n    if (!input || input.length === 0) {\r\n        return Buffer.from([]);\r\n    }\r\n    var inputBuffer = toBuffer(input);\r\n    var firstByte = inputBuffer[0];\r\n    if (firstByte <= 0x7f) {\r\n        return inputBuffer.length;\r\n    }\r\n    else if (firstByte <= 0xb7) {\r\n        return firstByte - 0x7f;\r\n    }\r\n    else if (firstByte <= 0xbf) {\r\n        return firstByte - 0xb6;\r\n    }\r\n    else if (firstByte <= 0xf7) {\r\n        // a list between  0-55 bytes long\r\n        return firstByte - 0xbf;\r\n    }\r\n    else {\r\n        // a list  over 55 bytes long\r\n        var llength = firstByte - 0xf6;\r\n        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\r\n        return llength + length_1;\r\n    }\r\n}\r\nexports.getLength = getLength;\r\n/** Decode an input with RLP */\r\nfunction _decode(input) {\r\n    var length, llength, data, innerRemainder, d;\r\n    var decoded = [];\r\n    var firstByte = input[0];\r\n    if (firstByte <= 0x7f) {\r\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\r\n        return {\r\n            data: input.slice(0, 1),\r\n            remainder: input.slice(1),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xb7) {\r\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\r\n        // The range of the first byte is [0x80, 0xb7]\r\n        length = firstByte - 0x7f;\r\n        // set 0x80 null to 0\r\n        if (firstByte === 0x80) {\r\n            data = Buffer.from([]);\r\n        }\r\n        else {\r\n            data = input.slice(1, length);\r\n        }\r\n        if (length === 2 && data[0] < 0x80) {\r\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\r\n        }\r\n        return {\r\n            data: data,\r\n            remainder: input.slice(length),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xbf) {\r\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\r\n        // followed by the length, followed by the string\r\n        llength = firstByte - 0xb6;\r\n        if (input.length - 1 < llength) {\r\n            throw new Error('invalid RLP: not enough bytes for string length');\r\n        }\r\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\r\n        if (length <= 55) {\r\n            throw new Error('invalid RLP: expected string length to be greater than 55');\r\n        }\r\n        data = input.slice(llength, length + llength);\r\n        if (data.length < length) {\r\n            throw new Error('invalid RLP: not enough bytes for string');\r\n        }\r\n        return {\r\n            data: data,\r\n            remainder: input.slice(length + llength),\r\n        };\r\n    }\r\n    else if (firstByte <= 0xf7) {\r\n        // a list between  0-55 bytes long\r\n        length = firstByte - 0xbf;\r\n        innerRemainder = input.slice(1, length);\r\n        while (innerRemainder.length) {\r\n            d = _decode(innerRemainder);\r\n            decoded.push(d.data);\r\n            innerRemainder = d.remainder;\r\n        }\r\n        return {\r\n            data: decoded,\r\n            remainder: input.slice(length),\r\n        };\r\n    }\r\n    else {\r\n        // a list  over 55 bytes long\r\n        llength = firstByte - 0xf6;\r\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\r\n        var totalLength = llength + length;\r\n        if (totalLength > input.length) {\r\n            throw new Error('invalid rlp: total length is larger than the data');\r\n        }\r\n        innerRemainder = input.slice(llength, totalLength);\r\n        if (innerRemainder.length === 0) {\r\n            throw new Error('invalid rlp, List has a invalid length');\r\n        }\r\n        while (innerRemainder.length) {\r\n            d = _decode(innerRemainder);\r\n            decoded.push(d.data);\r\n            innerRemainder = d.remainder;\r\n        }\r\n        return {\r\n            data: decoded,\r\n            remainder: input.slice(totalLength),\r\n        };\r\n    }\r\n}\r\n/** Check if a string is prefixed by 0x */\r\nfunction isHexPrefixed(str) {\r\n    return str.slice(0, 2) === '0x';\r\n}\r\n/** Removes 0x from a given String */\r\nfunction stripHexPrefix(str) {\r\n    if (typeof str !== 'string') {\r\n        return str;\r\n    }\r\n    return isHexPrefixed(str) ? str.slice(2) : str;\r\n}\r\n/** Transform an integer into its hexadecimal value */\r\nfunction intToHex(integer) {\r\n    if (integer < 0) {\r\n        throw new Error('Invalid integer as argument, must be unsigned!');\r\n    }\r\n    var hex = integer.toString(16);\r\n    return hex.length % 2 ? \"0\" + hex : hex;\r\n}\r\n/** Pad a string to be even */\r\nfunction padToEven(a) {\r\n    return a.length % 2 ? \"0\" + a : a;\r\n}\r\n/** Transform an integer into a Buffer */\r\nfunction intToBuffer(integer) {\r\n    var hex = intToHex(integer);\r\n    return Buffer.from(hex, 'hex');\r\n}\r\n/** Transform anything into a Buffer */\r\nfunction toBuffer(v) {\r\n    if (!Buffer.isBuffer(v)) {\r\n        if (typeof v === 'string') {\r\n            if (isHexPrefixed(v)) {\r\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\r\n            }\r\n            else {\r\n                return Buffer.from(v);\r\n            }\r\n        }\r\n        else if (typeof v === 'number' || typeof v === 'bigint') {\r\n            if (!v) {\r\n                return Buffer.from([]);\r\n            }\r\n            else {\r\n                return intToBuffer(v);\r\n            }\r\n        }\r\n        else if (v === null || v === undefined) {\r\n            return Buffer.from([]);\r\n        }\r\n        else if (v instanceof Uint8Array) {\r\n            return Buffer.from(v);\r\n        }\r\n        else if (bn_js_1.default.isBN(v)) {\r\n            // converts a BN to a Buffer\r\n            return Buffer.from(v.toArray());\r\n        }\r\n        else {\r\n            throw new Error('invalid type');\r\n        }\r\n    }\r\n    return v;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}