{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar Address = require('./address');\nvar Base58Check = require('./encoding/base58check');\nvar BN = require('./crypto/bn');\nvar JSUtil = require('./util/js');\nvar Networks = require('./networks');\nvar Point = require('./crypto/point');\nvar PublicKey = require('./publickey');\nvar Random = require('./crypto/random');\nvar $ = require('./util/preconditions');\n\n/**\r\n * Instantiate a PrivateKey from a BN, Buffer and WIF.\r\n *\r\n * @example\r\n * ```javascript\r\n * // generate a new random key\r\n * var key = PrivateKey();\r\n *\r\n * // get the associated address\r\n * var address = key.toAddress();\r\n *\r\n * // encode into wallet export format\r\n * var exported = key.toWIF();\r\n *\r\n * // instantiate from the exported (and saved) private key\r\n * var imported = PrivateKey.fromWIF(exported);\r\n * ```\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {PrivateKey} A new valid instance of an PrivateKey\r\n * @constructor\r\n */\nfunction PrivateKey(data, network) {\n  /* jshint maxstatements: 20 */\n  /* jshint maxcomplexity: 8 */\n\n  if (!(this instanceof PrivateKey)) {\n    return new PrivateKey(data, network);\n  }\n  if (data instanceof PrivateKey) {\n    return data;\n  }\n  var info = this._classifyArguments(data, network);\n\n  // validation\n  if (!info.bn || info.bn.cmp(new BN(0)) === 0) {\n    throw new TypeError('Number can not be equal to zero, undefined, null or false');\n  }\n  if (!info.bn.lt(Point.getN())) {\n    throw new TypeError('Number must be less than N');\n  }\n  if (typeof info.network === 'undefined') {\n    throw new TypeError('Must specify the network (\"livenet\" or \"testnet\")');\n  }\n  JSUtil.defineImmutable(this, {\n    bn: info.bn,\n    compressed: info.compressed,\n    network: info.network\n  });\n  Object.defineProperty(this, 'publicKey', {\n    configurable: false,\n    enumerable: true,\n    get: this.toPublicKey.bind(this)\n  });\n  return this;\n}\n;\n\n/**\r\n * Internal helper to instantiate PrivateKey internal `info` object from\r\n * different kinds of arguments passed to the constructor.\r\n *\r\n * @param {*} data\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @return {Object}\r\n */\nPrivateKey.prototype._classifyArguments = function (data, network) {\n  /* jshint maxcomplexity: 10 */\n  var info = {\n    compressed: true,\n    network: network ? Networks.get(network) : Networks.defaultNetwork\n  };\n\n  // detect type of data\n  if (_.isUndefined(data) || _.isNull(data)) {\n    info.bn = PrivateKey._getRandomBN();\n  } else if (data instanceof BN) {\n    info.bn = data;\n  } else if (data instanceof Buffer || data instanceof Uint8Array) {\n    info = PrivateKey._transformBuffer(data, network);\n  } else if (data.bn && data.network) {\n    info = PrivateKey._transformObject(data);\n  } else if (!network && Networks.get(data)) {\n    info.bn = PrivateKey._getRandomBN();\n    info.network = Networks.get(data);\n  } else if (typeof data === 'string') {\n    if (JSUtil.isHexa(data)) {\n      info.bn = new BN(Buffer.from(data, 'hex'));\n    } else {\n      info = PrivateKey._transformWIF(data, network);\n    }\n  } else {\n    throw new TypeError('First argument is an unrecognized data type.');\n  }\n  return info;\n};\n\n/**\r\n * Internal function to get a random Big Number (BN)\r\n *\r\n * @returns {BN} A new randomly generated BN\r\n * @private\r\n */\nPrivateKey._getRandomBN = function () {\n  var condition;\n  var bn;\n  do {\n    var privbuf = Random.getRandomBuffer(32);\n    bn = BN.fromBuffer(privbuf);\n    condition = bn.lt(Point.getN());\n  } while (!condition);\n  return bn;\n};\n\n/**\r\n * Internal function to transform a WIF Buffer into a private key\r\n *\r\n * @param {Buffer} buf - An WIF string\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\nPrivateKey._transformBuffer = function (buf, network) {\n  var info = {};\n  if (buf.length === 32) {\n    return PrivateKey._transformBNBuffer(buf, network);\n  }\n  info.network = Networks.get(buf[0], 'privatekey');\n  if (!info.network) {\n    throw new Error('Invalid network');\n  }\n  if (network && info.network !== Networks.get(network)) {\n    throw new TypeError('Private key network mismatch');\n  }\n  if (buf.length === 1 + 32 + 1 && buf[1 + 32 + 1 - 1] === 1) {\n    info.compressed = true;\n  } else if (buf.length === 1 + 32) {\n    info.compressed = false;\n  } else {\n    throw new Error('Length of buffer must be 33 (uncompressed) or 34 (compressed)');\n  }\n  info.bn = BN.fromBuffer(buf.slice(1, 32 + 1));\n  return info;\n};\n\n/**\r\n * Internal function to transform a BN buffer into a private key\r\n *\r\n * @param {Buffer} buf\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {object} an Object with keys: bn, network, and compressed\r\n * @private\r\n */\nPrivateKey._transformBNBuffer = function (buf, network) {\n  var info = {};\n  info.network = Networks.get(network) || Networks.defaultNetwork;\n  info.bn = BN.fromBuffer(buf);\n  info.compressed = false;\n  return info;\n};\n\n/**\r\n * Internal function to transform a WIF string into a private key\r\n *\r\n * @param {string} buf - An WIF string\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\nPrivateKey._transformWIF = function (str, network) {\n  return PrivateKey._transformBuffer(Base58Check.decode(str), network);\n};\n\n/**\r\n * Instantiate a PrivateKey from a Buffer with the DER or WIF representation\r\n *\r\n * @param {Buffer} arg\r\n * @param {Network} network\r\n * @return {PrivateKey}\r\n */\nPrivateKey.fromBuffer = function (arg, network) {\n  return new PrivateKey(arg, network);\n};\n\n/**\r\n * Internal function to transform a JSON string on plain object into a private key\r\n * return this.\r\n *\r\n * @param {string} json - A JSON string or plain object\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\nPrivateKey._transformObject = function (json) {\n  var bn = new BN(json.bn, 'hex');\n  var network = Networks.get(json.network);\n  return {\n    bn: bn,\n    network: network,\n    compressed: json.compressed\n  };\n};\n\n/**\r\n * Instantiate a PrivateKey from a WIF string\r\n *\r\n * @param {string} str - The WIF encoded private key string\r\n * @returns {PrivateKey} A new valid instance of PrivateKey\r\n */\nPrivateKey.fromString = PrivateKey.fromWIF = function (str) {\n  $.checkArgument(_.isString(str), 'First argument is expected to be a string.');\n  return new PrivateKey(str);\n};\n\n/**\r\n * Instantiate a PrivateKey from a plain JavaScript object\r\n *\r\n * @param {Object} obj - The output from privateKey.toObject()\r\n */\nPrivateKey.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj), 'First argument is expected to be an object.');\n  return new PrivateKey(obj);\n};\n\n/**\r\n * Instantiate a PrivateKey from random bytes\r\n *\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {PrivateKey} A new valid instance of PrivateKey\r\n */\nPrivateKey.fromRandom = function (network) {\n  var bn = PrivateKey._getRandomBN();\n  return new PrivateKey(bn, network);\n};\n\n/**\r\n * Check if there would be any errors when initializing a PrivateKey\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {null|Error} An error if exists\r\n */\n\nPrivateKey.getValidationError = function (data, network) {\n  var error;\n  try {\n    /* jshint nonew: false */\n    new PrivateKey(data, network);\n  } catch (e) {\n    error = e;\n  }\n  return error;\n};\n\n/**\r\n * Check if the parameters are valid\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {Boolean} If the private key is would be valid\r\n */\nPrivateKey.isValid = function (data, network) {\n  if (!data) {\n    return false;\n  }\n  return !PrivateKey.getValidationError(data, network);\n};\n\n/**\r\n * Will output the PrivateKey encoded as hex string\r\n *\r\n * @returns {string}\r\n */\nPrivateKey.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n\n/**\r\n * Will output the PrivateKey to a WIF string\r\n *\r\n * @returns {string} A WIP representation of the private key\r\n */\nPrivateKey.prototype.toWIF = function () {\n  var network = this.network;\n  var compressed = this.compressed;\n  var buf;\n  if (compressed) {\n    buf = Buffer.concat([Buffer.from([network.privatekey]), this.bn.toBuffer({\n      size: 32\n    }), Buffer.from([0x01])]);\n  } else {\n    buf = Buffer.concat([Buffer.from([network.privatekey]), this.bn.toBuffer({\n      size: 32\n    })]);\n  }\n  return Base58Check.encode(buf);\n};\n\n/**\r\n * Will return the private key as a BN instance\r\n *\r\n * @returns {BN} A BN instance of the private key\r\n */\nPrivateKey.prototype.toBigNumber = function () {\n  return this.bn;\n};\n\n/**\r\n * Will return the private key as a BN buffer\r\n *\r\n * @returns {Buffer} A buffer of the private key\r\n */\nPrivateKey.prototype.toBuffer = function () {\n  return this.bn.toBuffer({\n    size: 32\n  });\n};\n\n/**\r\n * WARNING: This method will not be officially supported until v1.0.0.\r\n *\r\n *\r\n * Will return the private key as a BN buffer without leading zero padding\r\n *\r\n * @returns {Buffer} A buffer of the private key\r\n */\nPrivateKey.prototype.toBufferNoPadding = function () {\n  return this.bn.toBuffer();\n};\n\n/**\r\n * Will return the corresponding public key\r\n *\r\n * @returns {PublicKey} A public key generated from the private key\r\n */\nPrivateKey.prototype.toPublicKey = function () {\n  if (!this._pubkey) {\n    this._pubkey = PublicKey.fromPrivateKey(this);\n  }\n  return this._pubkey;\n};\n\n/**\r\n * Will return an address for the private key\r\n * @param {Network=} network - optional parameter specifying\r\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', or 'scripthash'\r\n * the desired network for the address\r\n *\r\n * @returns {Address} An address generated from the private key\r\n */\nPrivateKey.prototype.toAddress = function (network, type) {\n  var pubkey = this.toPublicKey();\n  return Address.fromPublicKey(pubkey, network || this.network, type);\n};\n\n/**\r\n * @returns {Object} A plain object representation\r\n */\nPrivateKey.prototype.toObject = PrivateKey.prototype.toJSON = function toObject() {\n  return {\n    bn: this.bn.toString('hex'),\n    compressed: this.compressed,\n    network: this.network.toString()\n  };\n};\n\n/**\r\n * Will return a string formatted for the console\r\n *\r\n * @returns {string} Private key\r\n */\nPrivateKey.prototype.inspect = function () {\n  var uncompressed = !this.compressed ? ', uncompressed' : '';\n  return '<PrivateKey: ' + this.toString() + ', network: ' + this.network + uncompressed + '>';\n};\nmodule.exports = PrivateKey;","map":{"version":3,"names":["_","require","Address","Base58Check","BN","JSUtil","Networks","Point","PublicKey","Random","$","PrivateKey","data","network","info","_classifyArguments","bn","cmp","TypeError","lt","getN","defineImmutable","compressed","Object","defineProperty","configurable","enumerable","get","toPublicKey","bind","prototype","defaultNetwork","isUndefined","isNull","_getRandomBN","Buffer","Uint8Array","_transformBuffer","_transformObject","isHexa","from","_transformWIF","condition","privbuf","getRandomBuffer","fromBuffer","buf","length","_transformBNBuffer","Error","slice","str","decode","arg","json","fromString","fromWIF","checkArgument","isString","fromObject","obj","isObject","fromRandom","getValidationError","error","e","isValid","toString","toBuffer","toWIF","concat","privatekey","size","encode","toBigNumber","toBufferNoPadding","_pubkey","fromPrivateKey","toAddress","type","pubkey","fromPublicKey","toObject","toJSON","inspect","uncompressed","module","exports"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bitcore-lib/lib/privatekey.js"],"sourcesContent":["'use strict';\r\n\r\nvar _ = require('lodash');\r\nvar Address = require('./address');\r\nvar Base58Check = require('./encoding/base58check');\r\nvar BN = require('./crypto/bn');\r\nvar JSUtil = require('./util/js');\r\nvar Networks = require('./networks');\r\nvar Point = require('./crypto/point');\r\nvar PublicKey = require('./publickey');\r\nvar Random = require('./crypto/random');\r\nvar $ = require('./util/preconditions');\r\n\r\n/**\r\n * Instantiate a PrivateKey from a BN, Buffer and WIF.\r\n *\r\n * @example\r\n * ```javascript\r\n * // generate a new random key\r\n * var key = PrivateKey();\r\n *\r\n * // get the associated address\r\n * var address = key.toAddress();\r\n *\r\n * // encode into wallet export format\r\n * var exported = key.toWIF();\r\n *\r\n * // instantiate from the exported (and saved) private key\r\n * var imported = PrivateKey.fromWIF(exported);\r\n * ```\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {PrivateKey} A new valid instance of an PrivateKey\r\n * @constructor\r\n */\r\nfunction PrivateKey(data, network) {\r\n  /* jshint maxstatements: 20 */\r\n  /* jshint maxcomplexity: 8 */\r\n\r\n  if (!(this instanceof PrivateKey)) {\r\n    return new PrivateKey(data, network);\r\n  }\r\n  if (data instanceof PrivateKey) {\r\n    return data;\r\n  }\r\n\r\n  var info = this._classifyArguments(data, network);\r\n\r\n  // validation\r\n  if (!info.bn || info.bn.cmp(new BN(0)) === 0){\r\n    throw new TypeError('Number can not be equal to zero, undefined, null or false');\r\n  }\r\n  if (!info.bn.lt(Point.getN())) {\r\n    throw new TypeError('Number must be less than N');\r\n  }\r\n  if (typeof(info.network) === 'undefined') {\r\n    throw new TypeError('Must specify the network (\"livenet\" or \"testnet\")');\r\n  }\r\n\r\n  JSUtil.defineImmutable(this, {\r\n    bn: info.bn,\r\n    compressed: info.compressed,\r\n    network: info.network\r\n  });\r\n\r\n  Object.defineProperty(this, 'publicKey', {\r\n    configurable: false,\r\n    enumerable: true,\r\n    get: this.toPublicKey.bind(this)\r\n  });\r\n\r\n  return this;\r\n\r\n};\r\n\r\n/**\r\n * Internal helper to instantiate PrivateKey internal `info` object from\r\n * different kinds of arguments passed to the constructor.\r\n *\r\n * @param {*} data\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @return {Object}\r\n */\r\nPrivateKey.prototype._classifyArguments = function(data, network) {\r\n  /* jshint maxcomplexity: 10 */\r\n  var info = {\r\n    compressed: true,\r\n    network: network ? Networks.get(network) : Networks.defaultNetwork\r\n  };\r\n\r\n  // detect type of data\r\n  if (_.isUndefined(data) || _.isNull(data)){\r\n    info.bn = PrivateKey._getRandomBN();\r\n  } else if (data instanceof BN) {\r\n    info.bn = data;\r\n  } else if (data instanceof Buffer || data instanceof Uint8Array) {\r\n    info = PrivateKey._transformBuffer(data, network);\r\n  } else if (data.bn && data.network){\r\n    info = PrivateKey._transformObject(data);\r\n  } else if (!network && Networks.get(data)) {\r\n    info.bn = PrivateKey._getRandomBN();\r\n    info.network = Networks.get(data);\r\n  } else if (typeof(data) === 'string'){\r\n    if (JSUtil.isHexa(data)) {\r\n      info.bn = new BN(Buffer.from(data, 'hex'));\r\n    } else {\r\n      info = PrivateKey._transformWIF(data, network);\r\n    }\r\n  } else {\r\n    throw new TypeError('First argument is an unrecognized data type.');\r\n  }\r\n  return info;\r\n};\r\n\r\n/**\r\n * Internal function to get a random Big Number (BN)\r\n *\r\n * @returns {BN} A new randomly generated BN\r\n * @private\r\n */\r\nPrivateKey._getRandomBN = function(){\r\n  var condition;\r\n  var bn;\r\n  do {\r\n    var privbuf = Random.getRandomBuffer(32);\r\n    bn = BN.fromBuffer(privbuf);\r\n    condition = bn.lt(Point.getN());\r\n  } while (!condition);\r\n  return bn;\r\n};\r\n\r\n/**\r\n * Internal function to transform a WIF Buffer into a private key\r\n *\r\n * @param {Buffer} buf - An WIF string\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\r\nPrivateKey._transformBuffer = function(buf, network) {\r\n\r\n  var info = {};\r\n\r\n  if (buf.length === 32) {\r\n    return PrivateKey._transformBNBuffer(buf, network);\r\n  }\r\n\r\n  info.network = Networks.get(buf[0], 'privatekey');\r\n\r\n  if (!info.network) {\r\n    throw new Error('Invalid network');\r\n  }\r\n\r\n  if (network && info.network !== Networks.get(network)) {\r\n    throw new TypeError('Private key network mismatch');\r\n  }\r\n\r\n  if (buf.length === 1 + 32 + 1 && buf[1 + 32 + 1 - 1] === 1) {\r\n    info.compressed = true;\r\n  } else if (buf.length === 1 + 32) {\r\n    info.compressed = false;\r\n  } else {\r\n    throw new Error('Length of buffer must be 33 (uncompressed) or 34 (compressed)');\r\n  }\r\n\r\n  info.bn = BN.fromBuffer(buf.slice(1, 32 + 1));\r\n\r\n  return info;\r\n};\r\n\r\n/**\r\n * Internal function to transform a BN buffer into a private key\r\n *\r\n * @param {Buffer} buf\r\n * @param {Network|string=} network - a {@link Network} object, or a string with the network name\r\n * @returns {object} an Object with keys: bn, network, and compressed\r\n * @private\r\n */\r\nPrivateKey._transformBNBuffer = function(buf, network) {\r\n  var info = {};\r\n  info.network = Networks.get(network) || Networks.defaultNetwork;\r\n  info.bn = BN.fromBuffer(buf);\r\n  info.compressed = false;\r\n  return info;\r\n};\r\n\r\n/**\r\n * Internal function to transform a WIF string into a private key\r\n *\r\n * @param {string} buf - An WIF string\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\r\nPrivateKey._transformWIF = function(str, network) {\r\n  return PrivateKey._transformBuffer(Base58Check.decode(str), network);\r\n};\r\n\r\n/**\r\n * Instantiate a PrivateKey from a Buffer with the DER or WIF representation\r\n *\r\n * @param {Buffer} arg\r\n * @param {Network} network\r\n * @return {PrivateKey}\r\n */\r\nPrivateKey.fromBuffer = function(arg, network) {\r\n  return new PrivateKey(arg, network);\r\n};\r\n\r\n/**\r\n * Internal function to transform a JSON string on plain object into a private key\r\n * return this.\r\n *\r\n * @param {string} json - A JSON string or plain object\r\n * @returns {Object} An object with keys: bn, network and compressed\r\n * @private\r\n */\r\nPrivateKey._transformObject = function(json) {\r\n  var bn = new BN(json.bn, 'hex');\r\n  var network = Networks.get(json.network);\r\n  return {\r\n    bn: bn,\r\n    network: network,\r\n    compressed: json.compressed\r\n  };\r\n};\r\n\r\n/**\r\n * Instantiate a PrivateKey from a WIF string\r\n *\r\n * @param {string} str - The WIF encoded private key string\r\n * @returns {PrivateKey} A new valid instance of PrivateKey\r\n */\r\nPrivateKey.fromString = PrivateKey.fromWIF = function(str) {\r\n  $.checkArgument(_.isString(str), 'First argument is expected to be a string.');\r\n  return new PrivateKey(str);\r\n};\r\n\r\n/**\r\n * Instantiate a PrivateKey from a plain JavaScript object\r\n *\r\n * @param {Object} obj - The output from privateKey.toObject()\r\n */\r\nPrivateKey.fromObject = function(obj) {\r\n  $.checkArgument(_.isObject(obj), 'First argument is expected to be an object.');\r\n  return new PrivateKey(obj);\r\n};\r\n\r\n/**\r\n * Instantiate a PrivateKey from random bytes\r\n *\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {PrivateKey} A new valid instance of PrivateKey\r\n */\r\nPrivateKey.fromRandom = function(network) {\r\n  var bn = PrivateKey._getRandomBN();\r\n  return new PrivateKey(bn, network);\r\n};\r\n\r\n/**\r\n * Check if there would be any errors when initializing a PrivateKey\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {null|Error} An error if exists\r\n */\r\n\r\nPrivateKey.getValidationError = function(data, network) {\r\n  var error;\r\n  try {\r\n    /* jshint nonew: false */\r\n    new PrivateKey(data, network);\r\n  } catch (e) {\r\n    error = e;\r\n  }\r\n  return error;\r\n};\r\n\r\n/**\r\n * Check if the parameters are valid\r\n *\r\n * @param {string} data - The encoded data in various formats\r\n * @param {string=} network - Either \"livenet\" or \"testnet\"\r\n * @returns {Boolean} If the private key is would be valid\r\n */\r\nPrivateKey.isValid = function(data, network){\r\n  if (!data) {\r\n    return false;\r\n  }\r\n  return !PrivateKey.getValidationError(data, network);\r\n};\r\n\r\n/**\r\n * Will output the PrivateKey encoded as hex string\r\n *\r\n * @returns {string}\r\n */\r\nPrivateKey.prototype.toString = function() {\r\n  return this.toBuffer().toString('hex');\r\n};\r\n\r\n/**\r\n * Will output the PrivateKey to a WIF string\r\n *\r\n * @returns {string} A WIP representation of the private key\r\n */\r\nPrivateKey.prototype.toWIF = function() {\r\n  var network = this.network;\r\n  var compressed = this.compressed;\r\n\r\n  var buf;\r\n  if (compressed) {\r\n    buf = Buffer.concat([Buffer.from([network.privatekey]),\r\n                         this.bn.toBuffer({size: 32}),\r\n                         Buffer.from([0x01])]);\r\n  } else {\r\n    buf = Buffer.concat([Buffer.from([network.privatekey]),\r\n                         this.bn.toBuffer({size: 32})]);\r\n  }\r\n\r\n  return Base58Check.encode(buf);\r\n};\r\n\r\n/**\r\n * Will return the private key as a BN instance\r\n *\r\n * @returns {BN} A BN instance of the private key\r\n */\r\nPrivateKey.prototype.toBigNumber = function(){\r\n  return this.bn;\r\n};\r\n\r\n/**\r\n * Will return the private key as a BN buffer\r\n *\r\n * @returns {Buffer} A buffer of the private key\r\n */\r\nPrivateKey.prototype.toBuffer = function(){\r\n  return this.bn.toBuffer({size: 32});\r\n};\r\n\r\n/**\r\n * WARNING: This method will not be officially supported until v1.0.0.\r\n *\r\n *\r\n * Will return the private key as a BN buffer without leading zero padding\r\n *\r\n * @returns {Buffer} A buffer of the private key\r\n */\r\nPrivateKey.prototype.toBufferNoPadding = function() {\r\n  return this.bn.toBuffer();\r\n};\r\n\r\n/**\r\n * Will return the corresponding public key\r\n *\r\n * @returns {PublicKey} A public key generated from the private key\r\n */\r\nPrivateKey.prototype.toPublicKey = function(){\r\n  if (!this._pubkey) {\r\n    this._pubkey = PublicKey.fromPrivateKey(this);\r\n  }\r\n  return this._pubkey;\r\n};\r\n\r\n/**\r\n * Will return an address for the private key\r\n * @param {Network=} network - optional parameter specifying\r\n * @param {string} type - Either 'pubkeyhash', 'witnesspubkeyhash', or 'scripthash'\r\n * the desired network for the address\r\n *\r\n * @returns {Address} An address generated from the private key\r\n */\r\nPrivateKey.prototype.toAddress = function(network, type) {\r\n  var pubkey = this.toPublicKey();\r\n  return Address.fromPublicKey(pubkey, network || this.network, type);\r\n};\r\n\r\n/**\r\n * @returns {Object} A plain object representation\r\n */\r\nPrivateKey.prototype.toObject = PrivateKey.prototype.toJSON = function toObject() {\r\n  return {\r\n    bn: this.bn.toString('hex'),\r\n    compressed: this.compressed,\r\n    network: this.network.toString()\r\n  };\r\n};\r\n\r\n/**\r\n * Will return a string formatted for the console\r\n *\r\n * @returns {string} Private key\r\n */\r\nPrivateKey.prototype.inspect = function() {\r\n  var uncompressed = !this.compressed ? ', uncompressed' : '';\r\n  return '<PrivateKey: ' + this.toString() + ', network: ' + this.network + uncompressed + '>';\r\n};\r\n\r\nmodule.exports = PrivateKey;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}