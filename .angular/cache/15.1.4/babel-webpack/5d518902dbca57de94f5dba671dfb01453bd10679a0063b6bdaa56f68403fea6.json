{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar index_1 = __importDefault(require(\"./index\"));\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\nvar EthereumHDKey = /** @class */function () {\n  function EthereumHDKey(_hdkey) {\n    this._hdkey = _hdkey;\n  }\n  /**\r\n   * Creates an instance based on a seed.\r\n   *\r\n   * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\r\n   * create one from a BIP39 mnemonic.\r\n   */\n  EthereumHDKey.fromMasterSeed = function (seedBuffer) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\n  };\n  /**\r\n   * Create an instance based on a BIP32 extended private or public key.\r\n   */\n  EthereumHDKey.fromExtendedKey = function (base58Key) {\n    return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\n  };\n  /**\r\n   * Returns a BIP32 extended private key (xprv)\r\n   */\n  EthereumHDKey.prototype.privateExtendedKey = function () {\n    if (!this._hdkey.privateExtendedKey) {\n      throw new Error('This is a public key only wallet');\n    }\n    return this._hdkey.privateExtendedKey;\n  };\n  /**\r\n   * Return a BIP32 extended public key (xpub)\r\n   */\n  EthereumHDKey.prototype.publicExtendedKey = function () {\n    return this._hdkey.publicExtendedKey;\n  };\n  /**\r\n   * Derives a node based on a path (e.g. m/44'/0'/0/1)\r\n   */\n  EthereumHDKey.prototype.derivePath = function (path) {\n    return new EthereumHDKey(this._hdkey.derive(path));\n  };\n  /**\r\n   * Derive a node based on a child index\r\n   */\n  EthereumHDKey.prototype.deriveChild = function (index) {\n    return new EthereumHDKey(this._hdkey.deriveChild(index));\n  };\n  /**\r\n   * Return a `Wallet` instance as seen above\r\n   */\n  EthereumHDKey.prototype.getWallet = function () {\n    if (this._hdkey._privateKey) {\n      return index_1.default.fromPrivateKey(this._hdkey._privateKey);\n    }\n    return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\n  };\n  return EthereumHDKey;\n}();\nexports.default = EthereumHDKey;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","index_1","require","hdkey_1","EthereumHDKey","_hdkey","fromMasterSeed","seedBuffer","HDKey","fromExtendedKey","base58Key","prototype","privateExtendedKey","Error","publicExtendedKey","derivePath","path","derive","deriveChild","index","getWallet","_privateKey","default","fromPrivateKey","fromPublicKey","_publicKey"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/ethereumjs-wallet/dist.browser/hdkey.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar index_1 = __importDefault(require(\"./index\"));\r\nvar hdkey_1 = require(\"ethereum-cryptography/hdkey\");\r\nvar EthereumHDKey = /** @class */ (function () {\r\n    function EthereumHDKey(_hdkey) {\r\n        this._hdkey = _hdkey;\r\n    }\r\n    /**\r\n     * Creates an instance based on a seed.\r\n     *\r\n     * For the seed we suggest to use [bip39](https://npmjs.org/package/bip39) to\r\n     * create one from a BIP39 mnemonic.\r\n     */\r\n    EthereumHDKey.fromMasterSeed = function (seedBuffer) {\r\n        return new EthereumHDKey(hdkey_1.HDKey.fromMasterSeed(seedBuffer));\r\n    };\r\n    /**\r\n     * Create an instance based on a BIP32 extended private or public key.\r\n     */\r\n    EthereumHDKey.fromExtendedKey = function (base58Key) {\r\n        return new EthereumHDKey(hdkey_1.HDKey.fromExtendedKey(base58Key));\r\n    };\r\n    /**\r\n     * Returns a BIP32 extended private key (xprv)\r\n     */\r\n    EthereumHDKey.prototype.privateExtendedKey = function () {\r\n        if (!this._hdkey.privateExtendedKey) {\r\n            throw new Error('This is a public key only wallet');\r\n        }\r\n        return this._hdkey.privateExtendedKey;\r\n    };\r\n    /**\r\n     * Return a BIP32 extended public key (xpub)\r\n     */\r\n    EthereumHDKey.prototype.publicExtendedKey = function () {\r\n        return this._hdkey.publicExtendedKey;\r\n    };\r\n    /**\r\n     * Derives a node based on a path (e.g. m/44'/0'/0/1)\r\n     */\r\n    EthereumHDKey.prototype.derivePath = function (path) {\r\n        return new EthereumHDKey(this._hdkey.derive(path));\r\n    };\r\n    /**\r\n     * Derive a node based on a child index\r\n     */\r\n    EthereumHDKey.prototype.deriveChild = function (index) {\r\n        return new EthereumHDKey(this._hdkey.deriveChild(index));\r\n    };\r\n    /**\r\n     * Return a `Wallet` instance as seen above\r\n     */\r\n    EthereumHDKey.prototype.getWallet = function () {\r\n        if (this._hdkey._privateKey) {\r\n            return index_1.default.fromPrivateKey(this._hdkey._privateKey);\r\n        }\r\n        return index_1.default.fromPublicKey(this._hdkey._publicKey, true);\r\n    };\r\n    return EthereumHDKey;\r\n}());\r\nexports.default = EthereumHDKey;\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,OAAO,GAAGP,eAAe,CAACQ,OAAO,CAAC,SAAS,CAAC,CAAC;AACjD,IAAIC,OAAO,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACpD,IAAIE,aAAa,GAAG,aAAe,YAAY;EAC3C,SAASA,aAAa,CAACC,MAAM,EAAE;IAC3B,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,aAAa,CAACE,cAAc,GAAG,UAAUC,UAAU,EAAE;IACjD,OAAO,IAAIH,aAAa,CAACD,OAAO,CAACK,KAAK,CAACF,cAAc,CAACC,UAAU,CAAC,CAAC;EACtE,CAAC;EACD;AACJ;AACA;EACIH,aAAa,CAACK,eAAe,GAAG,UAAUC,SAAS,EAAE;IACjD,OAAO,IAAIN,aAAa,CAACD,OAAO,CAACK,KAAK,CAACC,eAAe,CAACC,SAAS,CAAC,CAAC;EACtE,CAAC;EACD;AACJ;AACA;EACIN,aAAa,CAACO,SAAS,CAACC,kBAAkB,GAAG,YAAY;IACrD,IAAI,CAAC,IAAI,CAACP,MAAM,CAACO,kBAAkB,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA,OAAO,IAAI,CAACR,MAAM,CAACO,kBAAkB;EACzC,CAAC;EACD;AACJ;AACA;EACIR,aAAa,CAACO,SAAS,CAACG,iBAAiB,GAAG,YAAY;IACpD,OAAO,IAAI,CAACT,MAAM,CAACS,iBAAiB;EACxC,CAAC;EACD;AACJ;AACA;EACIV,aAAa,CAACO,SAAS,CAACI,UAAU,GAAG,UAAUC,IAAI,EAAE;IACjD,OAAO,IAAIZ,aAAa,CAAC,IAAI,CAACC,MAAM,CAACY,MAAM,CAACD,IAAI,CAAC,CAAC;EACtD,CAAC;EACD;AACJ;AACA;EACIZ,aAAa,CAACO,SAAS,CAACO,WAAW,GAAG,UAAUC,KAAK,EAAE;IACnD,OAAO,IAAIf,aAAa,CAAC,IAAI,CAACC,MAAM,CAACa,WAAW,CAACC,KAAK,CAAC,CAAC;EAC5D,CAAC;EACD;AACJ;AACA;EACIf,aAAa,CAACO,SAAS,CAACS,SAAS,GAAG,YAAY;IAC5C,IAAI,IAAI,CAACf,MAAM,CAACgB,WAAW,EAAE;MACzB,OAAOpB,OAAO,CAACqB,OAAO,CAACC,cAAc,CAAC,IAAI,CAAClB,MAAM,CAACgB,WAAW,CAAC;IAClE;IACA,OAAOpB,OAAO,CAACqB,OAAO,CAACE,aAAa,CAAC,IAAI,CAACnB,MAAM,CAACoB,UAAU,EAAE,IAAI,CAAC;EACtE,CAAC;EACD,OAAOrB,aAAa;AACxB,CAAC,EAAG;AACJL,OAAO,CAACuB,OAAO,GAAGlB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}