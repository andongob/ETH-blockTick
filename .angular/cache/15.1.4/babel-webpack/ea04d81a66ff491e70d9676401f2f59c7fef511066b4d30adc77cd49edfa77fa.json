{"ast":null,"code":"const BigInteger = require('bigi');\nconst Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\nconst one = BigInteger.ONE;\nconst n = curve.n;\nconst p = curve.p;\nfunction checkBuffer(name, buf, len, idx) {\n  const idxStr = idx !== undefined ? '[' + idx + ']' : '';\n  if (!Buffer.isBuffer(buf)) {\n    throw new Error(name + idxStr + ' must be a Buffer');\n  }\n  if (buf.length !== len) {\n    throw new Error(name + idxStr + ' must be ' + len + ' bytes long');\n  }\n}\nfunction checkArray(name, arr) {\n  if (!arr || !arr.length) {\n    throw new Error(name + ' must be an array with one or more elements');\n  }\n}\nfunction checkPubKeyArr(pubKeys) {\n  checkArray('pubKeys', pubKeys);\n  for (let i = 0; i < pubKeys.length; i++) {\n    checkBuffer('pubKey', pubKeys[i], 32, i);\n  }\n}\nfunction checkMessageArr(messages) {\n  checkArray('messages', messages);\n  for (let i = 0; i < messages.length; i++) {\n    checkBuffer('message', messages[i], 32, i);\n  }\n}\nfunction checkSignatureArr(signatures) {\n  checkArray('signatures', signatures);\n  for (let i = 0; i < signatures.length; i++) {\n    checkBuffer('signature', signatures[i], 64, i);\n  }\n}\nfunction checkNonceArr(nonces) {\n  checkArray('nonces', nonces);\n  for (let i = 0; i < nonces.length; i++) {\n    checkBuffer('nonce', nonces[i], 32, i);\n  }\n}\nfunction checkPrivateKey(privateKey, idx) {\n  const idxStr = idx !== undefined ? '[' + idx + ']' : '';\n  if (!BigInteger.isBigInteger(privateKey) && !(typeof privateKey == 'string')) {\n    throw new Error('privateKey' + idxStr + ' must be a BigInteger or valid hex string');\n  }\n  if (typeof privateKey == 'string') {\n    if (privateKey.match(/[^a-f^A-F^0-9]+/)) {\n      throw new Error('privateKey must be a BigInteger or valid hex string');\n    }\n    checkRange('privateKey', BigInteger.fromHex(privateKey));\n    return;\n  }\n  checkRange('privateKey', privateKey);\n}\nfunction checkSignParams(privateKey, message) {\n  checkPrivateKey(privateKey);\n  checkBuffer('message', message, 32);\n}\nfunction checkVerifyParams(pubKey, message, signature) {\n  checkBuffer('pubKey', pubKey, 32);\n  checkBuffer('message', message, 32);\n  checkBuffer('signature', signature, 64);\n}\nfunction checkBatchVerifyParams(pubKeys, messages, signatures) {\n  checkPubKeyArr(pubKeys);\n  checkMessageArr(messages);\n  checkSignatureArr(signatures);\n  if (pubKeys.length !== messages.length || messages.length !== signatures.length) {\n    throw new Error('all parameters must be an array with the same length');\n  }\n}\nfunction checkSessionParams(sessionId, privateKey, message, pubKeyCombined, ell) {\n  checkSignParams(privateKey, message);\n  checkBuffer('sessionId', sessionId, 32);\n  checkBuffer('pubKeyCombined', pubKeyCombined, 32);\n  checkBuffer('ell', ell, 32);\n}\nfunction checkRange(name, scalar) {\n  if (scalar.compareTo(one) < 0 || scalar.compareTo(n.subtract(one)) > 0) {\n    throw new Error(name + ' must be an integer in the range 1..n-1');\n  }\n}\nfunction checkSignatureInput(r, s) {\n  if (r.compareTo(p) >= 0) {\n    throw new Error('r is larger than or equal to field size');\n  }\n  if (s.compareTo(n) >= 0) {\n    throw new Error('s is larger than or equal to curve order');\n  }\n}\nfunction checkPointExists(pubKeyEven, P) {\n  if (P.curve.isInfinity(P)) {\n    throw new Error('point is at infinity');\n  }\n  const pEven = P.affineY.isEven();\n  if (pubKeyEven !== pEven) {\n    throw new Error('point does not exist');\n  }\n}\nfunction checkAux(aux) {\n  if (aux.length !== 32) {\n    throw new Error('aux must be 32 bytes');\n  }\n}\nmodule.exports = {\n  checkSessionParams,\n  checkSignParams,\n  checkVerifyParams,\n  checkBatchVerifyParams,\n  checkRange,\n  checkSignatureInput,\n  checkPointExists,\n  checkPubKeyArr,\n  checkArray,\n  checkNonceArr,\n  checkAux\n};","map":{"version":3,"names":["BigInteger","require","Buffer","ecurve","curve","getCurveByName","one","ONE","n","p","checkBuffer","name","buf","len","idx","idxStr","undefined","isBuffer","Error","length","checkArray","arr","checkPubKeyArr","pubKeys","i","checkMessageArr","messages","checkSignatureArr","signatures","checkNonceArr","nonces","checkPrivateKey","privateKey","isBigInteger","match","checkRange","fromHex","checkSignParams","message","checkVerifyParams","pubKey","signature","checkBatchVerifyParams","checkSessionParams","sessionId","pubKeyCombined","ell","scalar","compareTo","subtract","checkSignatureInput","r","s","checkPointExists","pubKeyEven","P","isInfinity","pEven","affineY","isEven","checkAux","aux","module","exports"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/bip-schnorr/src/check.js"],"sourcesContent":["const BigInteger = require('bigi');\nconst Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\n\nconst one = BigInteger.ONE;\nconst n = curve.n;\nconst p = curve.p;\n\nfunction checkBuffer(name, buf, len, idx) {\n  const idxStr = (idx !== undefined ? '[' + idx + ']' : '');\n  if (!Buffer.isBuffer(buf)) {\n    throw new Error(name + idxStr + ' must be a Buffer');\n  }\n  if (buf.length !== len) {\n    throw new Error(name + idxStr + ' must be ' + len + ' bytes long');\n  }\n}\n\nfunction checkArray(name, arr) {\n  if (!arr || !arr.length) {\n    throw new Error(name + ' must be an array with one or more elements');\n  }\n}\n\nfunction checkPubKeyArr(pubKeys) {\n  checkArray('pubKeys', pubKeys);\n  for (let i = 0; i < pubKeys.length; i++) {\n    checkBuffer('pubKey', pubKeys[i], 32, i);\n  }\n}\n\nfunction checkMessageArr(messages) {\n  checkArray('messages', messages);\n  for (let i = 0; i < messages.length; i++) {\n    checkBuffer('message', messages[i], 32, i);\n  }\n}\n\nfunction checkSignatureArr(signatures) {\n  checkArray('signatures', signatures);\n  for (let i = 0; i < signatures.length; i++) {\n    checkBuffer('signature', signatures[i], 64, i);\n  }\n}\n\nfunction checkNonceArr(nonces) {\n  checkArray('nonces', nonces);\n  for (let i = 0; i < nonces.length; i++) {\n    checkBuffer('nonce', nonces[i], 32, i);\n  }\n}\n\nfunction checkPrivateKey(privateKey, idx) {\n  const idxStr = (idx !== undefined ? '[' + idx + ']' : '');\n  if (!BigInteger.isBigInteger(privateKey) && !(typeof privateKey == 'string')) {\n    throw new Error('privateKey' + idxStr + ' must be a BigInteger or valid hex string');\n  }\n\n  if (typeof(privateKey) == 'string') {\n    if (privateKey.match(/[^a-f^A-F^0-9]+/)) {\n      throw new Error('privateKey must be a BigInteger or valid hex string');\n    }\n\n    checkRange('privateKey', BigInteger.fromHex(privateKey));\n    return\n  }\n\n  checkRange('privateKey', privateKey);\n}\n\nfunction checkSignParams(privateKey, message) {\n  checkPrivateKey(privateKey);\n  checkBuffer('message', message, 32);\n}\n\nfunction checkVerifyParams(pubKey, message, signature) {\n  checkBuffer('pubKey', pubKey, 32);\n  checkBuffer('message', message, 32);\n  checkBuffer('signature', signature, 64);\n}\n\nfunction checkBatchVerifyParams(pubKeys, messages, signatures) {\n  checkPubKeyArr(pubKeys);\n  checkMessageArr(messages);\n  checkSignatureArr(signatures);\n  if (pubKeys.length !== messages.length || messages.length !== signatures.length) {\n    throw new Error('all parameters must be an array with the same length')\n  }\n}\n\nfunction checkSessionParams(sessionId, privateKey, message, pubKeyCombined, ell) {\n  checkSignParams(privateKey, message);\n  checkBuffer('sessionId', sessionId, 32);\n  checkBuffer('pubKeyCombined', pubKeyCombined, 32);\n  checkBuffer('ell', ell, 32);\n}\n\nfunction checkRange(name, scalar) {\n  if (scalar.compareTo(one) < 0 || scalar.compareTo(n.subtract(one)) > 0) {\n    throw new Error(name + ' must be an integer in the range 1..n-1')\n  }\n}\n\nfunction checkSignatureInput(r, s) {\n  if (r.compareTo(p) >= 0) {\n    throw new Error('r is larger than or equal to field size');\n  }\n  if (s.compareTo(n) >= 0) {\n    throw new Error('s is larger than or equal to curve order');\n  }\n}\n\nfunction checkPointExists(pubKeyEven, P) {\n  if (P.curve.isInfinity(P)) {\n    throw new Error('point is at infinity');\n  }\n  const pEven = P.affineY.isEven();\n  if (pubKeyEven !== pEven) {\n    throw new Error('point does not exist');\n  }\n}\n\nfunction checkAux(aux) {\n  if (aux.length !== 32) {\n    throw new Error('aux must be 32 bytes');\n  }\n}\n\nmodule.exports = {\n  checkSessionParams,\n  checkSignParams,\n  checkVerifyParams,\n  checkBatchVerifyParams,\n  checkRange,\n  checkSignatureInput,\n  checkPointExists,\n  checkPubKeyArr,\n  checkArray,\n  checkNonceArr,\n  checkAux,\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,MAAM,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;AAC5C,MAAMC,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,KAAK,GAAGD,MAAM,CAACE,cAAc,CAAC,WAAW,CAAC;AAEhD,MAAMC,GAAG,GAAGN,UAAU,CAACO,GAAG;AAC1B,MAAMC,CAAC,GAAGJ,KAAK,CAACI,CAAC;AACjB,MAAMC,CAAC,GAAGL,KAAK,CAACK,CAAC;AAEjB,SAASC,WAAW,CAACC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;EACxC,MAAMC,MAAM,GAAID,GAAG,KAAKE,SAAS,GAAG,GAAG,GAAGF,GAAG,GAAG,GAAG,GAAG,EAAG;EACzD,IAAI,CAACZ,MAAM,CAACe,QAAQ,CAACL,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIM,KAAK,CAACP,IAAI,GAAGI,MAAM,GAAG,mBAAmB,CAAC;EACtD;EACA,IAAIH,GAAG,CAACO,MAAM,KAAKN,GAAG,EAAE;IACtB,MAAM,IAAIK,KAAK,CAACP,IAAI,GAAGI,MAAM,GAAG,WAAW,GAAGF,GAAG,GAAG,aAAa,CAAC;EACpE;AACF;AAEA,SAASO,UAAU,CAACT,IAAI,EAAEU,GAAG,EAAE;EAC7B,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACF,MAAM,EAAE;IACvB,MAAM,IAAID,KAAK,CAACP,IAAI,GAAG,6CAA6C,CAAC;EACvE;AACF;AAEA,SAASW,cAAc,CAACC,OAAO,EAAE;EAC/BH,UAAU,CAAC,SAAS,EAAEG,OAAO,CAAC;EAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,CAACJ,MAAM,EAAEK,CAAC,EAAE,EAAE;IACvCd,WAAW,CAAC,QAAQ,EAAEa,OAAO,CAACC,CAAC,CAAC,EAAE,EAAE,EAAEA,CAAC,CAAC;EAC1C;AACF;AAEA,SAASC,eAAe,CAACC,QAAQ,EAAE;EACjCN,UAAU,CAAC,UAAU,EAAEM,QAAQ,CAAC;EAChC,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,QAAQ,CAACP,MAAM,EAAEK,CAAC,EAAE,EAAE;IACxCd,WAAW,CAAC,SAAS,EAAEgB,QAAQ,CAACF,CAAC,CAAC,EAAE,EAAE,EAAEA,CAAC,CAAC;EAC5C;AACF;AAEA,SAASG,iBAAiB,CAACC,UAAU,EAAE;EACrCR,UAAU,CAAC,YAAY,EAAEQ,UAAU,CAAC;EACpC,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,UAAU,CAACT,MAAM,EAAEK,CAAC,EAAE,EAAE;IAC1Cd,WAAW,CAAC,WAAW,EAAEkB,UAAU,CAACJ,CAAC,CAAC,EAAE,EAAE,EAAEA,CAAC,CAAC;EAChD;AACF;AAEA,SAASK,aAAa,CAACC,MAAM,EAAE;EAC7BV,UAAU,CAAC,QAAQ,EAAEU,MAAM,CAAC;EAC5B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,MAAM,CAACX,MAAM,EAAEK,CAAC,EAAE,EAAE;IACtCd,WAAW,CAAC,OAAO,EAAEoB,MAAM,CAACN,CAAC,CAAC,EAAE,EAAE,EAAEA,CAAC,CAAC;EACxC;AACF;AAEA,SAASO,eAAe,CAACC,UAAU,EAAElB,GAAG,EAAE;EACxC,MAAMC,MAAM,GAAID,GAAG,KAAKE,SAAS,GAAG,GAAG,GAAGF,GAAG,GAAG,GAAG,GAAG,EAAG;EACzD,IAAI,CAACd,UAAU,CAACiC,YAAY,CAACD,UAAU,CAAC,IAAI,EAAE,OAAOA,UAAU,IAAI,QAAQ,CAAC,EAAE;IAC5E,MAAM,IAAId,KAAK,CAAC,YAAY,GAAGH,MAAM,GAAG,2CAA2C,CAAC;EACtF;EAEA,IAAI,OAAOiB,UAAW,IAAI,QAAQ,EAAE;IAClC,IAAIA,UAAU,CAACE,KAAK,CAAC,iBAAiB,CAAC,EAAE;MACvC,MAAM,IAAIhB,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEAiB,UAAU,CAAC,YAAY,EAAEnC,UAAU,CAACoC,OAAO,CAACJ,UAAU,CAAC,CAAC;IACxD;EACF;EAEAG,UAAU,CAAC,YAAY,EAAEH,UAAU,CAAC;AACtC;AAEA,SAASK,eAAe,CAACL,UAAU,EAAEM,OAAO,EAAE;EAC5CP,eAAe,CAACC,UAAU,CAAC;EAC3BtB,WAAW,CAAC,SAAS,EAAE4B,OAAO,EAAE,EAAE,CAAC;AACrC;AAEA,SAASC,iBAAiB,CAACC,MAAM,EAAEF,OAAO,EAAEG,SAAS,EAAE;EACrD/B,WAAW,CAAC,QAAQ,EAAE8B,MAAM,EAAE,EAAE,CAAC;EACjC9B,WAAW,CAAC,SAAS,EAAE4B,OAAO,EAAE,EAAE,CAAC;EACnC5B,WAAW,CAAC,WAAW,EAAE+B,SAAS,EAAE,EAAE,CAAC;AACzC;AAEA,SAASC,sBAAsB,CAACnB,OAAO,EAAEG,QAAQ,EAAEE,UAAU,EAAE;EAC7DN,cAAc,CAACC,OAAO,CAAC;EACvBE,eAAe,CAACC,QAAQ,CAAC;EACzBC,iBAAiB,CAACC,UAAU,CAAC;EAC7B,IAAIL,OAAO,CAACJ,MAAM,KAAKO,QAAQ,CAACP,MAAM,IAAIO,QAAQ,CAACP,MAAM,KAAKS,UAAU,CAACT,MAAM,EAAE;IAC/E,MAAM,IAAID,KAAK,CAAC,sDAAsD,CAAC;EACzE;AACF;AAEA,SAASyB,kBAAkB,CAACC,SAAS,EAAEZ,UAAU,EAAEM,OAAO,EAAEO,cAAc,EAAEC,GAAG,EAAE;EAC/ET,eAAe,CAACL,UAAU,EAAEM,OAAO,CAAC;EACpC5B,WAAW,CAAC,WAAW,EAAEkC,SAAS,EAAE,EAAE,CAAC;EACvClC,WAAW,CAAC,gBAAgB,EAAEmC,cAAc,EAAE,EAAE,CAAC;EACjDnC,WAAW,CAAC,KAAK,EAAEoC,GAAG,EAAE,EAAE,CAAC;AAC7B;AAEA,SAASX,UAAU,CAACxB,IAAI,EAAEoC,MAAM,EAAE;EAChC,IAAIA,MAAM,CAACC,SAAS,CAAC1C,GAAG,CAAC,GAAG,CAAC,IAAIyC,MAAM,CAACC,SAAS,CAACxC,CAAC,CAACyC,QAAQ,CAAC3C,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;IACtE,MAAM,IAAIY,KAAK,CAACP,IAAI,GAAG,yCAAyC,CAAC;EACnE;AACF;AAEA,SAASuC,mBAAmB,CAACC,CAAC,EAAEC,CAAC,EAAE;EACjC,IAAID,CAAC,CAACH,SAAS,CAACvC,CAAC,CAAC,IAAI,CAAC,EAAE;IACvB,MAAM,IAAIS,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EACA,IAAIkC,CAAC,CAACJ,SAAS,CAACxC,CAAC,CAAC,IAAI,CAAC,EAAE;IACvB,MAAM,IAAIU,KAAK,CAAC,0CAA0C,CAAC;EAC7D;AACF;AAEA,SAASmC,gBAAgB,CAACC,UAAU,EAAEC,CAAC,EAAE;EACvC,IAAIA,CAAC,CAACnD,KAAK,CAACoD,UAAU,CAACD,CAAC,CAAC,EAAE;IACzB,MAAM,IAAIrC,KAAK,CAAC,sBAAsB,CAAC;EACzC;EACA,MAAMuC,KAAK,GAAGF,CAAC,CAACG,OAAO,CAACC,MAAM,EAAE;EAChC,IAAIL,UAAU,KAAKG,KAAK,EAAE;IACxB,MAAM,IAAIvC,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF;AAEA,SAAS0C,QAAQ,CAACC,GAAG,EAAE;EACrB,IAAIA,GAAG,CAAC1C,MAAM,KAAK,EAAE,EAAE;IACrB,MAAM,IAAID,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF;AAEA4C,MAAM,CAACC,OAAO,GAAG;EACfpB,kBAAkB;EAClBN,eAAe;EACfE,iBAAiB;EACjBG,sBAAsB;EACtBP,UAAU;EACVe,mBAAmB;EACnBG,gBAAgB;EAChB/B,cAAc;EACdF,UAAU;EACVS,aAAa;EACb+B;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}