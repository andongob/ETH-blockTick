{"ast":null,"code":"'use strict';\n\nvar buffer = require('buffer');\nvar assert = require('assert');\nvar js = require('./js');\nvar $ = require('./preconditions');\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = {\n  /**\r\n   * Fill a buffer with a value.\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @param {number} value\r\n   * @return {Buffer}\r\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n    return buffer;\n  },\n  /**\r\n   * Return a copy of a buffer\r\n   *\r\n   * @param {Buffer} original\r\n   * @return {Buffer}\r\n   */\n  copy: function (original) {\n    var buffer = Buffer.alloc(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n  /**\r\n   * Returns true if the given argument is an instance of a buffer. Tests for\r\n   * both node's Buffer and Uint8Array\r\n   *\r\n   * @param {*} arg\r\n   * @return {boolean}\r\n   */\n  isBuffer: function isBuffer(arg) {\n    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n  /**\r\n   * Returns a zero-filled byte array\r\n   *\r\n   * @param {number} bytes\r\n   * @return {Buffer}\r\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = Buffer.alloc(bytes);\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n    return result;\n  },\n  /**\r\n   * Concatenates a buffer\r\n   *\r\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\r\n   */\n  concat: buffer.Buffer.concat,\n  equals: equals,\n  equal: equals,\n  /**\r\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\r\n   *\r\n   * @param {number} integer\r\n   * @return {Buffer}\r\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return Buffer.from([integer & 0xff]);\n  },\n  /**\r\n   * Transform a 4-byte integer into a Buffer of length 4.\r\n   *\r\n   * @param {number} integer\r\n   * @return {Buffer}\r\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push(integer >> 24 & 0xff);\n    bytes.push(integer >> 16 & 0xff);\n    bytes.push(integer >> 8 & 0xff);\n    bytes.push(integer & 0xff);\n    return Buffer.from(bytes);\n  },\n  /**\r\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @return {number}\r\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n  /**\r\n   * Transforms the first byte of an array into a number ranging from -128 to 127\r\n   * @param {Buffer} buffer\r\n   * @return {number}\r\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n  /**\r\n   * Transforms a buffer into a string with a number in hexa representation\r\n   *\r\n   * Shorthand for <tt>buffer.toString('hex')</tt>\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @return {string}\r\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n  /**\r\n   * Reverse a buffer\r\n   * @param {Buffer} param\r\n   * @return {Buffer}\r\n   */\n  reverse: function reverse(param) {\n    return Buffer.from(param).reverse();\n  }\n};\nmodule.exports.NULL_HASH = module.exports.fill(Buffer.alloc(32), 0);\nmodule.exports.EMPTY_BUFFER = Buffer.alloc(0);","map":{"version":3,"names":["buffer","require","assert","js","$","equals","a","b","length","i","module","exports","fill","value","checkArgumentType","copy","original","Buffer","alloc","isBuffer","arg","Uint8Array","emptyBuffer","bytes","result","write","concat","equal","integerAsSingleByteBuffer","integer","from","integerAsBuffer","push","integerFromBuffer","integerFromSingleByteBuffer","bufferToHex","toString","reverse","param","NULL_HASH","EMPTY_BUFFER"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/bitcore-lib/lib/util/buffer.js"],"sourcesContent":["'use strict';\r\n\r\nvar buffer = require('buffer');\r\nvar assert = require('assert');\r\n\r\nvar js = require('./js');\r\nvar $ = require('./preconditions');\r\n\r\nfunction equals(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n  var length = a.length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Fill a buffer with a value.\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @param {number} value\r\n   * @return {Buffer}\r\n   */\r\n  fill: function fill(buffer, value) {\r\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\r\n    $.checkArgumentType(value, 'number', 'value');\r\n    var length = buffer.length;\r\n    for (var i = 0; i < length; i++) {\r\n      buffer[i] = value;\r\n    }\r\n    return buffer;\r\n  },\r\n\r\n  /**\r\n   * Return a copy of a buffer\r\n   *\r\n   * @param {Buffer} original\r\n   * @return {Buffer}\r\n   */\r\n  copy: function(original) {\r\n    var buffer = Buffer.alloc(original.length);\r\n    original.copy(buffer);\r\n    return buffer;\r\n  },\r\n\r\n  /**\r\n   * Returns true if the given argument is an instance of a buffer. Tests for\r\n   * both node's Buffer and Uint8Array\r\n   *\r\n   * @param {*} arg\r\n   * @return {boolean}\r\n   */\r\n  isBuffer: function isBuffer(arg) {\r\n    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;\r\n  },\r\n\r\n  /**\r\n   * Returns a zero-filled byte array\r\n   *\r\n   * @param {number} bytes\r\n   * @return {Buffer}\r\n   */\r\n  emptyBuffer: function emptyBuffer(bytes) {\r\n    $.checkArgumentType(bytes, 'number', 'bytes');\r\n    var result = Buffer.alloc(bytes);\r\n    for (var i = 0; i < bytes; i++) {\r\n      result.write('\\0', i);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  /**\r\n   * Concatenates a buffer\r\n   *\r\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\r\n   */\r\n  concat: buffer.Buffer.concat,\r\n\r\n  equals: equals,\r\n  equal: equals,\r\n\r\n  /**\r\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\r\n   *\r\n   * @param {number} integer\r\n   * @return {Buffer}\r\n   */\r\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\r\n    $.checkArgumentType(integer, 'number', 'integer');\r\n    return Buffer.from([integer & 0xff]);\r\n  },\r\n\r\n  /**\r\n   * Transform a 4-byte integer into a Buffer of length 4.\r\n   *\r\n   * @param {number} integer\r\n   * @return {Buffer}\r\n   */\r\n  integerAsBuffer: function integerAsBuffer(integer) {\r\n    $.checkArgumentType(integer, 'number', 'integer');\r\n    var bytes = [];\r\n    bytes.push((integer >> 24) & 0xff);\r\n    bytes.push((integer >> 16) & 0xff);\r\n    bytes.push((integer >> 8) & 0xff);\r\n    bytes.push(integer & 0xff);\r\n    return Buffer.from(bytes);\r\n  },\r\n\r\n  /**\r\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @return {number}\r\n   */\r\n  integerFromBuffer: function integerFromBuffer(buffer) {\r\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\r\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\r\n  },\r\n\r\n  /**\r\n   * Transforms the first byte of an array into a number ranging from -128 to 127\r\n   * @param {Buffer} buffer\r\n   * @return {number}\r\n   */\r\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\r\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\r\n    return buffer[0];\r\n  },\r\n\r\n  /**\r\n   * Transforms a buffer into a string with a number in hexa representation\r\n   *\r\n   * Shorthand for <tt>buffer.toString('hex')</tt>\r\n   *\r\n   * @param {Buffer} buffer\r\n   * @return {string}\r\n   */\r\n  bufferToHex: function bufferToHex(buffer) {\r\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\r\n    return buffer.toString('hex');\r\n  },\r\n\r\n  /**\r\n   * Reverse a buffer\r\n   * @param {Buffer} param\r\n   * @return {Buffer}\r\n   */\r\n  reverse: function reverse(param) {\r\n    return (Buffer.from(param)).reverse();\r\n  },\r\n};\r\n\r\nmodule.exports.NULL_HASH = module.exports.fill(Buffer.alloc(32), 0);\r\nmodule.exports.EMPTY_BUFFER = Buffer.alloc(0);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}