{"ast":null,"code":"// (public) Constructor\nfunction BigInteger(a, b, c) {\n  if (!(this instanceof BigInteger)) return new BigInteger(a, b, c);\n  if (a != null) {\n    if (\"number\" == typeof a) this.fromNumber(a, b, c);else if (b == null && \"string\" != typeof a) this.fromString(a, 256);else this.fromString(a, b);\n  }\n}\nvar proto = BigInteger.prototype;\n\n// duck-typed isBigInteger\nproto.__bigi = require('../package.json').version;\nBigInteger.isBigInteger = function (obj, check_ver) {\n  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi);\n};\n\n// Bits per digit\nvar dbits;\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n    xh = x >> 15;\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n    xh = x >> 14;\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n  return c;\n}\n\n// wtf?\nBigInteger.prototype.am = am1;\ndbits = 26;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nvar DV = BigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n  var r = new BigInteger();\n  r.fromInt(i);\n  return r;\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n  var self = this;\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array\n  else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {\n    self.fromRadix(s, b);\n    return;\n  }\n  self.t = 0;\n  self.s = 0;\n  var i = s.length,\n    mi = false,\n    sh = 0;\n  while (--i >= 0) {\n    var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n    if (x < 0) {\n      if (s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if (sh == 0) self[self.t++] = x;else if (sh + k > self.DB) {\n      self[self.t - 1] |= (x & (1 << self.DB - sh) - 1) << sh;\n      self[self.t++] = x >> self.DB - sh;\n    } else self[self.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= self.DB) sh -= self.DB;\n  }\n  if (k == 8 && (s[0] & 0x80) != 0) {\n    self.s = -1;\n    if (sh > 0) self[self.t - 1] |= (1 << self.DB - sh) - 1 << sh;\n  }\n  self.clamp();\n  if (mi) BigInteger.ZERO.subTo(self, self);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  var self = this;\n  if (self.s < 0) return \"-\" + self.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return self.toRadix(b);\n  var km = (1 << k) - 1,\n    d,\n    m = false,\n    r = \"\",\n    i = self.t;\n  var p = self.DB - i * self.DB % k;\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (self[i] & (1 << p) - 1) << k - p;\n        d |= self[--i] >> (p += self.DB - k);\n      } else {\n        d = self[i] >> (p -= k) & km;\n        if (p <= 0) {\n          p += self.DB;\n          --i;\n        }\n      }\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n  return m ? r : \"0\";\n}\n\n// (public) -this\nfunction bnNegate() {\n  var r = new BigInteger();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n}\n\n// (public) |this|\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1,\n    t;\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n\n// (public) return the number of bytes in \"this\"\nfunction bnByteLength() {\n  return this.bitLength() >> 3;\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  var i;\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n  r.t = this.t + n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  var self = this;\n  var bs = n % self.DB;\n  var cbs = self.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / self.DB),\n    c = self.s << bs & self.DM,\n    i;\n  for (i = self.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = self[i] >> cbs | c;\n    c = (self[i] & bm) << bs;\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = self.t + ds + 1;\n  r.s = self.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  var self = this;\n  r.s = self.s;\n  var ds = Math.floor(n / self.DB);\n  if (ds >= self.t) {\n    r.t = 0;\n    return;\n  }\n  var bs = n % self.DB;\n  var cbs = self.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = self[ds] >> bs;\n  for (var i = ds + 1; i < self.t; ++i) {\n    r[i - ds - 1] |= (self[i] & bm) << cbs;\n    r[i - ds] = self[i] >> bs;\n  }\n  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs;\n  r.t = self.t - ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  var self = this;\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t);\n  while (i < m) {\n    c += self[i] - a[i];\n    r[i++] = c & self.DM;\n    c >>= self.DB;\n  }\n  if (a.t < self.t) {\n    c -= a.s;\n    while (i < self.t) {\n      c += self[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n    c += self.s;\n  } else {\n    c += self.s;\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n    c -= a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = self.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n    y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  var self = this;\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = self.abs();\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) self.copyTo(r);\n    return;\n  }\n  if (r == null) r = new BigInteger();\n  var y = new BigInteger(),\n    ts = self.s,\n    ms = m.s;\n  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 == 0) return;\n  var yt = y0 * (1 << self.F1) + (ys > 1 ? y[ys - 2] >> self.F2 : 0);\n  var d1 = self.FV / yt,\n    d2 = (1 << self.F1) / yt,\n    e = 1 << self.F2;\n  var i = r.t,\n    j = i - ys,\n    t = q == null ? new BigInteger() : q;\n  y.dlShiftTo(j, t);\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0;\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = new BigInteger();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n  this.m = m;\n}\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\nfunction cRevert(x) {\n  return x;\n}\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) == 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return y > 0 ? this.DV - y : -y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = new BigInteger();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = new BigInteger();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2)\n  // pad x so am has enough room later\n  x[x.t++] = 0;\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = new BigInteger(),\n    r2 = new BigInteger(),\n    g = z.convert(this),\n    i = nbits(e) - 1;\n  g.copyTo(r);\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n  var z;\n  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n  return this.exp(e, z);\n}\n\n// protected\nproto.copyTo = bnpCopyTo;\nproto.fromInt = bnpFromInt;\nproto.fromString = bnpFromString;\nproto.clamp = bnpClamp;\nproto.dlShiftTo = bnpDLShiftTo;\nproto.drShiftTo = bnpDRShiftTo;\nproto.lShiftTo = bnpLShiftTo;\nproto.rShiftTo = bnpRShiftTo;\nproto.subTo = bnpSubTo;\nproto.multiplyTo = bnpMultiplyTo;\nproto.squareTo = bnpSquareTo;\nproto.divRemTo = bnpDivRemTo;\nproto.invDigit = bnpInvDigit;\nproto.isEven = bnpIsEven;\nproto.exp = bnpExp;\n\n// public\nproto.toString = bnToString;\nproto.negate = bnNegate;\nproto.abs = bnAbs;\nproto.compareTo = bnCompareTo;\nproto.bitLength = bnBitLength;\nproto.byteLength = bnByteLength;\nproto.mod = bnMod;\nproto.modPowInt = bnModPowInt;\n\n// (public)\nfunction bnClone() {\n  var r = new BigInteger();\n  this.copyTo(r);\n  return r;\n}\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t == 0) return 0;\n  // assumes 16 < DB < 32\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n}\n\n// (public) return value as byte\nfunction bnByteValue() {\n  return this.t == 0 ? this.s : this[0] << 24 >> 24;\n}\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n  return this.t == 0 ? this.s : this[0] << 16 >> 16;\n}\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n}\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n    y = new BigInteger(),\n    z = new BigInteger(),\n    r = \"\";\n  this.divRemTo(d, y, z);\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n  var self = this;\n  self.fromInt(0);\n  if (b == null) b = 10;\n  var cs = self.chunkSize(b);\n  var d = Math.pow(b, cs),\n    mi = false,\n    j = 0,\n    w = 0;\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && self.signum() == 0) mi = true;\n      continue;\n    }\n    w = b * w + x;\n    if (++j >= cs) {\n      self.dMultiply(d);\n      self.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if (j > 0) {\n    self.dMultiply(Math.pow(b, j));\n    self.dAddOffset(w, 0);\n  }\n  if (mi) BigInteger.ZERO.subTo(self, self);\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a, b, c) {\n  var self = this;\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) self.fromInt(1);else {\n      self.fromNumber(a, c);\n      if (!self.testBit(a - 1))\n        // force MSB set\n        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self);\n      if (self.isEven()) self.dAddOffset(1, 0); // force odd\n      while (!self.isProbablePrime(b)) {\n        self.dAddOffset(2, 0);\n        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self);\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = new Array(),\n      t = a & 7;\n    x.length = (a >> 3) + 1;\n    b.nextBytes(x);\n    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n    self.fromString(x, 256);\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var self = this;\n  var i = self.t,\n    r = new Array();\n  r[0] = self.s;\n  var p = self.DB - i * self.DB % 8,\n    d,\n    k = 0;\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p) r[k++] = d | self.s << self.DB - p;\n    while (i >= 0) {\n      if (p < 8) {\n        d = (self[i] & (1 << p) - 1) << 8 - p;\n        d |= self[--i] >> (p += self.DB - 8);\n      } else {\n        d = self[i] >> (p -= 8) & 0xff;\n        if (p <= 0) {\n          p += self.DB;\n          --i;\n        }\n      }\n      if ((d & 0x80) != 0) d |= -256;\n      if (k === 0 && (self.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != self.s) r[k++] = d;\n    }\n  }\n  return r;\n}\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n}\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n  var self = this;\n  var i,\n    f,\n    m = Math.min(a.t, self.t);\n  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i]);\n  if (a.t < self.t) {\n    f = a.s & self.DM;\n    for (i = m; i < self.t; ++i) r[i] = op(self[i], f);\n    r.t = self.t;\n  } else {\n    f = self.s & self.DM;\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n    r.t = a.t;\n  }\n  r.s = op(self.s, a.s);\n  r.clamp();\n}\n\n// (public) this & a\nfunction op_and(x, y) {\n  return x & y;\n}\nfunction bnAnd(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n}\n\n// (public) this | a\nfunction op_or(x, y) {\n  return x | y;\n}\nfunction bnOr(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n}\n\n// (public) this ^ a\nfunction op_xor(x, y) {\n  return x ^ y;\n}\nfunction bnXor(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n}\n\n// (public) this & ~a\nfunction op_andnot(x, y) {\n  return x & ~y;\n}\nfunction bnAndNot(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_andnot, r);\n  return r;\n}\n\n// (public) ~this\nfunction bnNot() {\n  var r = new BigInteger();\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = new BigInteger();\n  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n  return r;\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = new BigInteger();\n  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n  return r;\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if (x == 0) return -1;\n  var r = 0;\n  if ((x & 0xffff) == 0) {\n    x >>= 16;\n    r += 16;\n  }\n  if ((x & 0xff) == 0) {\n    x >>= 8;\n    r += 8;\n  }\n  if ((x & 0xf) == 0) {\n    x >>= 4;\n    r += 4;\n  }\n  if ((x & 3) == 0) {\n    x >>= 2;\n    r += 2;\n  }\n  if ((x & 1) == 0) ++r;\n  return r;\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n  return r;\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0,\n    x = this.s & this.DM;\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n  return r;\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB);\n  if (j >= this.t) return this.s != 0;\n  return (this[j] & 1 << n % this.DB) != 0;\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r, op, r);\n  return r;\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or);\n}\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot);\n}\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor);\n}\n\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n  var self = this;\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t);\n  while (i < m) {\n    c += self[i] + a[i];\n    r[i++] = c & self.DM;\n    c >>= self.DB;\n  }\n  if (a.t < self.t) {\n    c += a.s;\n    while (i < self.t) {\n      c += self[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n    c += self.s;\n  } else {\n    c += self.s;\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n    c += a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = self.DV + c;\n  r.t = i;\n  r.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) {\n  var r = new BigInteger();\n  this.addTo(a, r);\n  return r;\n}\n\n// (public) this - a\nfunction bnSubtract(a) {\n  var r = new BigInteger();\n  this.subTo(a, r);\n  return r;\n}\n\n// (public) this * a\nfunction bnMultiply(a) {\n  var r = new BigInteger();\n  this.multiplyTo(a, r);\n  return r;\n}\n\n// (public) this^2\nfunction bnSquare() {\n  var r = new BigInteger();\n  this.squareTo(r);\n  return r;\n}\n\n// (public) this / a\nfunction bnDivide(a) {\n  var r = new BigInteger();\n  this.divRemTo(a, r, null);\n  return r;\n}\n\n// (public) this % a\nfunction bnRemainder(a) {\n  var r = new BigInteger();\n  this.divRemTo(a, null, r);\n  return r;\n}\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = new BigInteger(),\n    r = new BigInteger();\n  this.divRemTo(a, q, r);\n  return new Array(q, r);\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n  if (n == 0) return;\n  while (this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) {\n  return x;\n}\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n// (public) this^e\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n}\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while (i > 0) r[--i] = 0;\n  var j;\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n  r.clamp();\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n  while (--i >= 0) r[i] = 0;\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n  r.clamp();\n  r.drShiftTo(1, r);\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = new BigInteger();\n  this.q3 = new BigInteger();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = new BigInteger();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\nfunction barrettRevert(x) {\n  return x;\n}\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  var self = this;\n  x.drShiftTo(self.m.t - 1, self.r2);\n  if (x.t > self.m.t + 1) {\n    x.t = self.m.t + 1;\n    x.clamp();\n  }\n  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3);\n  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2);\n  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1);\n  x.subTo(self.r2, x);\n  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x);\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n    k,\n    r = nbv(1),\n    z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m);\n\n  // precomputation\n  var g = new Array(),\n    n = 3,\n    k1 = k - 1,\n    km = (1 << k) - 1;\n  g[1] = z.convert(this);\n  if (k > 1) {\n    var g2 = new BigInteger();\n    z.sqrTo(g[1], g2);\n    while (n <= km) {\n      g[n] = new BigInteger();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n  var j = e.t - 1,\n    w,\n    is1 = true,\n    r2 = new BigInteger(),\n    t;\n  i = nbits(e[j]) - 1;\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n    while ((w & 1) == 0) {\n      w >>= 1;\n      --n;\n    }\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n    while (j >= 0 && (e[j] & 1 << i) == 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n  var i = x.getLowestSetBit(),\n    g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if (n <= 0) return 0;\n  var d = this.DV % n,\n    r = this.s < 0 ? n - 1 : 0;\n  if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n  return r;\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if (this.signum() === 0) throw new Error('division by zero');\n  if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(),\n    v = this.clone();\n  var a = nbv(1),\n    b = nbv(0),\n    c = nbv(0),\n    d = nbv(1);\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u);\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a);\n          b.subTo(m, b);\n        }\n        a.rShiftTo(1, a);\n      } else if (!b.isEven()) b.subTo(m, b);\n      b.rShiftTo(1, b);\n    }\n    while (v.isEven()) {\n      v.rShiftTo(1, v);\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c);\n          d.subTo(m, d);\n        }\n        c.rShiftTo(1, c);\n      } else if (!d.isEven()) d.subTo(m, d);\n      d.rShiftTo(1, d);\n    }\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u);\n      if (ac) a.subTo(c, a);\n      b.subTo(d, b);\n    } else {\n      v.subTo(u, v);\n      if (ac) c.subTo(a, c);\n      d.subTo(b, d);\n    }\n  }\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  while (d.compareTo(m) >= 0) d.subTo(m, d);\n  while (d.signum() < 0) d.addTo(m, d);\n  return d;\n}\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i,\n    x = this.abs();\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if (x.isEven()) return false;\n  i = 1;\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n      j = i + 1;\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while (i < j) if (m % lowprimes[i++] == 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if (k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = t + 1 >> 1;\n  if (t > lowprimes.length) t = lowprimes.length;\n  var a = new BigInteger(null);\n  var j,\n    bases = [];\n  for (var i = 0; i < t; ++i) {\n    for (;;) {\n      j = lowprimes[Math.floor(Math.random() * lowprimes.length)];\n      if (bases.indexOf(j) == -1) break;\n    }\n    bases.push(j);\n    a.fromInt(j);\n    var y = a.modPow(r, this);\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this);\n        if (y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n      if (y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nproto.chunkSize = bnpChunkSize;\nproto.toRadix = bnpToRadix;\nproto.fromRadix = bnpFromRadix;\nproto.fromNumber = bnpFromNumber;\nproto.bitwiseTo = bnpBitwiseTo;\nproto.changeBit = bnpChangeBit;\nproto.addTo = bnpAddTo;\nproto.dMultiply = bnpDMultiply;\nproto.dAddOffset = bnpDAddOffset;\nproto.multiplyLowerTo = bnpMultiplyLowerTo;\nproto.multiplyUpperTo = bnpMultiplyUpperTo;\nproto.modInt = bnpModInt;\nproto.millerRabin = bnpMillerRabin;\n\n// public\nproto.clone = bnClone;\nproto.intValue = bnIntValue;\nproto.byteValue = bnByteValue;\nproto.shortValue = bnShortValue;\nproto.signum = bnSigNum;\nproto.toByteArray = bnToByteArray;\nproto.equals = bnEquals;\nproto.min = bnMin;\nproto.max = bnMax;\nproto.and = bnAnd;\nproto.or = bnOr;\nproto.xor = bnXor;\nproto.andNot = bnAndNot;\nproto.not = bnNot;\nproto.shiftLeft = bnShiftLeft;\nproto.shiftRight = bnShiftRight;\nproto.getLowestSetBit = bnGetLowestSetBit;\nproto.bitCount = bnBitCount;\nproto.testBit = bnTestBit;\nproto.setBit = bnSetBit;\nproto.clearBit = bnClearBit;\nproto.flipBit = bnFlipBit;\nproto.add = bnAdd;\nproto.subtract = bnSubtract;\nproto.multiply = bnMultiply;\nproto.divide = bnDivide;\nproto.remainder = bnRemainder;\nproto.divideAndRemainder = bnDivideAndRemainder;\nproto.modPow = bnModPow;\nproto.modInverse = bnModInverse;\nproto.pow = bnPow;\nproto.gcd = bnGCD;\nproto.isProbablePrime = bnIsProbablePrime;\n\n// JSBN-specific extension\nproto.square = bnSquare;\n\n// constants\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\nBigInteger.valueOf = nbv;\nmodule.exports = BigInteger;","map":{"version":3,"names":["BigInteger","a","b","c","fromNumber","fromString","proto","prototype","__bigi","require","version","isBigInteger","obj","check_ver","dbits","am1","i","x","w","j","n","v","Math","floor","am2","xl","xh","l","h","m","am3","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","self","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnByteLength","bitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","byteLength","modPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","Error","u","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","subtract","shiftRight","bases","random","indexOf","push","modPow","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","add","multiply","remainder","divideAndRemainder","modInverse","gcd","square","valueOf","module","exports"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/bigi/lib/bigi.js"],"sourcesContent":["// (public) Constructor\r\nfunction BigInteger(a, b, c) {\r\n  if (!(this instanceof BigInteger))\r\n    return new BigInteger(a, b, c)\r\n\r\n  if (a != null) {\r\n    if (\"number\" == typeof a) this.fromNumber(a, b, c)\r\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256)\r\n    else this.fromString(a, b)\r\n  }\r\n}\r\n\r\nvar proto = BigInteger.prototype\r\n\r\n// duck-typed isBigInteger\r\nproto.__bigi = require('../package.json').version\r\nBigInteger.isBigInteger = function (obj, check_ver) {\r\n  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)\r\n}\r\n\r\n// Bits per digit\r\nvar dbits\r\n\r\n// am: Compute w_j += (x*this_i), propagate carries,\r\n// c is initial carry, returns final carry.\r\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n// We need to select the fastest one that works in this environment.\r\n\r\n// am1: use a single mult and divide to get the high bits,\r\n// max digit bits should be 26 because\r\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\nfunction am1(i, x, w, j, c, n) {\r\n  while (--n >= 0) {\r\n    var v = x * this[i++] + w[j] + c\r\n    c = Math.floor(v / 0x4000000)\r\n    w[j++] = v & 0x3ffffff\r\n  }\r\n  return c\r\n}\r\n// am2 avoids a big mult-and-extract completely.\r\n// Max digit bits should be <= 30 because we do bitwise ops\r\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\nfunction am2(i, x, w, j, c, n) {\r\n  var xl = x & 0x7fff,\r\n    xh = x >> 15\r\n  while (--n >= 0) {\r\n    var l = this[i] & 0x7fff\r\n    var h = this[i++] >> 15\r\n    var m = xh * l + h * xl\r\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)\r\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)\r\n    w[j++] = l & 0x3fffffff\r\n  }\r\n  return c\r\n}\r\n// Alternately, set max digit bits to 28 since some\r\n// browsers slow down when dealing with 32-bit numbers.\r\nfunction am3(i, x, w, j, c, n) {\r\n  var xl = x & 0x3fff,\r\n    xh = x >> 14\r\n  while (--n >= 0) {\r\n    var l = this[i] & 0x3fff\r\n    var h = this[i++] >> 14\r\n    var m = xh * l + h * xl\r\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c\r\n    c = (l >> 28) + (m >> 14) + xh * h\r\n    w[j++] = l & 0xfffffff\r\n  }\r\n  return c\r\n}\r\n\r\n// wtf?\r\nBigInteger.prototype.am = am1\r\ndbits = 26\r\n\r\nBigInteger.prototype.DB = dbits\r\nBigInteger.prototype.DM = ((1 << dbits) - 1)\r\nvar DV = BigInteger.prototype.DV = (1 << dbits)\r\n\r\nvar BI_FP = 52\r\nBigInteger.prototype.FV = Math.pow(2, BI_FP)\r\nBigInteger.prototype.F1 = BI_FP - dbits\r\nBigInteger.prototype.F2 = 2 * dbits - BI_FP\r\n\r\n// Digit conversions\r\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\"\r\nvar BI_RC = new Array()\r\nvar rr, vv\r\nrr = \"0\".charCodeAt(0)\r\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv\r\nrr = \"a\".charCodeAt(0)\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\r\nrr = \"A\".charCodeAt(0)\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\r\n\r\nfunction int2char(n) {\r\n  return BI_RM.charAt(n)\r\n}\r\n\r\nfunction intAt(s, i) {\r\n  var c = BI_RC[s.charCodeAt(i)]\r\n  return (c == null) ? -1 : c\r\n}\r\n\r\n// (protected) copy this to r\r\nfunction bnpCopyTo(r) {\r\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]\r\n  r.t = this.t\r\n  r.s = this.s\r\n}\r\n\r\n// (protected) set from integer value x, -DV <= x < DV\r\nfunction bnpFromInt(x) {\r\n  this.t = 1\r\n  this.s = (x < 0) ? -1 : 0\r\n  if (x > 0) this[0] = x\r\n  else if (x < -1) this[0] = x + DV\r\n  else this.t = 0\r\n}\r\n\r\n// return bigint initialized to value\r\nfunction nbv(i) {\r\n  var r = new BigInteger()\r\n  r.fromInt(i)\r\n  return r\r\n}\r\n\r\n// (protected) set from string and radix\r\nfunction bnpFromString(s, b) {\r\n  var self = this\r\n\r\n  var k\r\n  if (b == 16) k = 4\r\n  else if (b == 8) k = 3\r\n  else if (b == 256) k = 8; // byte array\r\n  else if (b == 2) k = 1\r\n  else if (b == 32) k = 5\r\n  else if (b == 4) k = 2\r\n  else {\r\n    self.fromRadix(s, b)\r\n    return\r\n  }\r\n  self.t = 0\r\n  self.s = 0\r\n  var i = s.length,\r\n    mi = false,\r\n    sh = 0\r\n  while (--i >= 0) {\r\n    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)\r\n    if (x < 0) {\r\n      if (s.charAt(i) == \"-\") mi = true\r\n      continue\r\n    }\r\n    mi = false\r\n    if (sh == 0)\r\n      self[self.t++] = x\r\n    else if (sh + k > self.DB) {\r\n      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh\r\n      self[self.t++] = (x >> (self.DB - sh))\r\n    } else\r\n      self[self.t - 1] |= x << sh\r\n    sh += k\r\n    if (sh >= self.DB) sh -= self.DB\r\n  }\r\n  if (k == 8 && (s[0] & 0x80) != 0) {\r\n    self.s = -1\r\n    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh\r\n  }\r\n  self.clamp()\r\n  if (mi) BigInteger.ZERO.subTo(self, self)\r\n}\r\n\r\n// (protected) clamp off excess high words\r\nfunction bnpClamp() {\r\n  var c = this.s & this.DM\r\n  while (this.t > 0 && this[this.t - 1] == c)--this.t\r\n}\r\n\r\n// (public) return string representation in given radix\r\nfunction bnToString(b) {\r\n  var self = this\r\n  if (self.s < 0) return \"-\" + self.negate()\r\n    .toString(b)\r\n  var k\r\n  if (b == 16) k = 4\r\n  else if (b == 8) k = 3\r\n  else if (b == 2) k = 1\r\n  else if (b == 32) k = 5\r\n  else if (b == 4) k = 2\r\n  else return self.toRadix(b)\r\n  var km = (1 << k) - 1,\r\n    d, m = false,\r\n    r = \"\",\r\n    i = self.t\r\n  var p = self.DB - (i * self.DB) % k\r\n  if (i-- > 0) {\r\n    if (p < self.DB && (d = self[i] >> p) > 0) {\r\n      m = true\r\n      r = int2char(d)\r\n    }\r\n    while (i >= 0) {\r\n      if (p < k) {\r\n        d = (self[i] & ((1 << p) - 1)) << (k - p)\r\n        d |= self[--i] >> (p += self.DB - k)\r\n      } else {\r\n        d = (self[i] >> (p -= k)) & km\r\n        if (p <= 0) {\r\n          p += self.DB\r\n          --i\r\n        }\r\n      }\r\n      if (d > 0) m = true\r\n      if (m) r += int2char(d)\r\n    }\r\n  }\r\n  return m ? r : \"0\"\r\n}\r\n\r\n// (public) -this\r\nfunction bnNegate() {\r\n  var r = new BigInteger()\r\n  BigInteger.ZERO.subTo(this, r)\r\n  return r\r\n}\r\n\r\n// (public) |this|\r\nfunction bnAbs() {\r\n  return (this.s < 0) ? this.negate() : this\r\n}\r\n\r\n// (public) return + if this > a, - if this < a, 0 if equal\r\nfunction bnCompareTo(a) {\r\n  var r = this.s - a.s\r\n  if (r != 0) return r\r\n  var i = this.t\r\n  r = i - a.t\r\n  if (r != 0) return (this.s < 0) ? -r : r\r\n  while (--i >= 0)\r\n    if ((r = this[i] - a[i]) != 0) return r\r\n  return 0\r\n}\r\n\r\n// returns bit length of the integer x\r\nfunction nbits(x) {\r\n  var r = 1,\r\n    t\r\n  if ((t = x >>> 16) != 0) {\r\n    x = t\r\n    r += 16\r\n  }\r\n  if ((t = x >> 8) != 0) {\r\n    x = t\r\n    r += 8\r\n  }\r\n  if ((t = x >> 4) != 0) {\r\n    x = t\r\n    r += 4\r\n  }\r\n  if ((t = x >> 2) != 0) {\r\n    x = t\r\n    r += 2\r\n  }\r\n  if ((t = x >> 1) != 0) {\r\n    x = t\r\n    r += 1\r\n  }\r\n  return r\r\n}\r\n\r\n// (public) return the number of bits in \"this\"\r\nfunction bnBitLength() {\r\n  if (this.t <= 0) return 0\r\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))\r\n}\r\n\r\n// (public) return the number of bytes in \"this\"\r\nfunction bnByteLength() {\r\n  return this.bitLength() >> 3\r\n}\r\n\r\n// (protected) r = this << n*DB\r\nfunction bnpDLShiftTo(n, r) {\r\n  var i\r\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]\r\n  for (i = n - 1; i >= 0; --i) r[i] = 0\r\n  r.t = this.t + n\r\n  r.s = this.s\r\n}\r\n\r\n// (protected) r = this >> n*DB\r\nfunction bnpDRShiftTo(n, r) {\r\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i]\r\n  r.t = Math.max(this.t - n, 0)\r\n  r.s = this.s\r\n}\r\n\r\n// (protected) r = this << n\r\nfunction bnpLShiftTo(n, r) {\r\n  var self = this\r\n  var bs = n % self.DB\r\n  var cbs = self.DB - bs\r\n  var bm = (1 << cbs) - 1\r\n  var ds = Math.floor(n / self.DB),\r\n    c = (self.s << bs) & self.DM,\r\n    i\r\n  for (i = self.t - 1; i >= 0; --i) {\r\n    r[i + ds + 1] = (self[i] >> cbs) | c\r\n    c = (self[i] & bm) << bs\r\n  }\r\n  for (i = ds - 1; i >= 0; --i) r[i] = 0\r\n  r[ds] = c\r\n  r.t = self.t + ds + 1\r\n  r.s = self.s\r\n  r.clamp()\r\n}\r\n\r\n// (protected) r = this >> n\r\nfunction bnpRShiftTo(n, r) {\r\n  var self = this\r\n  r.s = self.s\r\n  var ds = Math.floor(n / self.DB)\r\n  if (ds >= self.t) {\r\n    r.t = 0\r\n    return\r\n  }\r\n  var bs = n % self.DB\r\n  var cbs = self.DB - bs\r\n  var bm = (1 << bs) - 1\r\n  r[0] = self[ds] >> bs\r\n  for (var i = ds + 1; i < self.t; ++i) {\r\n    r[i - ds - 1] |= (self[i] & bm) << cbs\r\n    r[i - ds] = self[i] >> bs\r\n  }\r\n  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs\r\n  r.t = self.t - ds\r\n  r.clamp()\r\n}\r\n\r\n// (protected) r = this - a\r\nfunction bnpSubTo(a, r) {\r\n  var self = this\r\n  var i = 0,\r\n    c = 0,\r\n    m = Math.min(a.t, self.t)\r\n  while (i < m) {\r\n    c += self[i] - a[i]\r\n    r[i++] = c & self.DM\r\n    c >>= self.DB\r\n  }\r\n  if (a.t < self.t) {\r\n    c -= a.s\r\n    while (i < self.t) {\r\n      c += self[i]\r\n      r[i++] = c & self.DM\r\n      c >>= self.DB\r\n    }\r\n    c += self.s\r\n  } else {\r\n    c += self.s\r\n    while (i < a.t) {\r\n      c -= a[i]\r\n      r[i++] = c & self.DM\r\n      c >>= self.DB\r\n    }\r\n    c -= a.s\r\n  }\r\n  r.s = (c < 0) ? -1 : 0\r\n  if (c < -1) r[i++] = self.DV + c\r\n  else if (c > 0) r[i++] = c\r\n  r.t = i\r\n  r.clamp()\r\n}\r\n\r\n// (protected) r = this * a, r != this,a (HAC 14.12)\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyTo(a, r) {\r\n  var x = this.abs(),\r\n    y = a.abs()\r\n  var i = x.t\r\n  r.t = i + y.t\r\n  while (--i >= 0) r[i] = 0\r\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)\r\n  r.s = 0\r\n  r.clamp()\r\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)\r\n}\r\n\r\n// (protected) r = this^2, r != this (HAC 14.16)\r\nfunction bnpSquareTo(r) {\r\n  var x = this.abs()\r\n  var i = r.t = 2 * x.t\r\n  while (--i >= 0) r[i] = 0\r\n  for (i = 0; i < x.t - 1; ++i) {\r\n    var c = x.am(i, x[i], r, 2 * i, 0, 1)\r\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\r\n      r[i + x.t] -= x.DV\r\n      r[i + x.t + 1] = 1\r\n    }\r\n  }\r\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)\r\n  r.s = 0\r\n  r.clamp()\r\n}\r\n\r\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n// r != q, this != m.  q or r may be null.\r\nfunction bnpDivRemTo(m, q, r) {\r\n  var self = this\r\n  var pm = m.abs()\r\n  if (pm.t <= 0) return\r\n  var pt = self.abs()\r\n  if (pt.t < pm.t) {\r\n    if (q != null) q.fromInt(0)\r\n    if (r != null) self.copyTo(r)\r\n    return\r\n  }\r\n  if (r == null) r = new BigInteger()\r\n  var y = new BigInteger(),\r\n    ts = self.s,\r\n    ms = m.s\r\n  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus\r\n  if (nsh > 0) {\r\n    pm.lShiftTo(nsh, y)\r\n    pt.lShiftTo(nsh, r)\r\n  } else {\r\n    pm.copyTo(y)\r\n    pt.copyTo(r)\r\n  }\r\n  var ys = y.t\r\n  var y0 = y[ys - 1]\r\n  if (y0 == 0) return\r\n  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)\r\n  var d1 = self.FV / yt,\r\n    d2 = (1 << self.F1) / yt,\r\n    e = 1 << self.F2\r\n  var i = r.t,\r\n    j = i - ys,\r\n    t = (q == null) ? new BigInteger() : q\r\n  y.dlShiftTo(j, t)\r\n  if (r.compareTo(t) >= 0) {\r\n    r[r.t++] = 1\r\n    r.subTo(t, r)\r\n  }\r\n  BigInteger.ONE.dlShiftTo(ys, t)\r\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\r\n  while (y.t < ys) y[y.t++] = 0\r\n  while (--j >= 0) {\r\n    // Estimate quotient digit\r\n    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)\r\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\r\n      y.dlShiftTo(j, t)\r\n      r.subTo(t, r)\r\n      while (r[i] < --qd) r.subTo(t, r)\r\n    }\r\n  }\r\n  if (q != null) {\r\n    r.drShiftTo(ys, q)\r\n    if (ts != ms) BigInteger.ZERO.subTo(q, q)\r\n  }\r\n  r.t = ys\r\n  r.clamp()\r\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\r\n  if (ts < 0) BigInteger.ZERO.subTo(r, r)\r\n}\r\n\r\n// (public) this mod a\r\nfunction bnMod(a) {\r\n  var r = new BigInteger()\r\n  this.abs()\r\n    .divRemTo(a, null, r)\r\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)\r\n  return r\r\n}\r\n\r\n// Modular reduction using \"classic\" algorithm\r\nfunction Classic(m) {\r\n  this.m = m\r\n}\r\n\r\nfunction cConvert(x) {\r\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)\r\n  else return x\r\n}\r\n\r\nfunction cRevert(x) {\r\n  return x\r\n}\r\n\r\nfunction cReduce(x) {\r\n  x.divRemTo(this.m, null, x)\r\n}\r\n\r\nfunction cMulTo(x, y, r) {\r\n  x.multiplyTo(y, r)\r\n  this.reduce(r)\r\n}\r\n\r\nfunction cSqrTo(x, r) {\r\n  x.squareTo(r)\r\n  this.reduce(r)\r\n}\r\n\r\nClassic.prototype.convert = cConvert\r\nClassic.prototype.revert = cRevert\r\nClassic.prototype.reduce = cReduce\r\nClassic.prototype.mulTo = cMulTo\r\nClassic.prototype.sqrTo = cSqrTo\r\n\r\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n// justification:\r\n//         xy == 1 (mod m)\r\n//         xy =  1+km\r\n//   xy(2-xy) = (1+km)(1-km)\r\n// x[y(2-xy)] = 1-k^2m^2\r\n// x[y(2-xy)] == 1 (mod m^2)\r\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\nfunction bnpInvDigit() {\r\n  if (this.t < 1) return 0\r\n  var x = this[0]\r\n  if ((x & 1) == 0) return 0\r\n  var y = x & 3; // y == 1/x mod 2^2\r\n  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\r\n  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\r\n  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\r\n  // last step - calculate inverse mod DV directly\r\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\r\n  // we really want the negative inverse, and -DV < y < DV\r\n  return (y > 0) ? this.DV - y : -y\r\n}\r\n\r\n// Montgomery reduction\r\nfunction Montgomery(m) {\r\n  this.m = m\r\n  this.mp = m.invDigit()\r\n  this.mpl = this.mp & 0x7fff\r\n  this.mph = this.mp >> 15\r\n  this.um = (1 << (m.DB - 15)) - 1\r\n  this.mt2 = 2 * m.t\r\n}\r\n\r\n// xR mod m\r\nfunction montConvert(x) {\r\n  var r = new BigInteger()\r\n  x.abs()\r\n    .dlShiftTo(this.m.t, r)\r\n  r.divRemTo(this.m, null, r)\r\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\r\n  return r\r\n}\r\n\r\n// x/R mod m\r\nfunction montRevert(x) {\r\n  var r = new BigInteger()\r\n  x.copyTo(r)\r\n  this.reduce(r)\r\n  return r\r\n}\r\n\r\n// x = x/R mod m (HAC 14.32)\r\nfunction montReduce(x) {\r\n  while (x.t <= this.mt2) // pad x so am has enough room later\r\n    x[x.t++] = 0\r\n  for (var i = 0; i < this.m.t; ++i) {\r\n    // faster way of calculating u0 = x[i]*mp mod DV\r\n    var j = x[i] & 0x7fff\r\n    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM\r\n    // use am to combine the multiply-shift-add into one call\r\n    j = i + this.m.t\r\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)\r\n    // propagate carry\r\n    while (x[j] >= x.DV) {\r\n      x[j] -= x.DV\r\n      x[++j]++\r\n    }\r\n  }\r\n  x.clamp()\r\n  x.drShiftTo(this.m.t, x)\r\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\r\n}\r\n\r\n// r = \"x^2/R mod m\"; x != r\r\nfunction montSqrTo(x, r) {\r\n  x.squareTo(r)\r\n  this.reduce(r)\r\n}\r\n\r\n// r = \"xy/R mod m\"; x,y != r\r\nfunction montMulTo(x, y, r) {\r\n  x.multiplyTo(y, r)\r\n  this.reduce(r)\r\n}\r\n\r\nMontgomery.prototype.convert = montConvert\r\nMontgomery.prototype.revert = montRevert\r\nMontgomery.prototype.reduce = montReduce\r\nMontgomery.prototype.mulTo = montMulTo\r\nMontgomery.prototype.sqrTo = montSqrTo\r\n\r\n// (protected) true iff this is even\r\nfunction bnpIsEven() {\r\n  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0\r\n}\r\n\r\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\nfunction bnpExp(e, z) {\r\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE\r\n  var r = new BigInteger(),\r\n    r2 = new BigInteger(),\r\n    g = z.convert(this),\r\n    i = nbits(e) - 1\r\n  g.copyTo(r)\r\n  while (--i >= 0) {\r\n    z.sqrTo(r, r2)\r\n    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)\r\n    else {\r\n      var t = r\r\n      r = r2\r\n      r2 = t\r\n    }\r\n  }\r\n  return z.revert(r)\r\n}\r\n\r\n// (public) this^e % m, 0 <= e < 2^32\r\nfunction bnModPowInt(e, m) {\r\n  var z\r\n  if (e < 256 || m.isEven()) z = new Classic(m)\r\n  else z = new Montgomery(m)\r\n  return this.exp(e, z)\r\n}\r\n\r\n// protected\r\nproto.copyTo = bnpCopyTo\r\nproto.fromInt = bnpFromInt\r\nproto.fromString = bnpFromString\r\nproto.clamp = bnpClamp\r\nproto.dlShiftTo = bnpDLShiftTo\r\nproto.drShiftTo = bnpDRShiftTo\r\nproto.lShiftTo = bnpLShiftTo\r\nproto.rShiftTo = bnpRShiftTo\r\nproto.subTo = bnpSubTo\r\nproto.multiplyTo = bnpMultiplyTo\r\nproto.squareTo = bnpSquareTo\r\nproto.divRemTo = bnpDivRemTo\r\nproto.invDigit = bnpInvDigit\r\nproto.isEven = bnpIsEven\r\nproto.exp = bnpExp\r\n\r\n// public\r\nproto.toString = bnToString\r\nproto.negate = bnNegate\r\nproto.abs = bnAbs\r\nproto.compareTo = bnCompareTo\r\nproto.bitLength = bnBitLength\r\nproto.byteLength = bnByteLength\r\nproto.mod = bnMod\r\nproto.modPowInt = bnModPowInt\r\n\r\n// (public)\r\nfunction bnClone() {\r\n  var r = new BigInteger()\r\n  this.copyTo(r)\r\n  return r\r\n}\r\n\r\n// (public) return value as integer\r\nfunction bnIntValue() {\r\n  if (this.s < 0) {\r\n    if (this.t == 1) return this[0] - this.DV\r\n    else if (this.t == 0) return -1\r\n  } else if (this.t == 1) return this[0]\r\n  else if (this.t == 0) return 0\r\n  // assumes 16 < DB < 32\r\n  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]\r\n}\r\n\r\n// (public) return value as byte\r\nfunction bnByteValue() {\r\n  return (this.t == 0) ? this.s : (this[0] << 24) >> 24\r\n}\r\n\r\n// (public) return value as short (assumes DB>=16)\r\nfunction bnShortValue() {\r\n  return (this.t == 0) ? this.s : (this[0] << 16) >> 16\r\n}\r\n\r\n// (protected) return x s.t. r^x < DV\r\nfunction bnpChunkSize(r) {\r\n  return Math.floor(Math.LN2 * this.DB / Math.log(r))\r\n}\r\n\r\n// (public) 0 if this == 0, 1 if this > 0\r\nfunction bnSigNum() {\r\n  if (this.s < 0) return -1\r\n  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0\r\n  else return 1\r\n}\r\n\r\n// (protected) convert to radix string\r\nfunction bnpToRadix(b) {\r\n  if (b == null) b = 10\r\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\"\r\n  var cs = this.chunkSize(b)\r\n  var a = Math.pow(b, cs)\r\n  var d = nbv(a),\r\n    y = new BigInteger(),\r\n    z = new BigInteger(),\r\n    r = \"\"\r\n  this.divRemTo(d, y, z)\r\n  while (y.signum() > 0) {\r\n    r = (a + z.intValue())\r\n      .toString(b)\r\n      .substr(1) + r\r\n    y.divRemTo(d, y, z)\r\n  }\r\n  return z.intValue()\r\n    .toString(b) + r\r\n}\r\n\r\n// (protected) convert from radix string\r\nfunction bnpFromRadix(s, b) {\r\n  var self = this\r\n  self.fromInt(0)\r\n  if (b == null) b = 10\r\n  var cs = self.chunkSize(b)\r\n  var d = Math.pow(b, cs),\r\n    mi = false,\r\n    j = 0,\r\n    w = 0\r\n  for (var i = 0; i < s.length; ++i) {\r\n    var x = intAt(s, i)\r\n    if (x < 0) {\r\n      if (s.charAt(i) == \"-\" && self.signum() == 0) mi = true\r\n      continue\r\n    }\r\n    w = b * w + x\r\n    if (++j >= cs) {\r\n      self.dMultiply(d)\r\n      self.dAddOffset(w, 0)\r\n      j = 0\r\n      w = 0\r\n    }\r\n  }\r\n  if (j > 0) {\r\n    self.dMultiply(Math.pow(b, j))\r\n    self.dAddOffset(w, 0)\r\n  }\r\n  if (mi) BigInteger.ZERO.subTo(self, self)\r\n}\r\n\r\n// (protected) alternate constructor\r\nfunction bnpFromNumber(a, b, c) {\r\n  var self = this\r\n  if (\"number\" == typeof b) {\r\n    // new BigInteger(int,int,RNG)\r\n    if (a < 2) self.fromInt(1)\r\n    else {\r\n      self.fromNumber(a, c)\r\n      if (!self.testBit(a - 1)) // force MSB set\r\n        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)\r\n      if (self.isEven()) self.dAddOffset(1, 0); // force odd\r\n      while (!self.isProbablePrime(b)) {\r\n        self.dAddOffset(2, 0)\r\n        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)\r\n      }\r\n    }\r\n  } else {\r\n    // new BigInteger(int,RNG)\r\n    var x = new Array(),\r\n      t = a & 7\r\n    x.length = (a >> 3) + 1\r\n    b.nextBytes(x)\r\n    if (t > 0) x[0] &= ((1 << t) - 1)\r\n    else x[0] = 0\r\n    self.fromString(x, 256)\r\n  }\r\n}\r\n\r\n// (public) convert to bigendian byte array\r\nfunction bnToByteArray() {\r\n  var self = this\r\n  var i = self.t,\r\n    r = new Array()\r\n  r[0] = self.s\r\n  var p = self.DB - (i * self.DB) % 8,\r\n    d, k = 0\r\n  if (i-- > 0) {\r\n    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)\r\n      r[k++] = d | (self.s << (self.DB - p))\r\n    while (i >= 0) {\r\n      if (p < 8) {\r\n        d = (self[i] & ((1 << p) - 1)) << (8 - p)\r\n        d |= self[--i] >> (p += self.DB - 8)\r\n      } else {\r\n        d = (self[i] >> (p -= 8)) & 0xff\r\n        if (p <= 0) {\r\n          p += self.DB\r\n          --i\r\n        }\r\n      }\r\n      if ((d & 0x80) != 0) d |= -256\r\n      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k\r\n      if (k > 0 || d != self.s) r[k++] = d\r\n    }\r\n  }\r\n  return r\r\n}\r\n\r\nfunction bnEquals(a) {\r\n  return (this.compareTo(a) == 0)\r\n}\r\n\r\nfunction bnMin(a) {\r\n  return (this.compareTo(a) < 0) ? this : a\r\n}\r\n\r\nfunction bnMax(a) {\r\n  return (this.compareTo(a) > 0) ? this : a\r\n}\r\n\r\n// (protected) r = this op a (bitwise)\r\nfunction bnpBitwiseTo(a, op, r) {\r\n  var self = this\r\n  var i, f, m = Math.min(a.t, self.t)\r\n  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])\r\n  if (a.t < self.t) {\r\n    f = a.s & self.DM\r\n    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)\r\n    r.t = self.t\r\n  } else {\r\n    f = self.s & self.DM\r\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])\r\n    r.t = a.t\r\n  }\r\n  r.s = op(self.s, a.s)\r\n  r.clamp()\r\n}\r\n\r\n// (public) this & a\r\nfunction op_and(x, y) {\r\n  return x & y\r\n}\r\n\r\nfunction bnAnd(a) {\r\n  var r = new BigInteger()\r\n  this.bitwiseTo(a, op_and, r)\r\n  return r\r\n}\r\n\r\n// (public) this | a\r\nfunction op_or(x, y) {\r\n  return x | y\r\n}\r\n\r\nfunction bnOr(a) {\r\n  var r = new BigInteger()\r\n  this.bitwiseTo(a, op_or, r)\r\n  return r\r\n}\r\n\r\n// (public) this ^ a\r\nfunction op_xor(x, y) {\r\n  return x ^ y\r\n}\r\n\r\nfunction bnXor(a) {\r\n  var r = new BigInteger()\r\n  this.bitwiseTo(a, op_xor, r)\r\n  return r\r\n}\r\n\r\n// (public) this & ~a\r\nfunction op_andnot(x, y) {\r\n  return x & ~y\r\n}\r\n\r\nfunction bnAndNot(a) {\r\n  var r = new BigInteger()\r\n  this.bitwiseTo(a, op_andnot, r)\r\n  return r\r\n}\r\n\r\n// (public) ~this\r\nfunction bnNot() {\r\n  var r = new BigInteger()\r\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]\r\n  r.t = this.t\r\n  r.s = ~this.s\r\n  return r\r\n}\r\n\r\n// (public) this << n\r\nfunction bnShiftLeft(n) {\r\n  var r = new BigInteger()\r\n  if (n < 0) this.rShiftTo(-n, r)\r\n  else this.lShiftTo(n, r)\r\n  return r\r\n}\r\n\r\n// (public) this >> n\r\nfunction bnShiftRight(n) {\r\n  var r = new BigInteger()\r\n  if (n < 0) this.lShiftTo(-n, r)\r\n  else this.rShiftTo(n, r)\r\n  return r\r\n}\r\n\r\n// return index of lowest 1-bit in x, x < 2^31\r\nfunction lbit(x) {\r\n  if (x == 0) return -1\r\n  var r = 0\r\n  if ((x & 0xffff) == 0) {\r\n    x >>= 16\r\n    r += 16\r\n  }\r\n  if ((x & 0xff) == 0) {\r\n    x >>= 8\r\n    r += 8\r\n  }\r\n  if ((x & 0xf) == 0) {\r\n    x >>= 4\r\n    r += 4\r\n  }\r\n  if ((x & 3) == 0) {\r\n    x >>= 2\r\n    r += 2\r\n  }\r\n  if ((x & 1) == 0)++r\r\n  return r\r\n}\r\n\r\n// (public) returns index of lowest 1-bit (or -1 if none)\r\nfunction bnGetLowestSetBit() {\r\n  for (var i = 0; i < this.t; ++i)\r\n    if (this[i] != 0) return i * this.DB + lbit(this[i])\r\n  if (this.s < 0) return this.t * this.DB\r\n  return -1\r\n}\r\n\r\n// return number of 1 bits in x\r\nfunction cbit(x) {\r\n  var r = 0\r\n  while (x != 0) {\r\n    x &= x - 1\r\n    ++r\r\n  }\r\n  return r\r\n}\r\n\r\n// (public) return number of set bits\r\nfunction bnBitCount() {\r\n  var r = 0,\r\n    x = this.s & this.DM\r\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)\r\n  return r\r\n}\r\n\r\n// (public) true iff nth bit is set\r\nfunction bnTestBit(n) {\r\n  var j = Math.floor(n / this.DB)\r\n  if (j >= this.t) return (this.s != 0)\r\n  return ((this[j] & (1 << (n % this.DB))) != 0)\r\n}\r\n\r\n// (protected) this op (1<<n)\r\nfunction bnpChangeBit(n, op) {\r\n  var r = BigInteger.ONE.shiftLeft(n)\r\n  this.bitwiseTo(r, op, r)\r\n  return r\r\n}\r\n\r\n// (public) this | (1<<n)\r\nfunction bnSetBit(n) {\r\n  return this.changeBit(n, op_or)\r\n}\r\n\r\n// (public) this & ~(1<<n)\r\nfunction bnClearBit(n) {\r\n  return this.changeBit(n, op_andnot)\r\n}\r\n\r\n// (public) this ^ (1<<n)\r\nfunction bnFlipBit(n) {\r\n  return this.changeBit(n, op_xor)\r\n}\r\n\r\n// (protected) r = this + a\r\nfunction bnpAddTo(a, r) {\r\n  var self = this\r\n\r\n  var i = 0,\r\n    c = 0,\r\n    m = Math.min(a.t, self.t)\r\n  while (i < m) {\r\n    c += self[i] + a[i]\r\n    r[i++] = c & self.DM\r\n    c >>= self.DB\r\n  }\r\n  if (a.t < self.t) {\r\n    c += a.s\r\n    while (i < self.t) {\r\n      c += self[i]\r\n      r[i++] = c & self.DM\r\n      c >>= self.DB\r\n    }\r\n    c += self.s\r\n  } else {\r\n    c += self.s\r\n    while (i < a.t) {\r\n      c += a[i]\r\n      r[i++] = c & self.DM\r\n      c >>= self.DB\r\n    }\r\n    c += a.s\r\n  }\r\n  r.s = (c < 0) ? -1 : 0\r\n  if (c > 0) r[i++] = c\r\n  else if (c < -1) r[i++] = self.DV + c\r\n  r.t = i\r\n  r.clamp()\r\n}\r\n\r\n// (public) this + a\r\nfunction bnAdd(a) {\r\n  var r = new BigInteger()\r\n  this.addTo(a, r)\r\n  return r\r\n}\r\n\r\n// (public) this - a\r\nfunction bnSubtract(a) {\r\n  var r = new BigInteger()\r\n  this.subTo(a, r)\r\n  return r\r\n}\r\n\r\n// (public) this * a\r\nfunction bnMultiply(a) {\r\n  var r = new BigInteger()\r\n  this.multiplyTo(a, r)\r\n  return r\r\n}\r\n\r\n// (public) this^2\r\nfunction bnSquare() {\r\n  var r = new BigInteger()\r\n  this.squareTo(r)\r\n  return r\r\n}\r\n\r\n// (public) this / a\r\nfunction bnDivide(a) {\r\n  var r = new BigInteger()\r\n  this.divRemTo(a, r, null)\r\n  return r\r\n}\r\n\r\n// (public) this % a\r\nfunction bnRemainder(a) {\r\n  var r = new BigInteger()\r\n  this.divRemTo(a, null, r)\r\n  return r\r\n}\r\n\r\n// (public) [this/a,this%a]\r\nfunction bnDivideAndRemainder(a) {\r\n  var q = new BigInteger(),\r\n    r = new BigInteger()\r\n  this.divRemTo(a, q, r)\r\n  return new Array(q, r)\r\n}\r\n\r\n// (protected) this *= n, this >= 0, 1 < n < DV\r\nfunction bnpDMultiply(n) {\r\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)\r\n  ++this.t\r\n  this.clamp()\r\n}\r\n\r\n// (protected) this += n << w words, this >= 0\r\nfunction bnpDAddOffset(n, w) {\r\n  if (n == 0) return\r\n  while (this.t <= w) this[this.t++] = 0\r\n  this[w] += n\r\n  while (this[w] >= this.DV) {\r\n    this[w] -= this.DV\r\n    if (++w >= this.t) this[this.t++] = 0\r\n    ++this[w]\r\n  }\r\n}\r\n\r\n// A \"null\" reducer\r\nfunction NullExp() {}\r\n\r\nfunction nNop(x) {\r\n  return x\r\n}\r\n\r\nfunction nMulTo(x, y, r) {\r\n  x.multiplyTo(y, r)\r\n}\r\n\r\nfunction nSqrTo(x, r) {\r\n  x.squareTo(r)\r\n}\r\n\r\nNullExp.prototype.convert = nNop\r\nNullExp.prototype.revert = nNop\r\nNullExp.prototype.mulTo = nMulTo\r\nNullExp.prototype.sqrTo = nSqrTo\r\n\r\n// (public) this^e\r\nfunction bnPow(e) {\r\n  return this.exp(e, new NullExp())\r\n}\r\n\r\n// (protected) r = lower n words of \"this * a\", a.t <= n\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyLowerTo(a, n, r) {\r\n  var i = Math.min(this.t + a.t, n)\r\n  r.s = 0; // assumes a,this >= 0\r\n  r.t = i\r\n  while (i > 0) r[--i] = 0\r\n  var j\r\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)\r\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)\r\n  r.clamp()\r\n}\r\n\r\n// (protected) r = \"this * a\" without lower n words, n > 0\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyUpperTo(a, n, r) {\r\n  --n\r\n  var i = r.t = this.t + a.t - n\r\n  r.s = 0; // assumes a,this >= 0\r\n  while (--i >= 0) r[i] = 0\r\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i)\r\n    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)\r\n  r.clamp()\r\n  r.drShiftTo(1, r)\r\n}\r\n\r\n// Barrett modular reduction\r\nfunction Barrett(m) {\r\n  // setup Barrett\r\n  this.r2 = new BigInteger()\r\n  this.q3 = new BigInteger()\r\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)\r\n  this.mu = this.r2.divide(m)\r\n  this.m = m\r\n}\r\n\r\nfunction barrettConvert(x) {\r\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)\r\n  else if (x.compareTo(this.m) < 0) return x\r\n  else {\r\n    var r = new BigInteger()\r\n    x.copyTo(r)\r\n    this.reduce(r)\r\n    return r\r\n  }\r\n}\r\n\r\nfunction barrettRevert(x) {\r\n  return x\r\n}\r\n\r\n// x = x mod m (HAC 14.42)\r\nfunction barrettReduce(x) {\r\n  var self = this\r\n  x.drShiftTo(self.m.t - 1, self.r2)\r\n  if (x.t > self.m.t + 1) {\r\n    x.t = self.m.t + 1\r\n    x.clamp()\r\n  }\r\n  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)\r\n  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)\r\n  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)\r\n  x.subTo(self.r2, x)\r\n  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)\r\n}\r\n\r\n// r = x^2 mod m; x != r\r\nfunction barrettSqrTo(x, r) {\r\n  x.squareTo(r)\r\n  this.reduce(r)\r\n}\r\n\r\n// r = x*y mod m; x,y != r\r\nfunction barrettMulTo(x, y, r) {\r\n  x.multiplyTo(y, r)\r\n  this.reduce(r)\r\n}\r\n\r\nBarrett.prototype.convert = barrettConvert\r\nBarrett.prototype.revert = barrettRevert\r\nBarrett.prototype.reduce = barrettReduce\r\nBarrett.prototype.mulTo = barrettMulTo\r\nBarrett.prototype.sqrTo = barrettSqrTo\r\n\r\n// (public) this^e % m (HAC 14.85)\r\nfunction bnModPow(e, m) {\r\n  var i = e.bitLength(),\r\n    k, r = nbv(1),\r\n    z\r\n  if (i <= 0) return r\r\n  else if (i < 18) k = 1\r\n  else if (i < 48) k = 3\r\n  else if (i < 144) k = 4\r\n  else if (i < 768) k = 5\r\n  else k = 6\r\n  if (i < 8)\r\n    z = new Classic(m)\r\n  else if (m.isEven())\r\n    z = new Barrett(m)\r\n  else\r\n    z = new Montgomery(m)\r\n\r\n  // precomputation\r\n  var g = new Array(),\r\n    n = 3,\r\n    k1 = k - 1,\r\n    km = (1 << k) - 1\r\n  g[1] = z.convert(this)\r\n  if (k > 1) {\r\n    var g2 = new BigInteger()\r\n    z.sqrTo(g[1], g2)\r\n    while (n <= km) {\r\n      g[n] = new BigInteger()\r\n      z.mulTo(g2, g[n - 2], g[n])\r\n      n += 2\r\n    }\r\n  }\r\n\r\n  var j = e.t - 1,\r\n    w, is1 = true,\r\n    r2 = new BigInteger(),\r\n    t\r\n  i = nbits(e[j]) - 1\r\n  while (j >= 0) {\r\n    if (i >= k1) w = (e[j] >> (i - k1)) & km\r\n    else {\r\n      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)\r\n      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)\r\n    }\r\n\r\n    n = k\r\n    while ((w & 1) == 0) {\r\n      w >>= 1\r\n      --n\r\n    }\r\n    if ((i -= n) < 0) {\r\n      i += this.DB\r\n      --j\r\n    }\r\n    if (is1) { // ret == 1, don't bother squaring or multiplying it\r\n      g[w].copyTo(r)\r\n      is1 = false\r\n    } else {\r\n      while (n > 1) {\r\n        z.sqrTo(r, r2)\r\n        z.sqrTo(r2, r)\r\n        n -= 2\r\n      }\r\n      if (n > 0) z.sqrTo(r, r2)\r\n      else {\r\n        t = r\r\n        r = r2\r\n        r2 = t\r\n      }\r\n      z.mulTo(r2, g[w], r)\r\n    }\r\n\r\n    while (j >= 0 && (e[j] & (1 << i)) == 0) {\r\n      z.sqrTo(r, r2)\r\n      t = r\r\n      r = r2\r\n      r2 = t\r\n      if (--i < 0) {\r\n        i = this.DB - 1\r\n        --j\r\n      }\r\n    }\r\n  }\r\n  return z.revert(r)\r\n}\r\n\r\n// (public) gcd(this,a) (HAC 14.54)\r\nfunction bnGCD(a) {\r\n  var x = (this.s < 0) ? this.negate() : this.clone()\r\n  var y = (a.s < 0) ? a.negate() : a.clone()\r\n  if (x.compareTo(y) < 0) {\r\n    var t = x\r\n    x = y\r\n    y = t\r\n  }\r\n  var i = x.getLowestSetBit(),\r\n    g = y.getLowestSetBit()\r\n  if (g < 0) return x\r\n  if (i < g) g = i\r\n  if (g > 0) {\r\n    x.rShiftTo(g, x)\r\n    y.rShiftTo(g, y)\r\n  }\r\n  while (x.signum() > 0) {\r\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)\r\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)\r\n    if (x.compareTo(y) >= 0) {\r\n      x.subTo(y, x)\r\n      x.rShiftTo(1, x)\r\n    } else {\r\n      y.subTo(x, y)\r\n      y.rShiftTo(1, y)\r\n    }\r\n  }\r\n  if (g > 0) y.lShiftTo(g, y)\r\n  return y\r\n}\r\n\r\n// (protected) this % n, n < 2^26\r\nfunction bnpModInt(n) {\r\n  if (n <= 0) return 0\r\n  var d = this.DV % n,\r\n    r = (this.s < 0) ? n - 1 : 0\r\n  if (this.t > 0)\r\n    if (d == 0) r = this[0] % n\r\n    else\r\n      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n\r\n  return r\r\n}\r\n\r\n// (public) 1/this % m (HAC 14.61)\r\nfunction bnModInverse(m) {\r\n  var ac = m.isEven()\r\n  if (this.signum() === 0) throw new Error('division by zero')\r\n  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO\r\n  var u = m.clone(),\r\n    v = this.clone()\r\n  var a = nbv(1),\r\n    b = nbv(0),\r\n    c = nbv(0),\r\n    d = nbv(1)\r\n  while (u.signum() != 0) {\r\n    while (u.isEven()) {\r\n      u.rShiftTo(1, u)\r\n      if (ac) {\r\n        if (!a.isEven() || !b.isEven()) {\r\n          a.addTo(this, a)\r\n          b.subTo(m, b)\r\n        }\r\n        a.rShiftTo(1, a)\r\n      } else if (!b.isEven()) b.subTo(m, b)\r\n      b.rShiftTo(1, b)\r\n    }\r\n    while (v.isEven()) {\r\n      v.rShiftTo(1, v)\r\n      if (ac) {\r\n        if (!c.isEven() || !d.isEven()) {\r\n          c.addTo(this, c)\r\n          d.subTo(m, d)\r\n        }\r\n        c.rShiftTo(1, c)\r\n      } else if (!d.isEven()) d.subTo(m, d)\r\n      d.rShiftTo(1, d)\r\n    }\r\n    if (u.compareTo(v) >= 0) {\r\n      u.subTo(v, u)\r\n      if (ac) a.subTo(c, a)\r\n      b.subTo(d, b)\r\n    } else {\r\n      v.subTo(u, v)\r\n      if (ac) c.subTo(a, c)\r\n      d.subTo(b, d)\r\n    }\r\n  }\r\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO\r\n  while (d.compareTo(m) >= 0) d.subTo(m, d)\r\n  while (d.signum() < 0) d.addTo(m, d)\r\n  return d\r\n}\r\n\r\nvar lowprimes = [\r\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\r\n  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\r\n  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\r\n  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\r\n  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\r\n  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\r\n  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\r\n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\r\n  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\r\n  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\r\n]\r\n\r\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]\r\n\r\n// (public) test primality with certainty >= 1-.5^t\r\nfunction bnIsProbablePrime(t) {\r\n  var i, x = this.abs()\r\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\r\n    for (i = 0; i < lowprimes.length; ++i)\r\n      if (x[0] == lowprimes[i]) return true\r\n    return false\r\n  }\r\n  if (x.isEven()) return false\r\n  i = 1\r\n  while (i < lowprimes.length) {\r\n    var m = lowprimes[i],\r\n      j = i + 1\r\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]\r\n    m = x.modInt(m)\r\n    while (i < j) if (m % lowprimes[i++] == 0) return false\r\n  }\r\n  return x.millerRabin(t)\r\n}\r\n\r\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\r\nfunction bnpMillerRabin(t) {\r\n  var n1 = this.subtract(BigInteger.ONE)\r\n  var k = n1.getLowestSetBit()\r\n  if (k <= 0) return false\r\n  var r = n1.shiftRight(k)\r\n  t = (t + 1) >> 1\r\n  if (t > lowprimes.length) t = lowprimes.length\r\n  var a = new BigInteger(null)\r\n  var j, bases = []\r\n  for (var i = 0; i < t; ++i) {\r\n    for (;;) {\r\n      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]\r\n      if (bases.indexOf(j) == -1) break\r\n    }\r\n    bases.push(j)\r\n    a.fromInt(j)\r\n    var y = a.modPow(r, this)\r\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\r\n      var j = 1\r\n      while (j++ < k && y.compareTo(n1) != 0) {\r\n        y = y.modPowInt(2, this)\r\n        if (y.compareTo(BigInteger.ONE) == 0) return false\r\n      }\r\n      if (y.compareTo(n1) != 0) return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n// protected\r\nproto.chunkSize = bnpChunkSize\r\nproto.toRadix = bnpToRadix\r\nproto.fromRadix = bnpFromRadix\r\nproto.fromNumber = bnpFromNumber\r\nproto.bitwiseTo = bnpBitwiseTo\r\nproto.changeBit = bnpChangeBit\r\nproto.addTo = bnpAddTo\r\nproto.dMultiply = bnpDMultiply\r\nproto.dAddOffset = bnpDAddOffset\r\nproto.multiplyLowerTo = bnpMultiplyLowerTo\r\nproto.multiplyUpperTo = bnpMultiplyUpperTo\r\nproto.modInt = bnpModInt\r\nproto.millerRabin = bnpMillerRabin\r\n\r\n// public\r\nproto.clone = bnClone\r\nproto.intValue = bnIntValue\r\nproto.byteValue = bnByteValue\r\nproto.shortValue = bnShortValue\r\nproto.signum = bnSigNum\r\nproto.toByteArray = bnToByteArray\r\nproto.equals = bnEquals\r\nproto.min = bnMin\r\nproto.max = bnMax\r\nproto.and = bnAnd\r\nproto.or = bnOr\r\nproto.xor = bnXor\r\nproto.andNot = bnAndNot\r\nproto.not = bnNot\r\nproto.shiftLeft = bnShiftLeft\r\nproto.shiftRight = bnShiftRight\r\nproto.getLowestSetBit = bnGetLowestSetBit\r\nproto.bitCount = bnBitCount\r\nproto.testBit = bnTestBit\r\nproto.setBit = bnSetBit\r\nproto.clearBit = bnClearBit\r\nproto.flipBit = bnFlipBit\r\nproto.add = bnAdd\r\nproto.subtract = bnSubtract\r\nproto.multiply = bnMultiply\r\nproto.divide = bnDivide\r\nproto.remainder = bnRemainder\r\nproto.divideAndRemainder = bnDivideAndRemainder\r\nproto.modPow = bnModPow\r\nproto.modInverse = bnModInverse\r\nproto.pow = bnPow\r\nproto.gcd = bnGCD\r\nproto.isProbablePrime = bnIsProbablePrime\r\n\r\n// JSBN-specific extension\r\nproto.square = bnSquare\r\n\r\n// constants\r\nBigInteger.ZERO = nbv(0)\r\nBigInteger.ONE = nbv(1)\r\nBigInteger.valueOf = nbv\r\n\r\nmodule.exports = BigInteger\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}