{"ast":null,"code":"import _asyncToGenerator from \"D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DOCUMENT } from '@angular/common';\nimport * as Mnemonic from \"bitcore-mnemonic\";\nimport * as CryptoJS from \"crypto-js\";\nimport { hdkey } from \"ethereumjs-wallet\";\nimport * as bip39 from \"bip39\";\nimport * as util from \"ethereumjs-util\";\nimport Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction MetamaskComponent_form_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"textarea\", 8);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MetamaskComponent_form_1_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MetamaskComponent_form_1_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.removeSeeds());\n    });\n    i0.ɵɵtext(1, \"Clear Seeds\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MetamaskComponent_form_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function MetamaskComponent_form_1_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.sendLogin(ctx_r6.loginForm.value));\n    });\n    i0.ɵɵtemplate(1, MetamaskComponent_form_1_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵelement(3, \"input\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 5);\n    i0.ɵɵtext(5, \"Login\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, MetamaskComponent_form_1_button_6_Template, 2, 0, \"button\", 6);\n    i0.ɵɵelementStart(7, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MetamaskComponent_form_1_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.loginWithMetamask());\n    });\n    i0.ɵɵtext(8, \"Login with Metamask\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.loginForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.encrypted);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.encrypted);\n  }\n}\nfunction MetamaskComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\")(6, \"a\", 9);\n    i0.ɵɵtext(7, \"Ver tu cuenta en Etherscan (TestNet Sepolia)\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"h2\");\n    i0.ɵɵtext(9, \"Env\\u00EDo de Ethers\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function MetamaskComponent_div_2_Template_form_ngSubmit_10_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.sendEther(ctx_r9.sendForm.value));\n    });\n    i0.ɵɵelementStart(11, \"div\");\n    i0.ɵɵelement(12, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\");\n    i0.ɵɵelement(14, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 5);\n    i0.ɵɵtext(16, \"Enviar\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Cuenta: \", ctx_r1.wallet.address, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Tu saldo en ETH es: \", ctx_r1.wallet.balance, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"href\", \"https://goerli.etherscan.io/address/\", ctx_r1.wallet.address, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.sendForm);\n  }\n}\nexport class MetamaskComponent {\n  constructor(document, formBuilder) {\n    this.document = document;\n    this.formBuilder = formBuilder;\n    this.wallet = {\n      address: '',\n      privateKey: ''\n    };\n    this.mining = false;\n    this.window = document.defaultView;\n    this.loginForm = this.formBuilder.group({\n      seeds: '',\n      password: ''\n    });\n    this.sendForm = this.formBuilder.group({\n      to: '',\n      amount: ''\n    });\n    this.encrypted = window.localStorage.getItem('seeds');\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\n    //this.web3 = new Web3;\n    this.web3 = new Web3(this.window.ethereum);\n    /*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n    */\n  }\n  // february current defy one inform wet hurry cupboard type enable spare famous\n  initWallet(seeds) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var mnemonic = new Mnemonic(seeds);\n      var seed = yield bip39.mnemonicToSeed(mnemonic.toString());\n      var path = \"m/44'/60'/0'/0/0\";\n      var wallet = hdkey.fromMasterSeed(seed).derivePath(path).getWallet();\n      var privateKey = wallet.getPrivateKey();\n      var publicKey = util.privateToPublic(privateKey);\n      var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\n      _this.wallet.privateKey = privateKey;\n      _this.getBalance(address);\n      _this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\n      _this.wallet.balance = yield _this.web3.eth.getBalance(address).then(result => {\n        return _this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\n      });\n    })();\n  }\n\n  getBalance(address) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.wallet.address = address;\n      _this2.wallet.balance = yield _this2.web3.eth.getBalance(address).then(result => {\n        return _this2.web3.utils.fromWei(result, 'ether');\n      });\n    })();\n  }\n  sendLogin(loginData) {\n    if (loginData.password == '') {\n      return alert('Introduce tu contraseña');\n    }\n    if (this.encrypted) {\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\n    }\n    if (!Mnemonic.isValid(loginData.seeds)) {\n      return alert('Semilla inválida');\n    }\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\n    window.localStorage.setItem('seeds', encrypted);\n    this.loginForm.reset();\n    this.initWallet(loginData.seed);\n  }\n  loginWithMetamask() {\n    if (!this.window.ethereum) {\n      return alert('Metamask no está instalado');\n    }\n    this.window.ethereum.enable().then(accounts => {\n      let address = accounts[0];\n      this.getBalance(address);\n      this.wallet.address = address;\n    });\n  }\n  removeSeeds() {\n    window.localStorage.removeItem('seeds');\n    this.encrypted = '';\n    this.wallet = {\n      address: '',\n      balance: ''\n    };\n  }\n  sendEther(sendData) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (sendData.to == '' || sendData.amount == null) {\n        return alert('Campos son obligatorios');\n      }\n      if (!util.isValidAddress(sendData.to)) {\n        return alert('Dirección inválida');\n      }\n      _this3.mining = true;\n      var rawData = {\n        from: _this3.wallet.address,\n        to: sendData.to,\n        value: sendData.amount,\n        gasPrice: _this3.web3.utils.toHex(10000000000),\n        gasLimit: _this3.web3.utils.toHex(1000000)\n        //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\n      };\n\n      var signed = yield _this3.web3.eth.sendTransaction(rawData).then(receipt => {\n        console.log(\"Transaction succeeded\", receipt);\n        _this3.mining = false;\n        _this3.lastTransaction = receipt;\n        _this3.sendForm.reset();\n      });\n      //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\n      /*\r\n      this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n        this.mining = false;\r\n        this.lastTransaction = receipt;\r\n              this.sendForm.reset();\r\n      });\r\n      */\n    })();\n  }\n}\n\nMetamaskComponent.ɵfac = function MetamaskComponent_Factory(t) {\n  return new (t || MetamaskComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nMetamaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MetamaskComponent,\n  selectors: [[\"app-metamask\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[2, \"text-align\", \"center\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\"], [\"type\", \"submit\"], [\"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 3, \"click\"], [\"formControlName\", \"seeds\", \"rows\", \"4\", \"placeholder\", \"Seeds\"], [\"target\", \"_blank\", 3, \"href\"], [\"formControlName\", \"to\", \"type\", \"text\", \"placeholder\", \"To\"], [\"formControlName\", \"amount\", \"type\", \"number\", \"placeholder\", \"Amount\"]],\n  template: function MetamaskComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MetamaskComponent_form_1_Template, 9, 3, \"form\", 1);\n      i0.ɵɵtemplate(2, MetamaskComponent_div_2_Template, 17, 4, \"div\", 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.wallet.address);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.wallet.address);\n    }\n  },\n  dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}