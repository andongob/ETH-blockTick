{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar Script = require('./script');\nvar Opcode = require('../opcode');\nvar BN = require('../crypto/bn');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar PublicKey = require('../publickey');\n\n/**\n * Bitcoin transactions contain scripts. Each input has a script called the\n * scriptSig, and each output has a script called the scriptPubkey. To validate\n * an input, the input's script is concatenated with the referenced output script,\n * and the result is executed. If at the end of execution the stack contains a\n * \"true\" value, then the transaction is valid.\n *\n * The primary way to use this class is via the verify function.\n * e.g., Interpreter().verify( ... );\n */\nvar Interpreter = function Interpreter(obj) {\n  if (!(this instanceof Interpreter)) {\n    return new Interpreter(obj);\n  }\n  if (obj) {\n    this.initialize();\n    this.set(obj);\n  } else {\n    this.initialize();\n  }\n};\nInterpreter.SIGVERSION_BASE = 0;\nInterpreter.SIGVERSION_WITNESS_V0 = 1;\nInterpreter.SIGVERSION_TAPROOT = 2;\nInterpreter.SIGVERSION_TAPSCRIPT = 3;\nInterpreter.prototype.verifyWitnessProgram = function (version, program, witness, satoshis, flags) {\n  var scriptPubKey = new Script();\n  var stack = [];\n  if (version === 0) {\n    if (program.length === 32) {\n      if (witness.length === 0) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY';\n        return false;\n      }\n      var scriptPubKeyBuffer = witness[witness.length - 1];\n      scriptPubKey = new Script(scriptPubKeyBuffer);\n      var hash = Hash.sha256(scriptPubKeyBuffer);\n      if (hash.toString('hex') !== program.toString('hex')) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n      stack = witness.slice(0, -1);\n    } else if (program.length === 20) {\n      if (witness.length !== 2) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n      scriptPubKey.add(Opcode.OP_DUP);\n      scriptPubKey.add(Opcode.OP_HASH160);\n      scriptPubKey.add(program);\n      scriptPubKey.add(Opcode.OP_EQUALVERIFY);\n      scriptPubKey.add(Opcode.OP_CHECKSIG);\n      stack = witness;\n    } else {\n      this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH';\n      return false;\n    }\n  } else if (flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM) {\n    this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM';\n    return false;\n  } else {\n    return true;\n  }\n  this.initialize();\n  this.set({\n    script: scriptPubKey,\n    stack: stack,\n    sigversion: Interpreter.SIGVERSION_WITNESS_V0,\n    satoshis: satoshis,\n    flags: flags\n  });\n  if (!this.evaluate()) {\n    return false;\n  }\n  if (this.stack.length !== 1) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE';\n    return false;\n  }\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n  return true;\n};\n\n/**\n * Verifies a Script by executing it and returns true if it is valid.\n * This function needs to be provided with the scriptSig and the scriptPubkey\n * separately.\n * @param {Script} scriptSig - the script's first part (corresponding to the tx input)\n * @param {Script} scriptPubkey - the script's last part (corresponding to the tx output)\n * @param {Transaction=} tx - the Transaction containing the scriptSig in one input (used\n *    to check signature validity for some opcodes like OP_CHECKSIG)\n * @param {number} nin - index of the transaction input containing the scriptSig verified.\n * @param {number} flags - evaluation flags. See Interpreter.SCRIPT_* constants\n * @param {number} witness - array of witness data\n * @param {number} satoshis - number of satoshis created by this output\n *\n * Translated from bitcoind's VerifyScript\n */\nInterpreter.prototype.verify = function (scriptSig, scriptPubkey, tx, nin, flags, witness, satoshis) {\n  var Transaction = require('../transaction');\n  if (_.isUndefined(tx)) {\n    tx = new Transaction();\n  }\n  if (_.isUndefined(nin)) {\n    nin = 0;\n  }\n  if (_.isUndefined(flags)) {\n    flags = 0;\n  }\n  if (_.isUndefined(witness)) {\n    witness = null;\n  }\n  if (_.isUndefined(satoshis)) {\n    satoshis = 0;\n  }\n  this.set({\n    script: scriptSig,\n    tx: tx,\n    nin: nin,\n    sigversion: Interpreter.SIGVERSION_BASE,\n    satoshis: 0,\n    flags: flags\n  });\n  var stackCopy;\n  if ((flags & Interpreter.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly()) {\n    this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n    return false;\n  }\n\n  // evaluate scriptSig\n  if (!this.evaluate()) {\n    return false;\n  }\n  if (flags & Interpreter.SCRIPT_VERIFY_P2SH) {\n    stackCopy = this.stack.slice();\n  }\n  var stack = this.stack;\n  this.initialize();\n  this.set({\n    script: scriptPubkey,\n    stack: stack,\n    tx: tx,\n    nin: nin,\n    flags: flags\n  });\n\n  // evaluate scriptPubkey\n  if (!this.evaluate()) {\n    return false;\n  }\n  if (this.stack.length === 0) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_RESULT';\n    return false;\n  }\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n  var hadWitness = false;\n  if (flags & Interpreter.SCRIPT_VERIFY_WITNESS) {\n    var witnessValues = {};\n    if (scriptPubkey.isWitnessProgram(witnessValues)) {\n      hadWitness = true;\n      if (scriptSig.toBuffer().length !== 0) {\n        return false;\n      }\n      if (!this.verifyWitnessProgram(witnessValues.version, witnessValues.program, witness, satoshis, this.flags)) {\n        return false;\n      }\n    }\n  }\n\n  // Additional validation for spend-to-script-hash transactions:\n  if (flags & Interpreter.SCRIPT_VERIFY_P2SH && scriptPubkey.isScriptHashOut()) {\n    // scriptSig must be literals-only or validation fails\n    if (!scriptSig.isPushOnly()) {\n      this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n      return false;\n    }\n\n    // stackCopy cannot be empty here, because if it was the\n    // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n    // an empty stack and the EvalScript above would return false.\n    if (stackCopy.length === 0) {\n      throw new Error('internal error - stack copy empty');\n    }\n    var redeemScriptSerialized = stackCopy[stackCopy.length - 1];\n    var redeemScript = Script.fromBuffer(redeemScriptSerialized);\n    stackCopy.pop();\n    this.initialize();\n    this.set({\n      script: redeemScript,\n      stack: stackCopy,\n      tx: tx,\n      nin: nin,\n      flags: flags\n    });\n\n    // evaluate redeemScript\n    if (!this.evaluate()) {\n      return false;\n    }\n    if (stackCopy.length === 0) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_P2SH_STACK';\n      return false;\n    }\n    if (!Interpreter.castToBool(stackCopy[stackCopy.length - 1])) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_P2SH_STACK';\n      return false;\n    }\n    if (flags & Interpreter.SCRIPT_VERIFY_WITNESS) {\n      var p2shWitnessValues = {};\n      if (redeemScript.isWitnessProgram(p2shWitnessValues)) {\n        hadWitness = true;\n        var redeemScriptPush = new Script();\n        redeemScriptPush.add(redeemScript.toBuffer());\n        if (scriptSig.toHex() !== redeemScriptPush.toHex()) {\n          this.errstr = 'SCRIPT_ERR_WITNESS_MALLEATED_P2SH';\n          return false;\n        }\n        if (!this.verifyWitnessProgram(p2shWitnessValues.version, p2shWitnessValues.program, witness, satoshis, this.flags)) {\n          return false;\n        }\n        // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n        // for witness programs.\n        stack = [stack[0]];\n      }\n    }\n  }\n\n  // The CLEANSTACK check is only performed after potential P2SH evaluation,\n  // as the non-P2SH evaluation of a P2SH script will obviously not result in\n  // a clean stack (the P2SH inputs remain). The same holds for witness\n  // evaluation.\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_CLEANSTACK) != 0) {\n    // Disallow CLEANSTACK without P2SH, as otherwise a switch\n    // CLEANSTACK->P2SH+CLEANSTACK would be possible, which is not a\n    // softfork (and P2SH should be one).\n    if ((this.flags & Interpreter.SCRIPT_VERIFY_P2SH) == 0) throw 'flags & SCRIPT_VERIFY_P2SH';\n    if (stackCopy.length != 1) {\n      this.errstr = 'SCRIPT_ERR_CLEANSTACK';\n      return false;\n    }\n  }\n  if (this.flags & Interpreter.SCRIPT_VERIFY_WITNESS) {\n    if (!hadWitness && witness.length > 0) {\n      this.errstr = 'SCRIPT_ERR_WITNESS_UNEXPECTED';\n      return false;\n    }\n  }\n  return true;\n};\nmodule.exports = Interpreter;\nInterpreter.prototype.initialize = function (obj) {\n  this.stack = [];\n  this.altstack = [];\n  this.pc = 0;\n  this.satoshis = 0;\n  this.sigversion = Interpreter.SIGVERSION_BASE;\n  this.pbegincodehash = 0;\n  this.nOpCount = 0;\n  this.vfExec = [];\n  this.errstr = '';\n  this.flags = 0;\n};\nInterpreter.prototype.set = function (obj) {\n  this.script = obj.script || this.script;\n  this.tx = obj.tx || this.tx;\n  this.nin = typeof obj.nin !== 'undefined' ? obj.nin : this.nin;\n  this.stack = obj.stack || this.stack;\n  this.altstack = obj.altack || this.altstack;\n  this.pc = typeof obj.pc !== 'undefined' ? obj.pc : this.pc;\n  this.pbegincodehash = typeof obj.pbegincodehash !== 'undefined' ? obj.pbegincodehash : this.pbegincodehash;\n  this.sigversion = typeof obj.sigversion !== 'undefined' ? obj.sigversion : this.sigversion;\n  this.satoshis = typeof obj.satoshis !== 'undefined' ? obj.satoshis : this.satoshis;\n  this.nOpCount = typeof obj.nOpCount !== 'undefined' ? obj.nOpCount : this.nOpCount;\n  this.vfExec = obj.vfExec || this.vfExec;\n  this.errstr = obj.errstr || this.errstr;\n  this.flags = typeof obj.flags !== 'undefined' ? obj.flags : this.flags;\n};\nInterpreter.true = Buffer.from([1]);\nInterpreter.false = Buffer.from([]);\nInterpreter.MAX_SCRIPT_ELEMENT_SIZE = 520;\nInterpreter.LOCKTIME_THRESHOLD = 500000000;\nInterpreter.LOCKTIME_THRESHOLD_BN = new BN(Interpreter.LOCKTIME_THRESHOLD);\n\n// flags taken from bitcoind\n// bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\nInterpreter.SCRIPT_VERIFY_NONE = 0;\n\n// Making v1-v16 witness program non-standard\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = 1 << 12;\n\n// Evaluate P2SH subscripts (softfork safe, BIP16).\nInterpreter.SCRIPT_VERIFY_P2SH = 1 << 0;\n\n// Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n// Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n// skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\nInterpreter.SCRIPT_VERIFY_STRICTENC = 1 << 1;\n\n// Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\nInterpreter.SCRIPT_VERIFY_DERSIG = 1 << 2;\n\n// Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n// (softfork safe, BIP62 rule 5).\nInterpreter.SCRIPT_VERIFY_LOW_S = 1 << 3;\n\n// verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\nInterpreter.SCRIPT_VERIFY_NULLDUMMY = 1 << 4;\n\n// Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).\nInterpreter.SCRIPT_VERIFY_SIGPUSHONLY = 1 << 5;\n\n// Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct\n// pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating\n// any other push causes the script to fail (BIP62 rule 3).\n// In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).\n// (softfork safe)\nInterpreter.SCRIPT_VERIFY_MINIMALDATA = 1 << 6;\n\n// Discourage use of NOPs reserved for upgrades (NOP1-10)\n//\n// Provided so that nodes can avoid accepting or mining transactions\n// containing executed NOP's whose meaning may change after a soft-fork,\n// thus rendering the script invalid; with this flag set executing\n// discouraged NOPs fails the script. This verification flag will never be\n// a mandatory flag applied to scripts in a block. NOPs that are not\n// executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 1 << 7;\n\n// Require that only a single stack element remains after evaluation. This\n// changes the success criterion from \"At least one stack element must\n// remain, and when interpreted as a boolean, it must be true\" to \"Exactly\n// one stack element must remain, and when interpreted as a boolean, it must\n// be true\".\n// (softfork safe, BIP62 rule 6)\n// Note: CLEANSTACK should never be used without P2SH or WITNESS.\nInterpreter.SCRIPT_VERIFY_CLEANSTACK = 1 << 8,\n// CLTV See BIP65 for details.\nInterpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = 1 << 9;\nInterpreter.SCRIPT_VERIFY_WITNESS = 1 << 10;\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 1 << 11;\n\n// support CHECKSEQUENCEVERIFY opcode\n//\n// See BIP112 for details\nInterpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = 1 << 10;\n\n//\n// Segwit script only: Require the argument of OP_IF/NOTIF to be exactly\n// 0x01 or empty vector\n//\nInterpreter.SCRIPT_VERIFY_MINIMALIF = 1 << 13;\n\n// Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n//\nInterpreter.SCRIPT_VERIFY_NULLFAIL = 1 << 14;\n\n// Public keys in scripts must be compressed\n//\nInterpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = 1 << 15;\n\n// Do we accept signature using SIGHASH_FORKID\n//\nInterpreter.SCRIPT_ENABLE_SIGHASH_FORKID = 1 << 16;\n\n// Do we accept activate replay protection using a different fork id.\n//\nInterpreter.SCRIPT_ENABLE_REPLAY_PROTECTION = 1 << 17;\n\n// Enable new opcodes.\n//\nInterpreter.SCRIPT_ENABLE_MONOLITH_OPCODES = 1 << 18;\n\n/* Below flags apply in the context of BIP 68*/\n/**\n * If this flag set, CTxIn::nSequence is NOT interpreted as a relative\n * lock-time.\n */\nInterpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 << 31;\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time and this flag is set,\n * the relative lock-time has units of 512 seconds, otherwise it specifies\n * blocks with a granularity of 1.\n */\nInterpreter.SEQUENCE_LOCKTIME_TYPE_FLAG = 1 << 22;\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time, this mask is applied to\n * extract that lock-time from the sequence field.\n */\nInterpreter.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\nInterpreter.castToBool = function (buf) {\n  for (var i = 0; i < buf.length; i++) {\n    if (buf[i] !== 0) {\n      // can be negative zero\n      if (i === buf.length - 1 && buf[i] === 0x80) {\n        return false;\n      }\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Translated from bitcoind's CheckSignatureEncoding\n */\nInterpreter.prototype.checkSignatureEncoding = function (buf) {\n  var sig;\n\n  // Empty signature. Not strictly DER encoded, but allowed to provide a\n  // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n  if (buf.length == 0) {\n    return true;\n  }\n  if ((this.flags & (Interpreter.SCRIPT_VERIFY_DERSIG | Interpreter.SCRIPT_VERIFY_LOW_S | Interpreter.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Signature.isTxDER(buf)) {\n    this.errstr = 'SCRIPT_ERR_SIG_DER_INVALID_FORMAT';\n    return false;\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_LOW_S) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasLowS()) {\n      this.errstr = 'SCRIPT_ERR_SIG_DER_HIGH_S';\n      return false;\n    }\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasDefinedHashtype()) {\n      this.errstr = 'SCRIPT_ERR_SIG_HASHTYPE';\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Translated from bitcoind's CheckPubKeyEncoding\n */\nInterpreter.prototype.checkPubkeyEncoding = function (buf) {\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0 && !PublicKey.isValid(buf)) {\n    this.errstr = 'SCRIPT_ERR_PUBKEYTYPE';\n    return false;\n  }\n\n  // Only compressed keys are accepted in segwit\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && this.sigversion == Interpreter.SIGVERSION_WITNESS_V0 && !PublicKey.fromBuffer(buf).compressed) {\n    this.errstr = 'SCRIPT_ERR_WITNESS_PUBKEYTYPE';\n    return false;\n  }\n  return true;\n};\n\n/**\n * Based on bitcoind's EvalScript function, with the inner loop moved to\n * Interpreter.prototype.step()\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.evaluate = function () {\n  if (this.script.toBuffer().length > 10000) {\n    this.errstr = 'SCRIPT_ERR_SCRIPT_SIZE';\n    return false;\n  }\n  try {\n    while (this.pc < this.script.chunks.length) {\n      var fSuccess = this.step();\n      if (!fSuccess) {\n        return false;\n      }\n    }\n\n    // Size limits\n    if (this.stack.length + this.altstack.length > 1000) {\n      this.errstr = 'SCRIPT_ERR_STACK_SIZE';\n      return false;\n    }\n  } catch (e) {\n    this.errstr = 'SCRIPT_ERR_UNKNOWN_ERROR: ' + e;\n    return false;\n  }\n  if (this.vfExec.length > 0) {\n    this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n    return false;\n  }\n  return true;\n};\n\n/**\n * Checks a locktime parameter with the transaction's locktime.\n * There are two times of nLockTime: lock-by-blockheight and lock-by-blocktime,\n * distinguished by whether nLockTime < LOCKTIME_THRESHOLD = 500000000\n *\n * See the corresponding code on bitcoin core:\n * https://github.com/bitcoin/bitcoin/blob/ffd75adce01a78b3461b3ff05bcc2b530a9ce994/src/script/interpreter.cpp#L1129\n *\n * @param {BN} nLockTime the locktime read from the script\n * @return {boolean} true if the transaction's locktime is less than or equal to\n *                   the transaction's locktime\n */\nInterpreter.prototype.checkLockTime = function (nLockTime) {\n  // We want to compare apples to apples, so fail the script\n  // unless the type of nLockTime being tested is the same as\n  // the nLockTime in the transaction.\n  if (!(this.tx.nLockTime < Interpreter.LOCKTIME_THRESHOLD && nLockTime.lt(Interpreter.LOCKTIME_THRESHOLD_BN) || this.tx.nLockTime >= Interpreter.LOCKTIME_THRESHOLD && nLockTime.gte(Interpreter.LOCKTIME_THRESHOLD_BN))) {\n    return false;\n  }\n\n  // Now that we know we're comparing apples-to-apples, the\n  // comparison is a simple numeric one.\n  if (nLockTime.gt(new BN(this.tx.nLockTime))) {\n    return false;\n  }\n\n  // Finally the nLockTime feature can be disabled and thus\n  // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n  // finalized by setting nSequence to maxint. The\n  // transaction would be allowed into the blockchain, making\n  // the opcode ineffective.\n  //\n  // Testing if this vin is not final is sufficient to\n  // prevent this condition. Alternatively we could test all\n  // inputs, but testing just this input minimizes the data\n  // required to prove correct CHECKLOCKTIMEVERIFY execution.\n  if (!this.tx.inputs[this.nin].isFinal()) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Checks a sequence parameter with the transaction's sequence.\n * @param {BN} nSequence the sequence read from the script\n * @return {boolean} true if the transaction's sequence is less than or equal to\n *                   the transaction's sequence \n */\nInterpreter.prototype.checkSequence = function (nSequence) {\n  // Relative lock times are supported by comparing the passed in operand to\n  // the sequence number of the input.\n  var txToSequence = this.tx.inputs[this.nin].sequenceNumber;\n\n  // Fail if the transaction's version number is not set high enough to\n  // trigger BIP 68 rules.\n  if (this.tx.version < 2) {\n    return false;\n  }\n\n  // Sequence numbers with their most significant bit set are not consensus\n  // constrained. Testing that the transaction's sequence number do not have\n  // this bit set prevents using this property to get around a\n  // CHECKSEQUENCEVERIFY check.\n  if (txToSequence & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n    return false;\n  }\n\n  // Mask off any bits that do not have consensus-enforced meaning before\n  // doing the integer comparisons\n  var nLockTimeMask = Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG | Interpreter.SEQUENCE_LOCKTIME_MASK;\n  var txToSequenceMasked = new BN(txToSequence & nLockTimeMask);\n  var nSequenceMasked = nSequence.and(nLockTimeMask);\n\n  // There are two kinds of nSequence: lock-by-blockheight and\n  // lock-by-blocktime, distinguished by whether nSequenceMasked <\n  // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n  //\n  // We want to compare apples to apples, so fail the script unless the type\n  // of nSequenceMasked being tested is the same as the nSequenceMasked in the\n  // transaction.\n  var SEQUENCE_LOCKTIME_TYPE_FLAG_BN = new BN(Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG);\n  if (!(txToSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) && nSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) || txToSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) && nSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN))) {\n    return false;\n  }\n\n  // Now that we know we're comparing apples-to-apples, the comparison is a\n  // simple numeric one.\n  if (nSequenceMasked.gt(txToSequenceMasked)) {\n    return false;\n  }\n  return true;\n};\n\n/** \n * Based on the inner loop of bitcoind's EvalScript function\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.step = function () {\n  var fRequireMinimal = (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALDATA) !== 0;\n\n  //bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n  var fExec = this.vfExec.indexOf(false) === -1;\n  var buf, buf1, buf2, spliced, n, x1, x2, bn, bn1, bn2, bufSig, bufPubkey, subscript;\n  var sig, pubkey;\n  var fValue, fSuccess;\n\n  // Read instruction\n  var chunk = this.script.chunks[this.pc];\n  this.pc++;\n  var opcodenum = chunk.opcodenum;\n  if (_.isUndefined(opcodenum)) {\n    this.errstr = 'SCRIPT_ERR_UNDEFINED_OPCODE';\n    return false;\n  }\n  if (chunk.buf && chunk.buf.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {\n    this.errstr = 'SCRIPT_ERR_PUSH_SIZE';\n    return false;\n  }\n\n  // Note how Opcode.OP_RESERVED does not count towards the opcode limit.\n  if (opcodenum > Opcode.OP_16 && ++this.nOpCount > 201) {\n    this.errstr = 'SCRIPT_ERR_OP_COUNT';\n    return false;\n  }\n  if (opcodenum === Opcode.OP_CAT || opcodenum === Opcode.OP_SUBSTR || opcodenum === Opcode.OP_LEFT || opcodenum === Opcode.OP_RIGHT || opcodenum === Opcode.OP_INVERT || opcodenum === Opcode.OP_AND || opcodenum === Opcode.OP_OR || opcodenum === Opcode.OP_XOR || opcodenum === Opcode.OP_2MUL || opcodenum === Opcode.OP_2DIV || opcodenum === Opcode.OP_MUL || opcodenum === Opcode.OP_DIV || opcodenum === Opcode.OP_MOD || opcodenum === Opcode.OP_LSHIFT || opcodenum === Opcode.OP_RSHIFT) {\n    this.errstr = 'SCRIPT_ERR_DISABLED_OPCODE';\n    return false;\n  }\n  if (fExec && 0 <= opcodenum && opcodenum <= Opcode.OP_PUSHDATA4) {\n    if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {\n      this.errstr = 'SCRIPT_ERR_MINIMALDATA';\n      return false;\n    }\n    if (!chunk.buf) {\n      this.stack.push(Interpreter.false);\n    } else if (chunk.len !== chunk.buf.length) {\n      throw new Error('Length of push value not equal to length of data');\n    } else {\n      this.stack.push(chunk.buf);\n    }\n  } else if (fExec || Opcode.OP_IF <= opcodenum && opcodenum <= Opcode.OP_ENDIF) {\n    switch (opcodenum) {\n      // Push value\n      case Opcode.OP_1NEGATE:\n      case Opcode.OP_1:\n      case Opcode.OP_2:\n      case Opcode.OP_3:\n      case Opcode.OP_4:\n      case Opcode.OP_5:\n      case Opcode.OP_6:\n      case Opcode.OP_7:\n      case Opcode.OP_8:\n      case Opcode.OP_9:\n      case Opcode.OP_10:\n      case Opcode.OP_11:\n      case Opcode.OP_12:\n      case Opcode.OP_13:\n      case Opcode.OP_14:\n      case Opcode.OP_15:\n      case Opcode.OP_16:\n        {\n          // ( -- value)\n          // ScriptNum bn((int)opcode - (int)(Opcode.OP_1 - 1));\n          n = opcodenum - (Opcode.OP_1 - 1);\n          buf = new BN(n).toScriptNumBuffer();\n          this.stack.push(buf);\n          // The result of these opcodes should always be the minimal way to push the data\n          // they push, so no need for a CheckMinimalPush here.\n        }\n\n        break;\n\n      //\n      // Control\n      //\n      case Opcode.OP_NOP:\n        break;\n      case Opcode.OP_NOP2:\n      case Opcode.OP_CHECKLOCKTIMEVERIFY:\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n          // not enabled; treat as a NOP2\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n        // Note that elsewhere numeric opcodes are limited to\n        // operands in the range -2**31+1 to 2**31-1, however it is\n        // legal for opcodes to produce results exceeding that\n        // range. This limitation is implemented by CScriptNum's\n        // default 4-byte limit.\n        //\n        // If we kept to that limit we'd have a year 2038 problem,\n        // even though the nLockTime field in transactions\n        // themselves is uint32 which only becomes meaningless\n        // after the year 2106.\n        //\n        // Thus as a special case we tell CScriptNum to accept up\n        // to 5-byte bignums, which are good until 2**39-1, well\n        // beyond the 2**32-1 limit of the nLockTime field itself.\n        var nLockTime = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKLOCKTIMEVERIFY.\n        if (nLockTime.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkLockTime(nLockTime)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n      case Opcode.OP_NOP3:\n      case Opcode.OP_CHECKSEQUENCEVERIFY:\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n          // not enabled; treat as a NOP3\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n        // nSequence, like nLockTime, is a 32-bit unsigned\n        // integer field. See the comment in CHECKLOCKTIMEVERIFY\n        // regarding 5-byte numeric operands.\n\n        var nSequence = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKSEQUENCEVERIFY.\n        if (nSequence.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // To provide for future soft-fork extensibility, if the\n        // operand has the disabled lock-time flag set,\n        // CHECKSEQUENCEVERIFY behaves as a NOP.\n        if ((nSequence & Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0) {\n          break;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkSequence(nSequence)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n      case Opcode.OP_NOP1:\n      case Opcode.OP_NOP4:\n      case Opcode.OP_NOP5:\n      case Opcode.OP_NOP6:\n      case Opcode.OP_NOP7:\n      case Opcode.OP_NOP8:\n      case Opcode.OP_NOP9:\n      case Opcode.OP_NOP10:\n        {\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n        }\n        break;\n      case Opcode.OP_IF:\n      case Opcode.OP_NOTIF:\n        {\n          // <expression> if [statements] [else [statements]] endif\n          // bool fValue = false;\n          fValue = false;\n          if (fExec) {\n            if (this.stack.length < 1) {\n              this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n              return false;\n            }\n            buf = this.stack[this.stack.length - 1];\n            if (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALIF) {\n              buf = this.stack[this.stack.length - 1];\n              if (buf.length > 1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n              if (buf.length == 1 && buf[0] != 1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n            }\n            fValue = Interpreter.castToBool(buf);\n            if (opcodenum === Opcode.OP_NOTIF) {\n              fValue = !fValue;\n            }\n            this.stack.pop();\n          }\n          this.vfExec.push(fValue);\n        }\n        break;\n      case Opcode.OP_ELSE:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec[this.vfExec.length - 1] = !this.vfExec[this.vfExec.length - 1];\n        }\n        break;\n      case Opcode.OP_ENDIF:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec.pop();\n        }\n        break;\n      case Opcode.OP_VERIFY:\n        {\n          // (true -- ) or\n          // (false -- false) and return\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.pop();\n          } else {\n            this.errstr = 'SCRIPT_ERR_VERIFY';\n            return false;\n          }\n        }\n        break;\n      case Opcode.OP_RETURN:\n        {\n          this.errstr = 'SCRIPT_ERR_OP_RETURN';\n          return false;\n        }\n        break;\n\n      //\n      // Stack ops\n      //\n      case Opcode.OP_TOALTSTACK:\n        {\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.altstack.push(this.stack.pop());\n        }\n        break;\n      case Opcode.OP_FROMALTSTACK:\n        {\n          if (this.altstack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_ALTSTACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.altstack.pop());\n        }\n        break;\n      case Opcode.OP_2DROP:\n        {\n          // (x1 x2 -- )\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n          this.stack.pop();\n        }\n        break;\n      case Opcode.OP_2DUP:\n        {\n          // (x1 x2 -- x1 x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n      case Opcode.OP_3DUP:\n        {\n          // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 3];\n          buf2 = this.stack[this.stack.length - 2];\n          var buf3 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n          this.stack.push(buf3);\n        }\n        break;\n      case Opcode.OP_2OVER:\n        {\n          // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 4];\n          buf2 = this.stack[this.stack.length - 3];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n      case Opcode.OP_2ROT:\n        {\n          // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\n          if (this.stack.length < 6) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 6, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n      case Opcode.OP_2SWAP:\n        {\n          // (x1 x2 x3 x4 -- x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 4, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n      case Opcode.OP_IFDUP:\n        {\n          // (x - 0 | x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.push(buf);\n          }\n        }\n        break;\n      case Opcode.OP_DEPTH:\n        {\n          // -- stacksize\n          buf = new BN(this.stack.length).toScriptNumBuffer();\n          this.stack.push(buf);\n        }\n        break;\n      case Opcode.OP_DROP:\n        {\n          // (x -- )\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n        }\n        break;\n      case Opcode.OP_DUP:\n        {\n          // (x -- x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 1]);\n        }\n        break;\n      case Opcode.OP_NIP:\n        {\n          // (x1 x2 -- x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 1);\n        }\n        break;\n      case Opcode.OP_OVER:\n        {\n          // (x1 x2 -- x1 x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 2]);\n        }\n        break;\n      case Opcode.OP_PICK:\n      case Opcode.OP_ROLL:\n        {\n          // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)\n          // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          n = bn.toNumber();\n          this.stack.pop();\n          if (n < 0 || n >= this.stack.length) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - n - 1];\n          if (opcodenum === Opcode.OP_ROLL) {\n            this.stack.splice(this.stack.length - n - 1, 1);\n          }\n          this.stack.push(buf);\n        }\n        break;\n      case Opcode.OP_ROT:\n        {\n          // (x1 x2 x3 -- x2 x3 x1)\n          //  x2 x1 x3  after first swap\n          //  x2 x3 x1  after second swap\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 3];\n          x2 = this.stack[this.stack.length - 2];\n          var x3 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 3] = x2;\n          this.stack[this.stack.length - 2] = x3;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n      case Opcode.OP_SWAP:\n        {\n          // (x1 x2 -- x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 2];\n          x2 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 2] = x2;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n      case Opcode.OP_TUCK:\n        {\n          // (x1 x2 -- x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);\n        }\n        break;\n      case Opcode.OP_SIZE:\n        {\n          // (in -- in size)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn = new BN(this.stack[this.stack.length - 1].length);\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n\n      //\n      // Bitwise logic\n      //\n      case Opcode.OP_EQUAL:\n      case Opcode.OP_EQUALVERIFY:\n        //case Opcode.OP_NOTEQUAL: // use Opcode.OP_NUMNOTEQUAL\n        {\n          // (x1 x2 - bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          var fEqual = buf1.toString('hex') === buf2.toString('hex');\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fEqual ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_EQUALVERIFY) {\n            if (fEqual) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_EQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      //\n      // Numeric\n      //\n      case Opcode.OP_1ADD:\n      case Opcode.OP_1SUB:\n      case Opcode.OP_NEGATE:\n      case Opcode.OP_ABS:\n      case Opcode.OP_NOT:\n      case Opcode.OP_0NOTEQUAL:\n        {\n          // (in -- out)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          switch (opcodenum) {\n            case Opcode.OP_1ADD:\n              bn = bn.add(BN.One);\n              break;\n            case Opcode.OP_1SUB:\n              bn = bn.sub(BN.One);\n              break;\n            case Opcode.OP_NEGATE:\n              bn = bn.neg();\n              break;\n            case Opcode.OP_ABS:\n              if (bn.cmp(BN.Zero) < 0) {\n                bn = bn.neg();\n              }\n              break;\n            case Opcode.OP_NOT:\n              bn = new BN((bn.cmp(BN.Zero) === 0) + 0);\n              break;\n            case Opcode.OP_0NOTEQUAL:\n              bn = new BN((bn.cmp(BN.Zero) !== 0) + 0);\n              break;\n            //default:      assert(!'invalid opcode'); break; // TODO: does this ever occur?\n          }\n\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n      case Opcode.OP_ADD:\n      case Opcode.OP_SUB:\n      case Opcode.OP_BOOLAND:\n      case Opcode.OP_BOOLOR:\n      case Opcode.OP_NUMEQUAL:\n      case Opcode.OP_NUMEQUALVERIFY:\n      case Opcode.OP_NUMNOTEQUAL:\n      case Opcode.OP_LESSTHAN:\n      case Opcode.OP_GREATERTHAN:\n      case Opcode.OP_LESSTHANOREQUAL:\n      case Opcode.OP_GREATERTHANOREQUAL:\n      case Opcode.OP_MIN:\n      case Opcode.OP_MAX:\n        {\n          // (x1 x2 -- out)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          bn = new BN(0);\n          switch (opcodenum) {\n            case Opcode.OP_ADD:\n              bn = bn1.add(bn2);\n              break;\n            case Opcode.OP_SUB:\n              bn = bn1.sub(bn2);\n              break;\n\n            // case Opcode.OP_BOOLAND:       bn = (bn1 != bnZero && bn2 != bnZero); break;\n            case Opcode.OP_BOOLAND:\n              bn = new BN((bn1.cmp(BN.Zero) !== 0 && bn2.cmp(BN.Zero) !== 0) + 0);\n              break;\n            // case Opcode.OP_BOOLOR:        bn = (bn1 != bnZero || bn2 != bnZero); break;\n            case Opcode.OP_BOOLOR:\n              bn = new BN((bn1.cmp(BN.Zero) !== 0 || bn2.cmp(BN.Zero) !== 0) + 0);\n              break;\n            // case Opcode.OP_NUMEQUAL:      bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUAL:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n            // case Opcode.OP_NUMEQUALVERIFY:    bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUALVERIFY:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n            // case Opcode.OP_NUMNOTEQUAL:     bn = (bn1 != bn2); break;\n            case Opcode.OP_NUMNOTEQUAL:\n              bn = new BN((bn1.cmp(bn2) !== 0) + 0);\n              break;\n            // case Opcode.OP_LESSTHAN:      bn = (bn1 < bn2); break;\n            case Opcode.OP_LESSTHAN:\n              bn = new BN((bn1.cmp(bn2) < 0) + 0);\n              break;\n            // case Opcode.OP_GREATERTHAN:     bn = (bn1 > bn2); break;\n            case Opcode.OP_GREATERTHAN:\n              bn = new BN((bn1.cmp(bn2) > 0) + 0);\n              break;\n            // case Opcode.OP_LESSTHANOREQUAL:   bn = (bn1 <= bn2); break;\n            case Opcode.OP_LESSTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) <= 0) + 0);\n              break;\n            // case Opcode.OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n            case Opcode.OP_GREATERTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) >= 0) + 0);\n              break;\n            case Opcode.OP_MIN:\n              bn = bn1.cmp(bn2) < 0 ? bn1 : bn2;\n              break;\n            case Opcode.OP_MAX:\n              bn = bn1.cmp(bn2) > 0 ? bn1 : bn2;\n              break;\n            // default:           assert(!'invalid opcode'); break; //TODO: does this ever occur?\n          }\n\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n          if (opcodenum === Opcode.OP_NUMEQUALVERIFY) {\n            // if (CastToBool(stacktop(-1)))\n            if (Interpreter.castToBool(this.stack[this.stack.length - 1])) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_NUMEQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n      case Opcode.OP_WITHIN:\n        {\n          // (x min max -- out)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 3], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          var bn3 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          //bool fValue = (bn2 <= bn1 && bn1 < bn3);\n          fValue = bn2.cmp(bn1) <= 0 && bn1.cmp(bn3) < 0;\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fValue ? Interpreter.true : Interpreter.false);\n        }\n        break;\n\n      //\n      // Crypto\n      //\n      case Opcode.OP_RIPEMD160:\n      case Opcode.OP_SHA1:\n      case Opcode.OP_SHA256:\n      case Opcode.OP_HASH160:\n      case Opcode.OP_HASH256:\n        {\n          // (in -- hash)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          //valtype vchHash((opcode == Opcode.OP_RIPEMD160 ||\n          //                 opcode == Opcode.OP_SHA1 || opcode == Opcode.OP_HASH160) ? 20 : 32);\n          var bufHash;\n          if (opcodenum === Opcode.OP_RIPEMD160) {\n            bufHash = Hash.ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_SHA1) {\n            bufHash = Hash.sha1(buf);\n          } else if (opcodenum === Opcode.OP_SHA256) {\n            bufHash = Hash.sha256(buf);\n          } else if (opcodenum === Opcode.OP_HASH160) {\n            bufHash = Hash.sha256ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_HASH256) {\n            bufHash = Hash.sha256sha256(buf);\n          }\n          this.stack.pop();\n          this.stack.push(bufHash);\n        }\n        break;\n      case Opcode.OP_CODESEPARATOR:\n        {\n          // Hash starts after the code separator\n          this.pbegincodehash = this.pc;\n        }\n        break;\n      case Opcode.OP_CHECKSIG:\n      case Opcode.OP_CHECKSIGVERIFY:\n        {\n          // (sig pubkey -- bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bufSig = this.stack[this.stack.length - 2];\n          bufPubkey = this.stack[this.stack.length - 1];\n          if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n            return false;\n          }\n\n          // Subset of script starting at the most recent codeseparator\n          // CScript scriptCode(pbegincodehash, pend);\n          subscript = new Script().set({\n            chunks: this.script.chunks.slice(this.pbegincodehash)\n          });\n\n          // Drop the signature, since there's no way for a signature to sign itself\n          var tmpScript = new Script().add(bufSig);\n          subscript.findAndDelete(tmpScript);\n          try {\n            sig = Signature.fromTxFormat(bufSig);\n            pubkey = PublicKey.fromBuffer(bufPubkey, false);\n            fSuccess = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis);\n          } catch (e) {\n            //invalid sig or pubkey\n            fSuccess = false;\n          }\n          if (!fSuccess && this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL && bufSig.length) {\n            this.errstr = 'SCRIPT_ERR_NULLFAIL';\n            return false;\n          }\n          this.stack.pop();\n          this.stack.pop();\n\n          // stack.push_back(fSuccess ? vchTrue : vchFalse);\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_CHECKSIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKSIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n      case Opcode.OP_CHECKMULTISIG:\n      case Opcode.OP_CHECKMULTISIGVERIFY:\n        {\n          // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n\n          var i = 1;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          var nKeysCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nKeysCount < 0 || nKeysCount > 20) {\n            this.errstr = 'SCRIPT_ERR_PUBKEY_COUNT';\n            return false;\n          }\n          this.nOpCount += nKeysCount;\n          if (this.nOpCount > 201) {\n            this.errstr = 'SCRIPT_ERR_OP_COUNT';\n            return false;\n          }\n          // int ikey = ++i;\n          var ikey = ++i;\n          i += nKeysCount;\n\n          // ikey2 is the position of last non-signature item in\n          // the stack. Top stack item = 1. With\n          // SCRIPT_VERIFY_NULLFAIL, this is used for cleanup if\n          // operation fails.\n          var ikey2 = nKeysCount + 2;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          var nSigsCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nSigsCount < 0 || nSigsCount > nKeysCount) {\n            this.errstr = 'SCRIPT_ERR_SIG_COUNT';\n            return false;\n          }\n          // int isig = ++i;\n          var isig = ++i;\n          i += nSigsCount;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          // Subset of script starting at the most recent codeseparator\n          subscript = new Script().set({\n            chunks: this.script.chunks.slice(this.pbegincodehash)\n          });\n\n          // Drop the signatures, since there's no way for a signature to sign itself\n          for (var k = 0; k < nSigsCount; k++) {\n            bufSig = this.stack[this.stack.length - isig - k];\n            subscript.findAndDelete(new Script().add(bufSig));\n          }\n          fSuccess = true;\n          while (fSuccess && nSigsCount > 0) {\n            // valtype& vchSig  = stacktop(-isig);\n            bufSig = this.stack[this.stack.length - isig];\n            // valtype& vchPubKey = stacktop(-ikey);\n            bufPubkey = this.stack[this.stack.length - ikey];\n            if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n              return false;\n            }\n            var fOk;\n            try {\n              sig = Signature.fromTxFormat(bufSig);\n              pubkey = PublicKey.fromBuffer(bufPubkey, false);\n              fOk = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis);\n            } catch (e) {\n              //invalid sig or pubkey\n              fOk = false;\n            }\n            if (fOk) {\n              isig++;\n              nSigsCount--;\n            }\n            ikey++;\n            nKeysCount--;\n\n            // If there are more signatures left than keys left,\n            // then too many signatures have failed\n            if (nSigsCount > nKeysCount) {\n              fSuccess = false;\n            }\n          }\n\n          // Clean up stack of actual arguments\n          while (i-- > 1) {\n            if (!fSuccess && this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL && !ikey2 && this.stack[this.stack.length - 1].length) {\n              this.errstr = 'SCRIPT_ERR_NULLFAIL';\n              return false;\n            }\n            if (ikey2 > 0) {\n              ikey2--;\n            }\n            this.stack.pop();\n          }\n\n          // A bug causes CHECKMULTISIG to consume one extra argument\n          // whose contents were not checked in any way.\n          //\n          // Unfortunately this is a potential source of mutability,\n          // so optionally verify it is exactly equal to zero prior\n          // to removing it from the stack.\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          if (this.flags & Interpreter.SCRIPT_VERIFY_NULLDUMMY && this.stack[this.stack.length - 1].length) {\n            this.errstr = 'SCRIPT_ERR_SIG_NULLDUMMY';\n            return false;\n          }\n          this.stack.pop();\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_CHECKMULTISIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKMULTISIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n      default:\n        this.errstr = 'SCRIPT_ERR_BAD_OPCODE';\n        return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["_","require","Script","Opcode","BN","Hash","Signature","PublicKey","Interpreter","obj","initialize","set","SIGVERSION_BASE","SIGVERSION_WITNESS_V0","SIGVERSION_TAPROOT","SIGVERSION_TAPSCRIPT","prototype","verifyWitnessProgram","version","program","witness","satoshis","flags","scriptPubKey","stack","length","errstr","scriptPubKeyBuffer","hash","sha256","toString","slice","add","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM","script","sigversion","evaluate","buf","castToBool","verify","scriptSig","scriptPubkey","tx","nin","Transaction","isUndefined","stackCopy","SCRIPT_VERIFY_SIGPUSHONLY","isPushOnly","SCRIPT_VERIFY_P2SH","hadWitness","SCRIPT_VERIFY_WITNESS","witnessValues","isWitnessProgram","toBuffer","isScriptHashOut","Error","redeemScriptSerialized","redeemScript","fromBuffer","pop","p2shWitnessValues","redeemScriptPush","toHex","SCRIPT_VERIFY_CLEANSTACK","module","exports","altstack","pc","pbegincodehash","nOpCount","vfExec","altack","true","Buffer","from","false","MAX_SCRIPT_ELEMENT_SIZE","LOCKTIME_THRESHOLD","LOCKTIME_THRESHOLD_BN","SCRIPT_VERIFY_NONE","SCRIPT_VERIFY_STRICTENC","SCRIPT_VERIFY_DERSIG","SCRIPT_VERIFY_LOW_S","SCRIPT_VERIFY_NULLDUMMY","SCRIPT_VERIFY_MINIMALDATA","SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS","SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY","SCRIPT_VERIFY_CHECKSEQUENCEVERIFY","SCRIPT_VERIFY_MINIMALIF","SCRIPT_VERIFY_NULLFAIL","SCRIPT_VERIFY_WITNESS_PUBKEYTYPE","SCRIPT_ENABLE_SIGHASH_FORKID","SCRIPT_ENABLE_REPLAY_PROTECTION","SCRIPT_ENABLE_MONOLITH_OPCODES","SEQUENCE_LOCKTIME_DISABLE_FLAG","SEQUENCE_LOCKTIME_TYPE_FLAG","SEQUENCE_LOCKTIME_MASK","i","checkSignatureEncoding","sig","isTxDER","fromTxFormat","hasLowS","hasDefinedHashtype","checkPubkeyEncoding","isValid","compressed","chunks","fSuccess","step","e","checkLockTime","nLockTime","lt","gte","gt","inputs","isFinal","checkSequence","nSequence","txToSequence","sequenceNumber","nLockTimeMask","txToSequenceMasked","nSequenceMasked","and","SEQUENCE_LOCKTIME_TYPE_FLAG_BN","fRequireMinimal","fExec","indexOf","buf1","buf2","spliced","n","x1","x2","bn","bn1","bn2","bufSig","bufPubkey","subscript","pubkey","fValue","chunk","opcodenum","OP_16","OP_CAT","OP_SUBSTR","OP_LEFT","OP_RIGHT","OP_INVERT","OP_AND","OP_OR","OP_XOR","OP_2MUL","OP_2DIV","OP_MUL","OP_DIV","OP_MOD","OP_LSHIFT","OP_RSHIFT","OP_PUSHDATA4","checkMinimalPush","push","len","OP_IF","OP_ENDIF","OP_1NEGATE","OP_1","OP_2","OP_3","OP_4","OP_5","OP_6","OP_7","OP_8","OP_9","OP_10","OP_11","OP_12","OP_13","OP_14","OP_15","toScriptNumBuffer","OP_NOP","OP_NOP2","OP_CHECKLOCKTIMEVERIFY","fromScriptNumBuffer","OP_NOP3","OP_CHECKSEQUENCEVERIFY","OP_NOP1","OP_NOP4","OP_NOP5","OP_NOP6","OP_NOP7","OP_NOP8","OP_NOP9","OP_NOP10","OP_NOTIF","OP_ELSE","OP_VERIFY","OP_RETURN","OP_TOALTSTACK","OP_FROMALTSTACK","OP_2DROP","OP_2DUP","OP_3DUP","buf3","OP_2OVER","OP_2ROT","splice","OP_2SWAP","OP_IFDUP","OP_DEPTH","OP_DROP","OP_NIP","OP_OVER","OP_PICK","OP_ROLL","toNumber","OP_ROT","x3","OP_SWAP","OP_TUCK","OP_SIZE","OP_EQUAL","fEqual","OP_1ADD","OP_1SUB","OP_NEGATE","OP_ABS","OP_NOT","OP_0NOTEQUAL","One","sub","neg","cmp","Zero","OP_ADD","OP_SUB","OP_BOOLAND","OP_BOOLOR","OP_NUMEQUAL","OP_NUMEQUALVERIFY","OP_NUMNOTEQUAL","OP_LESSTHAN","OP_GREATERTHAN","OP_LESSTHANOREQUAL","OP_GREATERTHANOREQUAL","OP_MIN","OP_MAX","OP_WITHIN","bn3","OP_RIPEMD160","OP_SHA1","OP_SHA256","OP_HASH256","bufHash","ripemd160","sha1","sha256ripemd160","sha256sha256","OP_CODESEPARATOR","OP_CHECKSIGVERIFY","tmpScript","findAndDelete","verifySignature","OP_CHECKMULTISIG","OP_CHECKMULTISIGVERIFY","nKeysCount","ikey","ikey2","nSigsCount","isig","k","fOk"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFG - Enginering/BLOCKTICK/blocktick_dApp/node_modules/bitcore-lib/lib/script/interpreter.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\n\nvar Script = require('./script');\nvar Opcode = require('../opcode');\nvar BN = require('../crypto/bn');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar PublicKey = require('../publickey');\n\n/**\n * Bitcoin transactions contain scripts. Each input has a script called the\n * scriptSig, and each output has a script called the scriptPubkey. To validate\n * an input, the input's script is concatenated with the referenced output script,\n * and the result is executed. If at the end of execution the stack contains a\n * \"true\" value, then the transaction is valid.\n *\n * The primary way to use this class is via the verify function.\n * e.g., Interpreter().verify( ... );\n */\nvar Interpreter = function Interpreter(obj) {\n  if (!(this instanceof Interpreter)) {\n    return new Interpreter(obj);\n  }\n  if (obj) {\n    this.initialize();\n    this.set(obj);\n  } else {\n    this.initialize();\n  }\n};\n\nInterpreter.SIGVERSION_BASE = 0;\nInterpreter.SIGVERSION_WITNESS_V0 = 1;\nInterpreter.SIGVERSION_TAPROOT = 2;\nInterpreter.SIGVERSION_TAPSCRIPT = 3;\n\nInterpreter.prototype.verifyWitnessProgram = function(version, program, witness, satoshis, flags) {\n\n  var scriptPubKey = new Script();\n  var stack = [];\n\n  if (version === 0) {\n    if (program.length === 32) {\n      if (witness.length === 0) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY';\n        return false;\n      }\n\n      var scriptPubKeyBuffer = witness[witness.length - 1];\n      scriptPubKey = new Script(scriptPubKeyBuffer);\n      var hash = Hash.sha256(scriptPubKeyBuffer);\n      if (hash.toString('hex') !== program.toString('hex')) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n\n      stack = witness.slice(0, -1);\n    } else if (program.length === 20) {\n      if (witness.length !== 2) {\n        this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH';\n        return false;\n      }\n\n      scriptPubKey.add(Opcode.OP_DUP);\n      scriptPubKey.add(Opcode.OP_HASH160);\n      scriptPubKey.add(program);\n      scriptPubKey.add(Opcode.OP_EQUALVERIFY);\n      scriptPubKey.add(Opcode.OP_CHECKSIG);\n\n      stack = witness;\n\n    } else {\n      this.errstr = 'SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH';\n      return false;\n    }\n  } else if ((flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)) {\n    this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM';\n    return false;\n  } else {\n    return true;\n  }\n\n  this.initialize();\n\n  this.set({\n    script: scriptPubKey,\n    stack: stack,\n    sigversion: Interpreter.SIGVERSION_WITNESS_V0,\n    satoshis: satoshis,\n    flags: flags,\n  });\n\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (this.stack.length !== 1) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE';\n    return false;\n  }\n\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n\n  return true;\n};\n\n\n\n/**\n * Verifies a Script by executing it and returns true if it is valid.\n * This function needs to be provided with the scriptSig and the scriptPubkey\n * separately.\n * @param {Script} scriptSig - the script's first part (corresponding to the tx input)\n * @param {Script} scriptPubkey - the script's last part (corresponding to the tx output)\n * @param {Transaction=} tx - the Transaction containing the scriptSig in one input (used\n *    to check signature validity for some opcodes like OP_CHECKSIG)\n * @param {number} nin - index of the transaction input containing the scriptSig verified.\n * @param {number} flags - evaluation flags. See Interpreter.SCRIPT_* constants\n * @param {number} witness - array of witness data\n * @param {number} satoshis - number of satoshis created by this output\n *\n * Translated from bitcoind's VerifyScript\n */\nInterpreter.prototype.verify = function(scriptSig, scriptPubkey, tx, nin, flags, witness, satoshis) {\n\n  var Transaction = require('../transaction');\n  if (_.isUndefined(tx)) {\n    tx = new Transaction();\n  }\n  if (_.isUndefined(nin)) {\n    nin = 0;\n  }\n  if (_.isUndefined(flags)) {\n    flags = 0;\n  }\n  if (_.isUndefined(witness)) {\n    witness = null;\n  }\n  if (_.isUndefined(satoshis)) {\n    satoshis = 0;\n  }\n\n  this.set({\n    script: scriptSig,\n    tx: tx,\n    nin: nin,\n    sigversion: Interpreter.SIGVERSION_BASE,\n    satoshis: 0,\n    flags: flags\n  });\n  var stackCopy;\n\n  if ((flags & Interpreter.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly()) {\n    this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n    return false;\n  }\n\n  // evaluate scriptSig\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (flags & Interpreter.SCRIPT_VERIFY_P2SH) {\n    stackCopy = this.stack.slice();\n  }\n\n  var stack = this.stack;\n  this.initialize();\n  this.set({\n    script: scriptPubkey,\n    stack: stack,\n    tx: tx,\n    nin: nin,\n    flags: flags\n  });\n\n  // evaluate scriptPubkey\n  if (!this.evaluate()) {\n    return false;\n  }\n\n  if (this.stack.length === 0) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_RESULT';\n    return false;\n  }\n\n  var buf = this.stack[this.stack.length - 1];\n  if (!Interpreter.castToBool(buf)) {\n    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';\n    return false;\n  }\n\n  var hadWitness = false;\n  if ((flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n    var witnessValues = {};\n    if (scriptPubkey.isWitnessProgram(witnessValues)) {\n      hadWitness = true;\n      if (scriptSig.toBuffer().length !== 0) {\n        return false;\n      }\n      if (!this.verifyWitnessProgram(witnessValues.version, witnessValues.program, witness, satoshis, this.flags)) {\n        return false;\n      }\n    }\n  }\n\n  // Additional validation for spend-to-script-hash transactions:\n  if ((flags & Interpreter.SCRIPT_VERIFY_P2SH) && scriptPubkey.isScriptHashOut()) {\n    // scriptSig must be literals-only or validation fails\n    if (!scriptSig.isPushOnly()) {\n      this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';\n      return false;\n    }\n\n    // stackCopy cannot be empty here, because if it was the\n    // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with\n    // an empty stack and the EvalScript above would return false.\n    if (stackCopy.length === 0) {\n      throw new Error('internal error - stack copy empty');\n    }\n\n    var redeemScriptSerialized = stackCopy[stackCopy.length - 1];\n    var redeemScript = Script.fromBuffer(redeemScriptSerialized);\n    stackCopy.pop();\n\n    this.initialize();\n    this.set({\n      script: redeemScript,\n      stack: stackCopy,\n      tx: tx,\n      nin: nin,\n      flags: flags\n    });\n\n    // evaluate redeemScript\n    if (!this.evaluate()) {\n      return false;\n    }\n\n    if (stackCopy.length === 0) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_P2SH_STACK';\n      return false;\n    }\n\n    if (!Interpreter.castToBool(stackCopy[stackCopy.length - 1])) {\n      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_P2SH_STACK';\n      return false;\n    }\n    if ((flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n      var p2shWitnessValues = {};\n      if (redeemScript.isWitnessProgram(p2shWitnessValues)) {\n        hadWitness = true;\n        var redeemScriptPush = new Script();\n        redeemScriptPush.add(redeemScript.toBuffer());\n        if (scriptSig.toHex() !== redeemScriptPush.toHex()) {\n          this.errstr = 'SCRIPT_ERR_WITNESS_MALLEATED_P2SH';\n          return false;\n        }\n\n        if (!this.verifyWitnessProgram(p2shWitnessValues.version, p2shWitnessValues.program, witness, satoshis, this.flags)) {\n          return false;\n        }\n        // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n        // for witness programs.\n        stack = [stack[0]];\n      }\n    }\n  }\n\n  // The CLEANSTACK check is only performed after potential P2SH evaluation,\n  // as the non-P2SH evaluation of a P2SH script will obviously not result in\n  // a clean stack (the P2SH inputs remain). The same holds for witness\n  // evaluation.\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_CLEANSTACK) != 0) {\n      // Disallow CLEANSTACK without P2SH, as otherwise a switch\n      // CLEANSTACK->P2SH+CLEANSTACK would be possible, which is not a\n      // softfork (and P2SH should be one).\n      if ((this.flags & Interpreter.SCRIPT_VERIFY_P2SH) == 0)\n        throw 'flags & SCRIPT_VERIFY_P2SH';\n\n      if (stackCopy.length != 1) {\n        this.errstr = 'SCRIPT_ERR_CLEANSTACK';\n        return false;\n      }\n  }\n\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_WITNESS)) {\n    if (!hadWitness && witness.length > 0) {\n      this.errstr = 'SCRIPT_ERR_WITNESS_UNEXPECTED';\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = Interpreter;\n\nInterpreter.prototype.initialize = function(obj) {\n  this.stack = [];\n  this.altstack = [];\n  this.pc = 0;\n  this.satoshis = 0;\n  this.sigversion = Interpreter.SIGVERSION_BASE;\n  this.pbegincodehash = 0;\n  this.nOpCount = 0;\n  this.vfExec = [];\n  this.errstr = '';\n  this.flags = 0;\n};\n\nInterpreter.prototype.set = function(obj) {\n  this.script = obj.script || this.script;\n  this.tx = obj.tx || this.tx;\n  this.nin = typeof obj.nin !== 'undefined' ? obj.nin : this.nin;\n  this.stack = obj.stack || this.stack;\n  this.altstack = obj.altack || this.altstack;\n  this.pc = typeof obj.pc !== 'undefined' ? obj.pc : this.pc;\n  this.pbegincodehash = typeof obj.pbegincodehash !== 'undefined' ? obj.pbegincodehash : this.pbegincodehash;\n  this.sigversion = typeof obj.sigversion !== 'undefined' ? obj.sigversion : this.sigversion;\n  this.satoshis = typeof obj.satoshis !== 'undefined' ? obj.satoshis : this.satoshis;\n  this.nOpCount = typeof obj.nOpCount !== 'undefined' ? obj.nOpCount : this.nOpCount;\n  this.vfExec = obj.vfExec || this.vfExec;\n  this.errstr = obj.errstr || this.errstr;\n  this.flags = typeof obj.flags !== 'undefined' ? obj.flags : this.flags;\n};\n\nInterpreter.true = Buffer.from([1]);\nInterpreter.false = Buffer.from([]);\n\nInterpreter.MAX_SCRIPT_ELEMENT_SIZE = 520;\n\nInterpreter.LOCKTIME_THRESHOLD = 500000000;\nInterpreter.LOCKTIME_THRESHOLD_BN = new BN(Interpreter.LOCKTIME_THRESHOLD);\n\n// flags taken from bitcoind\n// bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\nInterpreter.SCRIPT_VERIFY_NONE = 0;\n\n// Making v1-v16 witness program non-standard\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1 << 12);\n\n// Evaluate P2SH subscripts (softfork safe, BIP16).\nInterpreter.SCRIPT_VERIFY_P2SH = (1 << 0);\n\n// Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n// Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n// skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\nInterpreter.SCRIPT_VERIFY_STRICTENC = (1 << 1);\n\n// Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\nInterpreter.SCRIPT_VERIFY_DERSIG = (1 << 2);\n\n// Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n// (softfork safe, BIP62 rule 5).\nInterpreter.SCRIPT_VERIFY_LOW_S = (1 << 3);\n\n// verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\nInterpreter.SCRIPT_VERIFY_NULLDUMMY = (1 << 4);\n\n// Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).\nInterpreter.SCRIPT_VERIFY_SIGPUSHONLY = (1 << 5);\n\n// Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct\n// pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating\n// any other push causes the script to fail (BIP62 rule 3).\n// In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).\n// (softfork safe)\nInterpreter.SCRIPT_VERIFY_MINIMALDATA = (1 << 6);\n\n// Discourage use of NOPs reserved for upgrades (NOP1-10)\n//\n// Provided so that nodes can avoid accepting or mining transactions\n// containing executed NOP's whose meaning may change after a soft-fork,\n// thus rendering the script invalid; with this flag set executing\n// discouraged NOPs fails the script. This verification flag will never be\n// a mandatory flag applied to scripts in a block. NOPs that are not\n// executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = (1 << 7);\n\n\n// Require that only a single stack element remains after evaluation. This\n// changes the success criterion from \"At least one stack element must\n// remain, and when interpreted as a boolean, it must be true\" to \"Exactly\n// one stack element must remain, and when interpreted as a boolean, it must\n// be true\".\n// (softfork safe, BIP62 rule 6)\n// Note: CLEANSTACK should never be used without P2SH or WITNESS.\nInterpreter.SCRIPT_VERIFY_CLEANSTACK = (1 << 8),\n\n// CLTV See BIP65 for details.\nInterpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1 << 9);\nInterpreter.SCRIPT_VERIFY_WITNESS = (1 << 10);\nInterpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = (1 << 11);\n\n// support CHECKSEQUENCEVERIFY opcode\n//\n// See BIP112 for details\nInterpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1 << 10);\n\n//\n// Segwit script only: Require the argument of OP_IF/NOTIF to be exactly\n// 0x01 or empty vector\n//\nInterpreter.SCRIPT_VERIFY_MINIMALIF = (1 << 13);\n\n\n// Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n//\nInterpreter.SCRIPT_VERIFY_NULLFAIL = (1 << 14);\n\n// Public keys in scripts must be compressed\n//\nInterpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1 << 15);\n\n// Do we accept signature using SIGHASH_FORKID\n//\nInterpreter.SCRIPT_ENABLE_SIGHASH_FORKID = (1 << 16);\n\n// Do we accept activate replay protection using a different fork id.\n//\nInterpreter.SCRIPT_ENABLE_REPLAY_PROTECTION = (1 << 17);\n\n// Enable new opcodes.\n//\nInterpreter.SCRIPT_ENABLE_MONOLITH_OPCODES = (1 << 18);\n\n\n\n/* Below flags apply in the context of BIP 68*/\n/**\n * If this flag set, CTxIn::nSequence is NOT interpreted as a relative\n * lock-time.\n */\nInterpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time and this flag is set,\n * the relative lock-time has units of 512 seconds, otherwise it specifies\n * blocks with a granularity of 1.\n */\nInterpreter.SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n\n/**\n * If CTxIn::nSequence encodes a relative lock-time, this mask is applied to\n * extract that lock-time from the sequence field.\n */\nInterpreter.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n\n\nInterpreter.castToBool = function(buf) {\n  for (var i = 0; i < buf.length; i++) {\n    if (buf[i] !== 0) {\n      // can be negative zero\n      if (i === buf.length - 1 && buf[i] === 0x80) {\n        return false;\n      }\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Translated from bitcoind's CheckSignatureEncoding\n */\nInterpreter.prototype.checkSignatureEncoding = function(buf) {\n  var sig;\n\n    // Empty signature. Not strictly DER encoded, but allowed to provide a\n    // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n    if (buf.length == 0) {\n        return true;\n    }\n\n  if ((this.flags & (Interpreter.SCRIPT_VERIFY_DERSIG | Interpreter.SCRIPT_VERIFY_LOW_S | Interpreter.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Signature.isTxDER(buf)) {\n    this.errstr = 'SCRIPT_ERR_SIG_DER_INVALID_FORMAT';\n    return false;\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_LOW_S) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasLowS()) {\n      this.errstr = 'SCRIPT_ERR_SIG_DER_HIGH_S';\n      return false;\n    }\n  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0) {\n    sig = Signature.fromTxFormat(buf);\n    if (!sig.hasDefinedHashtype()) {\n      this.errstr = 'SCRIPT_ERR_SIG_HASHTYPE';\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Translated from bitcoind's CheckPubKeyEncoding\n */\nInterpreter.prototype.checkPubkeyEncoding = function(buf) {\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0 && !PublicKey.isValid(buf)) {\n    this.errstr = 'SCRIPT_ERR_PUBKEYTYPE';\n    return false;\n  }\n\n  // Only compressed keys are accepted in segwit\n  if ((this.flags & Interpreter.SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && this.sigversion == Interpreter.SIGVERSION_WITNESS_V0 && !PublicKey.fromBuffer(buf).compressed) {\n    this.errstr = 'SCRIPT_ERR_WITNESS_PUBKEYTYPE';\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Based on bitcoind's EvalScript function, with the inner loop moved to\n * Interpreter.prototype.step()\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.evaluate = function() {\n  if (this.script.toBuffer().length > 10000) {\n    this.errstr = 'SCRIPT_ERR_SCRIPT_SIZE';\n    return false;\n  }\n\n  try {\n    while (this.pc < this.script.chunks.length) {\n      var fSuccess = this.step();\n      if (!fSuccess) {\n        return false;\n      }\n    }\n\n    // Size limits\n    if (this.stack.length + this.altstack.length > 1000) {\n      this.errstr = 'SCRIPT_ERR_STACK_SIZE';\n      return false;\n    }\n  } catch (e) {\n    this.errstr = 'SCRIPT_ERR_UNKNOWN_ERROR: ' + e;\n    return false;\n  }\n\n  if (this.vfExec.length > 0) {\n    this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks a locktime parameter with the transaction's locktime.\n * There are two times of nLockTime: lock-by-blockheight and lock-by-blocktime,\n * distinguished by whether nLockTime < LOCKTIME_THRESHOLD = 500000000\n *\n * See the corresponding code on bitcoin core:\n * https://github.com/bitcoin/bitcoin/blob/ffd75adce01a78b3461b3ff05bcc2b530a9ce994/src/script/interpreter.cpp#L1129\n *\n * @param {BN} nLockTime the locktime read from the script\n * @return {boolean} true if the transaction's locktime is less than or equal to\n *                   the transaction's locktime\n */\nInterpreter.prototype.checkLockTime = function(nLockTime) {\n\n  // We want to compare apples to apples, so fail the script\n  // unless the type of nLockTime being tested is the same as\n  // the nLockTime in the transaction.\n  if (!(\n    (this.tx.nLockTime <  Interpreter.LOCKTIME_THRESHOLD && nLockTime.lt(Interpreter.LOCKTIME_THRESHOLD_BN)) ||\n    (this.tx.nLockTime >= Interpreter.LOCKTIME_THRESHOLD && nLockTime.gte(Interpreter.LOCKTIME_THRESHOLD_BN))\n  )) {\n    return false;\n  }\n\n  // Now that we know we're comparing apples-to-apples, the\n  // comparison is a simple numeric one.\n  if (nLockTime.gt(new BN(this.tx.nLockTime))) {\n    return false;\n  }\n\n  // Finally the nLockTime feature can be disabled and thus\n  // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n  // finalized by setting nSequence to maxint. The\n  // transaction would be allowed into the blockchain, making\n  // the opcode ineffective.\n  //\n  // Testing if this vin is not final is sufficient to\n  // prevent this condition. Alternatively we could test all\n  // inputs, but testing just this input minimizes the data\n  // required to prove correct CHECKLOCKTIMEVERIFY execution.\n  if (!this.tx.inputs[this.nin].isFinal()) {\n    return false;\n  }\n\n  return true;\n}\n\n\n/**\n * Checks a sequence parameter with the transaction's sequence.\n * @param {BN} nSequence the sequence read from the script\n * @return {boolean} true if the transaction's sequence is less than or equal to\n *                   the transaction's sequence \n */\nInterpreter.prototype.checkSequence = function(nSequence) {\n\n    // Relative lock times are supported by comparing the passed in operand to\n    // the sequence number of the input.\n    var txToSequence = this.tx.inputs[this.nin].sequenceNumber;\n\n    // Fail if the transaction's version number is not set high enough to\n    // trigger BIP 68 rules.\n    if (this.tx.version < 2) {\n        return false;\n    }\n\n    // Sequence numbers with their most significant bit set are not consensus\n    // constrained. Testing that the transaction's sequence number do not have\n    // this bit set prevents using this property to get around a\n    // CHECKSEQUENCEVERIFY check.\n    if (txToSequence & SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n        return false;\n    }\n\n    // Mask off any bits that do not have consensus-enforced meaning before\n    // doing the integer comparisons\n    var nLockTimeMask =\n        Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG | Interpreter.SEQUENCE_LOCKTIME_MASK;\n    var txToSequenceMasked = new BN(txToSequence & nLockTimeMask);\n    var nSequenceMasked = nSequence.and(nLockTimeMask);\n\n    // There are two kinds of nSequence: lock-by-blockheight and\n    // lock-by-blocktime, distinguished by whether nSequenceMasked <\n    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n    //\n    // We want to compare apples to apples, so fail the script unless the type\n    // of nSequenceMasked being tested is the same as the nSequenceMasked in the\n    // transaction.\n    var SEQUENCE_LOCKTIME_TYPE_FLAG_BN = new BN(Interpreter.SEQUENCE_LOCKTIME_TYPE_FLAG);\n    \n    if (!((txToSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)  &&\n           nSequenceMasked.lt(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)) ||\n          (txToSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN) &&\n           nSequenceMasked.gte(SEQUENCE_LOCKTIME_TYPE_FLAG_BN)))) {\n        return false;\n    }\n\n    // Now that we know we're comparing apples-to-apples, the comparison is a\n    // simple numeric one.\n    if (nSequenceMasked.gt(txToSequenceMasked)) {\n        return false;\n    }\n    return true;\n  }\n\n/** \n * Based on the inner loop of bitcoind's EvalScript function\n * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104\n */\nInterpreter.prototype.step = function() {\n  var fRequireMinimal = (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALDATA) !== 0;\n\n  //bool fExec = !count(vfExec.begin(), vfExec.end(), false);\n  var fExec = (this.vfExec.indexOf(false) === -1);\n  var buf, buf1, buf2, spliced, n, x1, x2, bn, bn1, bn2, bufSig, bufPubkey, subscript;\n  var sig, pubkey;\n  var fValue, fSuccess;\n\n  // Read instruction\n  var chunk = this.script.chunks[this.pc];\n  this.pc++;\n  var opcodenum = chunk.opcodenum;\n  if (_.isUndefined(opcodenum)) {\n    this.errstr = 'SCRIPT_ERR_UNDEFINED_OPCODE';\n    return false;\n  }\n  if (chunk.buf && chunk.buf.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {\n    this.errstr = 'SCRIPT_ERR_PUSH_SIZE';\n    return false;\n  }\n\n  // Note how Opcode.OP_RESERVED does not count towards the opcode limit.\n  if (opcodenum > Opcode.OP_16 && ++(this.nOpCount) > 201) {\n    this.errstr = 'SCRIPT_ERR_OP_COUNT';\n    return false;\n  }\n\n\n  if (opcodenum === Opcode.OP_CAT ||\n    opcodenum === Opcode.OP_SUBSTR ||\n    opcodenum === Opcode.OP_LEFT ||\n    opcodenum === Opcode.OP_RIGHT ||\n    opcodenum === Opcode.OP_INVERT ||\n    opcodenum === Opcode.OP_AND ||\n    opcodenum === Opcode.OP_OR ||\n    opcodenum === Opcode.OP_XOR ||\n    opcodenum === Opcode.OP_2MUL ||\n    opcodenum === Opcode.OP_2DIV ||\n    opcodenum === Opcode.OP_MUL ||\n    opcodenum === Opcode.OP_DIV ||\n    opcodenum === Opcode.OP_MOD ||\n    opcodenum === Opcode.OP_LSHIFT ||\n    opcodenum === Opcode.OP_RSHIFT) {\n    this.errstr = 'SCRIPT_ERR_DISABLED_OPCODE';\n    return false;\n  }\n\n  if (fExec && 0 <= opcodenum && opcodenum <= Opcode.OP_PUSHDATA4) {\n    if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {\n      this.errstr = 'SCRIPT_ERR_MINIMALDATA';\n      return false;\n    }\n    if (!chunk.buf) {\n      this.stack.push(Interpreter.false);\n    } else if (chunk.len !== chunk.buf.length) {\n      throw new Error('Length of push value not equal to length of data');\n    } else {\n      this.stack.push(chunk.buf);\n    }\n  } else if (fExec || (Opcode.OP_IF <= opcodenum && opcodenum <= Opcode.OP_ENDIF)) {\n    switch (opcodenum) {\n      // Push value\n      case Opcode.OP_1NEGATE:\n      case Opcode.OP_1:\n      case Opcode.OP_2:\n      case Opcode.OP_3:\n      case Opcode.OP_4:\n      case Opcode.OP_5:\n      case Opcode.OP_6:\n      case Opcode.OP_7:\n      case Opcode.OP_8:\n      case Opcode.OP_9:\n      case Opcode.OP_10:\n      case Opcode.OP_11:\n      case Opcode.OP_12:\n      case Opcode.OP_13:\n      case Opcode.OP_14:\n      case Opcode.OP_15:\n      case Opcode.OP_16:\n        {\n          // ( -- value)\n          // ScriptNum bn((int)opcode - (int)(Opcode.OP_1 - 1));\n          n = opcodenum - (Opcode.OP_1 - 1);\n          buf = new BN(n).toScriptNumBuffer();\n          this.stack.push(buf);\n          // The result of these opcodes should always be the minimal way to push the data\n          // they push, so no need for a CheckMinimalPush here.\n        }\n        break;\n\n\n        //\n        // Control\n        //\n      case Opcode.OP_NOP:\n        break;\n\n      case Opcode.OP_NOP2:\n      case Opcode.OP_CHECKLOCKTIMEVERIFY:\n\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {\n          // not enabled; treat as a NOP2\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n        // Note that elsewhere numeric opcodes are limited to\n        // operands in the range -2**31+1 to 2**31-1, however it is\n        // legal for opcodes to produce results exceeding that\n        // range. This limitation is implemented by CScriptNum's\n        // default 4-byte limit.\n        //\n        // If we kept to that limit we'd have a year 2038 problem,\n        // even though the nLockTime field in transactions\n        // themselves is uint32 which only becomes meaningless\n        // after the year 2106.\n        //\n        // Thus as a special case we tell CScriptNum to accept up\n        // to 5-byte bignums, which are good until 2**39-1, well\n        // beyond the 2**32-1 limit of the nLockTime field itself.\n        var nLockTime = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKLOCKTIMEVERIFY.\n        if (nLockTime.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkLockTime(nLockTime)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n\n      case Opcode.OP_NOP3:\n      case Opcode.OP_CHECKSEQUENCEVERIFY:\n\n        if (!(this.flags & Interpreter.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n          // not enabled; treat as a NOP3\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n          break;\n        }\n\n        if (this.stack.length < 1) {\n          this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n          return false;\n        }\n\n\n        // nSequence, like nLockTime, is a 32-bit unsigned\n        // integer field. See the comment in CHECKLOCKTIMEVERIFY\n        // regarding 5-byte numeric operands.\n\n        var nSequence = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal, 5);\n\n\n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKSEQUENCEVERIFY.\n        if (nSequence.lt(new BN(0))) {\n          this.errstr = 'SCRIPT_ERR_NEGATIVE_LOCKTIME';\n          return false;\n        }\n\n        // To provide for future soft-fork extensibility, if the\n        // operand has the disabled lock-time flag set,\n        // CHECKSEQUENCEVERIFY behaves as a NOP.\n        if ((nSequence &\n          Interpreter.SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0) {\n          break;\n        }\n\n        // Actually compare the specified lock time with the transaction.\n        if (!this.checkSequence(nSequence)) {\n          this.errstr = 'SCRIPT_ERR_UNSATISFIED_LOCKTIME';\n          return false;\n        }\n        break;\n\n\n\n      case Opcode.OP_NOP1:\n      case Opcode.OP_NOP4:\n      case Opcode.OP_NOP5:\n      case Opcode.OP_NOP6:\n      case Opcode.OP_NOP7:\n      case Opcode.OP_NOP8:\n      case Opcode.OP_NOP9:\n      case Opcode.OP_NOP10:\n        {\n          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';\n            return false;\n          }\n        }\n        break;\n\n      case Opcode.OP_IF:\n      case Opcode.OP_NOTIF:\n        {\n          // <expression> if [statements] [else [statements]] endif\n          // bool fValue = false;\n          fValue = false;\n          if (fExec) {\n            if (this.stack.length < 1) {\n              this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n              return false;\n            }\n\n            buf = this.stack[this.stack.length - 1];\n\n            if (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALIF) {\n              buf = this.stack[this.stack.length - 1];\n              if (buf.length > 1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n              if (buf.length == 1 && buf[0]!=1) {\n                this.errstr = 'SCRIPT_ERR_MINIMALIF';\n                return false;\n              }\n            }\n            fValue = Interpreter.castToBool(buf);\n            if (opcodenum === Opcode.OP_NOTIF) {\n              fValue = !fValue;\n            }\n            this.stack.pop();\n          }\n          this.vfExec.push(fValue);\n        }\n        break;\n\n      case Opcode.OP_ELSE:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec[this.vfExec.length - 1] = !this.vfExec[this.vfExec.length - 1];\n        }\n        break;\n\n      case Opcode.OP_ENDIF:\n        {\n          if (this.vfExec.length === 0) {\n            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';\n            return false;\n          }\n          this.vfExec.pop();\n        }\n        break;\n\n      case Opcode.OP_VERIFY:\n        {\n          // (true -- ) or\n          // (false -- false) and return\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.pop();\n          } else {\n            this.errstr = 'SCRIPT_ERR_VERIFY';\n            return false;\n          }\n        }\n        break;\n\n      case Opcode.OP_RETURN:\n        {\n          this.errstr = 'SCRIPT_ERR_OP_RETURN';\n          return false;\n        }\n        break;\n\n\n        //\n        // Stack ops\n        //\n      case Opcode.OP_TOALTSTACK:\n        {\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.altstack.push(this.stack.pop());\n        }\n        break;\n\n      case Opcode.OP_FROMALTSTACK:\n        {\n          if (this.altstack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_ALTSTACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.altstack.pop());\n        }\n        break;\n\n      case Opcode.OP_2DROP:\n        {\n          // (x1 x2 -- )\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n          this.stack.pop();\n        }\n        break;\n\n      case Opcode.OP_2DUP:\n        {\n          // (x1 x2 -- x1 x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n\n      case Opcode.OP_3DUP:\n        {\n          // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 3];\n          buf2 = this.stack[this.stack.length - 2];\n          var buf3 = this.stack[this.stack.length - 1];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n          this.stack.push(buf3);\n        }\n        break;\n\n      case Opcode.OP_2OVER:\n        {\n          // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 4];\n          buf2 = this.stack[this.stack.length - 3];\n          this.stack.push(buf1);\n          this.stack.push(buf2);\n        }\n        break;\n\n      case Opcode.OP_2ROT:\n        {\n          // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\n          if (this.stack.length < 6) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 6, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n\n      case Opcode.OP_2SWAP:\n        {\n          // (x1 x2 x3 x4 -- x3 x4 x1 x2)\n          if (this.stack.length < 4) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          spliced = this.stack.splice(this.stack.length - 4, 2);\n          this.stack.push(spliced[0]);\n          this.stack.push(spliced[1]);\n        }\n        break;\n\n      case Opcode.OP_IFDUP:\n        {\n          // (x - 0 | x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          fValue = Interpreter.castToBool(buf);\n          if (fValue) {\n            this.stack.push(buf);\n          }\n        }\n        break;\n\n      case Opcode.OP_DEPTH:\n        {\n          // -- stacksize\n          buf = new BN(this.stack.length).toScriptNumBuffer();\n          this.stack.push(buf);\n        }\n        break;\n\n      case Opcode.OP_DROP:\n        {\n          // (x -- )\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.pop();\n        }\n        break;\n\n      case Opcode.OP_DUP:\n        {\n          // (x -- x x)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 1]);\n        }\n        break;\n\n      case Opcode.OP_NIP:\n        {\n          // (x1 x2 -- x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 1);\n        }\n        break;\n\n      case Opcode.OP_OVER:\n        {\n          // (x1 x2 -- x1 x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.push(this.stack[this.stack.length - 2]);\n        }\n        break;\n\n      case Opcode.OP_PICK:\n      case Opcode.OP_ROLL:\n        {\n          // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)\n          // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          n = bn.toNumber();\n          this.stack.pop();\n          if (n < 0 || n >= this.stack.length) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - n - 1];\n          if (opcodenum === Opcode.OP_ROLL) {\n            this.stack.splice(this.stack.length - n - 1, 1);\n          }\n          this.stack.push(buf);\n        }\n        break;\n\n      case Opcode.OP_ROT:\n        {\n          // (x1 x2 x3 -- x2 x3 x1)\n          //  x2 x1 x3  after first swap\n          //  x2 x3 x1  after second swap\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 3];\n          x2 = this.stack[this.stack.length - 2];\n          var x3 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 3] = x2;\n          this.stack[this.stack.length - 2] = x3;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n\n      case Opcode.OP_SWAP:\n        {\n          // (x1 x2 -- x2 x1)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          x1 = this.stack[this.stack.length - 2];\n          x2 = this.stack[this.stack.length - 1];\n          this.stack[this.stack.length - 2] = x2;\n          this.stack[this.stack.length - 1] = x1;\n        }\n        break;\n\n      case Opcode.OP_TUCK:\n        {\n          // (x1 x2 -- x2 x1 x2)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);\n        }\n        break;\n\n\n      case Opcode.OP_SIZE:\n        {\n          // (in -- in size)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn = new BN(this.stack[this.stack.length - 1].length);\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n\n\n        //\n        // Bitwise logic\n        //\n      case Opcode.OP_EQUAL:\n      case Opcode.OP_EQUALVERIFY:\n        //case Opcode.OP_NOTEQUAL: // use Opcode.OP_NUMNOTEQUAL\n        {\n          // (x1 x2 - bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf1 = this.stack[this.stack.length - 2];\n          buf2 = this.stack[this.stack.length - 1];\n          var fEqual = buf1.toString('hex') === buf2.toString('hex');\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fEqual ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_EQUALVERIFY) {\n            if (fEqual) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_EQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n\n        //\n        // Numeric\n        //\n      case Opcode.OP_1ADD:\n      case Opcode.OP_1SUB:\n      case Opcode.OP_NEGATE:\n      case Opcode.OP_ABS:\n      case Opcode.OP_NOT:\n      case Opcode.OP_0NOTEQUAL:\n        {\n          // (in -- out)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);\n          switch (opcodenum) {\n            case Opcode.OP_1ADD:\n              bn = bn.add(BN.One);\n              break;\n            case Opcode.OP_1SUB:\n              bn = bn.sub(BN.One);\n              break;\n            case Opcode.OP_NEGATE:\n              bn = bn.neg();\n              break;\n            case Opcode.OP_ABS:\n              if (bn.cmp(BN.Zero) < 0) {\n                bn = bn.neg();\n              }\n              break;\n            case Opcode.OP_NOT:\n              bn = new BN((bn.cmp(BN.Zero) === 0) + 0);\n              break;\n            case Opcode.OP_0NOTEQUAL:\n              bn = new BN((bn.cmp(BN.Zero) !== 0) + 0);\n              break;\n              //default:      assert(!'invalid opcode'); break; // TODO: does this ever occur?\n          }\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n        }\n        break;\n\n      case Opcode.OP_ADD:\n      case Opcode.OP_SUB:\n      case Opcode.OP_BOOLAND:\n      case Opcode.OP_BOOLOR:\n      case Opcode.OP_NUMEQUAL:\n      case Opcode.OP_NUMEQUALVERIFY:\n      case Opcode.OP_NUMNOTEQUAL:\n      case Opcode.OP_LESSTHAN:\n      case Opcode.OP_GREATERTHAN:\n      case Opcode.OP_LESSTHANOREQUAL:\n      case Opcode.OP_GREATERTHANOREQUAL:\n      case Opcode.OP_MIN:\n      case Opcode.OP_MAX:\n        {\n          // (x1 x2 -- out)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          bn = new BN(0);\n\n          switch (opcodenum) {\n            case Opcode.OP_ADD:\n              bn = bn1.add(bn2);\n              break;\n\n            case Opcode.OP_SUB:\n              bn = bn1.sub(bn2);\n              break;\n\n              // case Opcode.OP_BOOLAND:       bn = (bn1 != bnZero && bn2 != bnZero); break;\n            case Opcode.OP_BOOLAND:\n              bn = new BN(((bn1.cmp(BN.Zero) !== 0) && (bn2.cmp(BN.Zero) !== 0)) + 0);\n              break;\n              // case Opcode.OP_BOOLOR:        bn = (bn1 != bnZero || bn2 != bnZero); break;\n            case Opcode.OP_BOOLOR:\n              bn = new BN(((bn1.cmp(BN.Zero) !== 0) || (bn2.cmp(BN.Zero) !== 0)) + 0);\n              break;\n              // case Opcode.OP_NUMEQUAL:      bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUAL:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n              // case Opcode.OP_NUMEQUALVERIFY:    bn = (bn1 == bn2); break;\n            case Opcode.OP_NUMEQUALVERIFY:\n              bn = new BN((bn1.cmp(bn2) === 0) + 0);\n              break;\n              // case Opcode.OP_NUMNOTEQUAL:     bn = (bn1 != bn2); break;\n            case Opcode.OP_NUMNOTEQUAL:\n              bn = new BN((bn1.cmp(bn2) !== 0) + 0);\n              break;\n              // case Opcode.OP_LESSTHAN:      bn = (bn1 < bn2); break;\n            case Opcode.OP_LESSTHAN:\n              bn = new BN((bn1.cmp(bn2) < 0) + 0);\n              break;\n              // case Opcode.OP_GREATERTHAN:     bn = (bn1 > bn2); break;\n            case Opcode.OP_GREATERTHAN:\n              bn = new BN((bn1.cmp(bn2) > 0) + 0);\n              break;\n              // case Opcode.OP_LESSTHANOREQUAL:   bn = (bn1 <= bn2); break;\n            case Opcode.OP_LESSTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) <= 0) + 0);\n              break;\n              // case Opcode.OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n            case Opcode.OP_GREATERTHANOREQUAL:\n              bn = new BN((bn1.cmp(bn2) >= 0) + 0);\n              break;\n            case Opcode.OP_MIN:\n              bn = (bn1.cmp(bn2) < 0 ? bn1 : bn2);\n              break;\n            case Opcode.OP_MAX:\n              bn = (bn1.cmp(bn2) > 0 ? bn1 : bn2);\n              break;\n              // default:           assert(!'invalid opcode'); break; //TODO: does this ever occur?\n          }\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(bn.toScriptNumBuffer());\n\n          if (opcodenum === Opcode.OP_NUMEQUALVERIFY) {\n            // if (CastToBool(stacktop(-1)))\n            if (Interpreter.castToBool(this.stack[this.stack.length - 1])) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_NUMEQUALVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      case Opcode.OP_WITHIN:\n        {\n          // (x min max -- out)\n          if (this.stack.length < 3) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 3], fRequireMinimal);\n          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);\n          var bn3 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);\n          //bool fValue = (bn2 <= bn1 && bn1 < bn3);\n          fValue = (bn2.cmp(bn1) <= 0) && (bn1.cmp(bn3) < 0);\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.pop();\n          this.stack.push(fValue ? Interpreter.true : Interpreter.false);\n        }\n        break;\n\n\n        //\n        // Crypto\n        //\n      case Opcode.OP_RIPEMD160:\n      case Opcode.OP_SHA1:\n      case Opcode.OP_SHA256:\n      case Opcode.OP_HASH160:\n      case Opcode.OP_HASH256:\n        {\n          // (in -- hash)\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          buf = this.stack[this.stack.length - 1];\n          //valtype vchHash((opcode == Opcode.OP_RIPEMD160 ||\n          //                 opcode == Opcode.OP_SHA1 || opcode == Opcode.OP_HASH160) ? 20 : 32);\n          var bufHash;\n          if (opcodenum === Opcode.OP_RIPEMD160) {\n            bufHash = Hash.ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_SHA1) {\n            bufHash = Hash.sha1(buf);\n          } else if (opcodenum === Opcode.OP_SHA256) {\n            bufHash = Hash.sha256(buf);\n          } else if (opcodenum === Opcode.OP_HASH160) {\n            bufHash = Hash.sha256ripemd160(buf);\n          } else if (opcodenum === Opcode.OP_HASH256) {\n            bufHash = Hash.sha256sha256(buf);\n          }\n          this.stack.pop();\n          this.stack.push(bufHash);\n        }\n        break;\n\n      case Opcode.OP_CODESEPARATOR:\n        {\n          // Hash starts after the code separator\n          this.pbegincodehash = this.pc;\n        }\n        break;\n\n      case Opcode.OP_CHECKSIG:\n      case Opcode.OP_CHECKSIGVERIFY:\n        {\n          // (sig pubkey -- bool)\n          if (this.stack.length < 2) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          bufSig = this.stack[this.stack.length - 2];\n          bufPubkey = this.stack[this.stack.length - 1];\n          if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n            return false;\n          }\n\n          // Subset of script starting at the most recent codeseparator\n          // CScript scriptCode(pbegincodehash, pend);\n          subscript = new Script().set({\n            chunks: this.script.chunks.slice(this.pbegincodehash)\n          });\n\n          // Drop the signature, since there's no way for a signature to sign itself\n          var tmpScript = new Script().add(bufSig);\n          subscript.findAndDelete(tmpScript);\n\n          try {\n            sig = Signature.fromTxFormat(bufSig);\n            pubkey = PublicKey.fromBuffer(bufPubkey, false);\n            fSuccess = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis);\n          } catch (e) {\n            //invalid sig or pubkey\n            fSuccess = false;\n          }\n\n          if (!fSuccess && (this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL) &&\n            bufSig.length) {\n            this.errstr = 'SCRIPT_ERR_NULLFAIL';\n            return false;\n          }\n\n          this.stack.pop();\n          this.stack.pop();\n\n          // stack.push_back(fSuccess ? vchTrue : vchFalse);\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n          if (opcodenum === Opcode.OP_CHECKSIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKSIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      case Opcode.OP_CHECKMULTISIG:\n      case Opcode.OP_CHECKMULTISIGVERIFY:\n        {\n          // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)\n\n          var i = 1;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          var nKeysCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nKeysCount < 0 || nKeysCount > 20) {\n            this.errstr = 'SCRIPT_ERR_PUBKEY_COUNT';\n            return false;\n          }\n          this.nOpCount += nKeysCount;\n          if (this.nOpCount > 201) {\n            this.errstr = 'SCRIPT_ERR_OP_COUNT';\n            return false;\n          }\n          // int ikey = ++i;\n          var ikey = ++i;\n          i += nKeysCount;\n\n          // ikey2 is the position of last non-signature item in\n          // the stack. Top stack item = 1. With\n          // SCRIPT_VERIFY_NULLFAIL, this is used for cleanup if\n          // operation fails.\n          var ikey2 = nKeysCount + 2;\n\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          var nSigsCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();\n          if (nSigsCount < 0 || nSigsCount > nKeysCount) {\n            this.errstr = 'SCRIPT_ERR_SIG_COUNT';\n            return false;\n          }\n          // int isig = ++i;\n          var isig = ++i;\n          i += nSigsCount;\n          if (this.stack.length < i) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n\n          // Subset of script starting at the most recent codeseparator\n          subscript = new Script().set({\n            chunks: this.script.chunks.slice(this.pbegincodehash)\n          });\n\n          // Drop the signatures, since there's no way for a signature to sign itself\n          for (var k = 0; k < nSigsCount; k++) {\n            bufSig = this.stack[this.stack.length - isig - k];\n            subscript.findAndDelete(new Script().add(bufSig));\n          }\n\n          fSuccess = true;\n          while (fSuccess && nSigsCount > 0) {\n            // valtype& vchSig  = stacktop(-isig);\n            bufSig = this.stack[this.stack.length - isig];\n            // valtype& vchPubKey = stacktop(-ikey);\n            bufPubkey = this.stack[this.stack.length - ikey];\n\n            if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {\n              return false;\n            }\n\n            var fOk;\n            try {\n              sig = Signature.fromTxFormat(bufSig);\n              pubkey = PublicKey.fromBuffer(bufPubkey, false);\n              fOk = this.tx.verifySignature(sig, pubkey, this.nin, subscript, this.sigversion, this.satoshis);\n            } catch (e) {\n              //invalid sig or pubkey\n              fOk = false;\n            }\n\n            if (fOk) {\n              isig++;\n              nSigsCount--;\n            }\n            ikey++;\n            nKeysCount--;\n\n            // If there are more signatures left than keys left,\n            // then too many signatures have failed\n            if (nSigsCount > nKeysCount) {\n              fSuccess = false;\n            }\n          }\n\n\n          // Clean up stack of actual arguments\n          while (i-- > 1) {\n            if (!fSuccess && (this.flags & Interpreter.SCRIPT_VERIFY_NULLFAIL) &&\n              !ikey2 && this.stack[this.stack.length - 1].length) {\n\n              this.errstr = 'SCRIPT_ERR_NULLFAIL';\n              return false;\n            }\n\n            if (ikey2 > 0) {\n              ikey2--;\n            }\n\n            this.stack.pop();\n          }\n\n          // A bug causes CHECKMULTISIG to consume one extra argument\n          // whose contents were not checked in any way.\n          //\n          // Unfortunately this is a potential source of mutability,\n          // so optionally verify it is exactly equal to zero prior\n          // to removing it from the stack.\n          if (this.stack.length < 1) {\n            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';\n            return false;\n          }\n          if ((this.flags & Interpreter.SCRIPT_VERIFY_NULLDUMMY) && this.stack[this.stack.length - 1].length) {\n            this.errstr = 'SCRIPT_ERR_SIG_NULLDUMMY';\n            return false;\n          }\n          this.stack.pop();\n\n          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);\n\n          if (opcodenum === Opcode.OP_CHECKMULTISIGVERIFY) {\n            if (fSuccess) {\n              this.stack.pop();\n            } else {\n              this.errstr = 'SCRIPT_ERR_CHECKMULTISIGVERIFY';\n              return false;\n            }\n          }\n        }\n        break;\n\n      default:\n        this.errstr = 'SCRIPT_ERR_BAD_OPCODE';\n        return false;\n    }\n  }\n\n  return true;\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}