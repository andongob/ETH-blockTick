{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar externals_1 = require(\"./externals\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),\n    signature = _a.signature,\n    recovery = _a.recid;\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (vBN.eqn(0) || vBN.eqn(1)) return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\nfunction isValidSigRecovery(recovery) {\n  var rec = new externals_1.BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\r\n * ECDSA public key recovery from signature.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Recovered public key\r\n */\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\r\n * Convert signature parameters into the format of `eth_sign` RPC method.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Signature\r\n */\nvar toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\r\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Signature\r\n */\nvar toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n  var ss = s;\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\r\n * Convert signature format of the `eth_sign` RPC method to signature parameters\r\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\r\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\r\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\r\n */\nvar fromRpcSig = function (sig) {\n  var buf = (0, bytes_1.toBuffer)(sig);\n  var r;\n  var s;\n  var v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\r\n * Validate a ECDSA signature.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\r\n */\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n  var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  var rBN = new externals_1.BN(r);\n  var sBN = new externals_1.BN(s);\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\r\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\r\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\r\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\r\n * used to produce the signature.\r\n */\nvar hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"names":["Object","defineProperty","exports","value","hashPersonalMessage","isValidSignature","fromRpcSig","toCompactSig","toRpcSig","ecrecover","ecsign","secp256k1_1","require","externals_1","bytes_1","hash_1","helpers_1","types_1","msgHash","privateKey","chainId","_a","ecdsaSign","signature","recovery","recid","r","Buffer","from","slice","s","Number","isSafeInteger","Error","v_1","v","chainIdBN","toType","TypeOutput","BN","muln","addn","toArrayLike","calculateSigRecovery","vBN","eqn","subn","sub","isValidSigRecovery","rec","concat","setLengthLeft","senderPubKey","ecdsaRecover","toNumber","publicKeyConvert","bufferToHex","toBuffer","vn","ss","sig","buf","length","bufferToInt","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","message","assertIsBuffer","prefix","keccak"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-util/dist.browser/signature.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\r\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\r\nvar externals_1 = require(\"./externals\");\r\nvar bytes_1 = require(\"./bytes\");\r\nvar hash_1 = require(\"./hash\");\r\nvar helpers_1 = require(\"./helpers\");\r\nvar types_1 = require(\"./types\");\r\nfunction ecsign(msgHash, privateKey, chainId) {\r\n    var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;\r\n    var r = Buffer.from(signature.slice(0, 32));\r\n    var s = Buffer.from(signature.slice(32, 64));\r\n    if (!chainId || typeof chainId === 'number') {\r\n        // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\r\n        if (chainId && !Number.isSafeInteger(chainId)) {\r\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\r\n        }\r\n        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\r\n        return { r: r, s: s, v: v_1 };\r\n    }\r\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\r\n    var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\r\n    return { r: r, s: s, v: v };\r\n}\r\nexports.ecsign = ecsign;\r\nfunction calculateSigRecovery(v, chainId) {\r\n    var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\r\n    if (vBN.eqn(0) || vBN.eqn(1))\r\n        return (0, types_1.toType)(v, types_1.TypeOutput.BN);\r\n    if (!chainId) {\r\n        return vBN.subn(27);\r\n    }\r\n    var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\r\n    return vBN.sub(chainIdBN.muln(2).addn(35));\r\n}\r\nfunction isValidSigRecovery(recovery) {\r\n    var rec = new externals_1.BN(recovery);\r\n    return rec.eqn(0) || rec.eqn(1);\r\n}\r\n/**\r\n * ECDSA public key recovery from signature.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Recovered public key\r\n */\r\nvar ecrecover = function (msgHash, v, r, s, chainId) {\r\n    var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\r\n    var recovery = calculateSigRecovery(v, chainId);\r\n    if (!isValidSigRecovery(recovery)) {\r\n        throw new Error('Invalid signature v value');\r\n    }\r\n    var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\r\n    return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\r\n};\r\nexports.ecrecover = ecrecover;\r\n/**\r\n * Convert signature parameters into the format of `eth_sign` RPC method.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Signature\r\n */\r\nvar toRpcSig = function (v, r, s, chainId) {\r\n    var recovery = calculateSigRecovery(v, chainId);\r\n    if (!isValidSigRecovery(recovery)) {\r\n        throw new Error('Invalid signature v value');\r\n    }\r\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\r\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\r\n};\r\nexports.toRpcSig = toRpcSig;\r\n/**\r\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @returns Signature\r\n */\r\nvar toCompactSig = function (v, r, s, chainId) {\r\n    var recovery = calculateSigRecovery(v, chainId);\r\n    if (!isValidSigRecovery(recovery)) {\r\n        throw new Error('Invalid signature v value');\r\n    }\r\n    var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\r\n    var ss = s;\r\n    if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\r\n        ss = Buffer.from(s);\r\n        ss[0] |= 0x80;\r\n    }\r\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\r\n};\r\nexports.toCompactSig = toCompactSig;\r\n/**\r\n * Convert signature format of the `eth_sign` RPC method to signature parameters\r\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\r\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\r\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\r\n */\r\nvar fromRpcSig = function (sig) {\r\n    var buf = (0, bytes_1.toBuffer)(sig);\r\n    var r;\r\n    var s;\r\n    var v;\r\n    if (buf.length >= 65) {\r\n        r = buf.slice(0, 32);\r\n        s = buf.slice(32, 64);\r\n        v = (0, bytes_1.bufferToInt)(buf.slice(64));\r\n    }\r\n    else if (buf.length === 64) {\r\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\r\n        r = buf.slice(0, 32);\r\n        s = buf.slice(32, 64);\r\n        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\r\n        s[0] &= 0x7f;\r\n    }\r\n    else {\r\n        throw new Error('Invalid signature length');\r\n    }\r\n    // support both versions of `eth_sign` responses\r\n    if (v < 27) {\r\n        v += 27;\r\n    }\r\n    return {\r\n        v: v,\r\n        r: r,\r\n        s: s,\r\n    };\r\n};\r\nexports.fromRpcSig = fromRpcSig;\r\n/**\r\n * Validate a ECDSA signature.\r\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\r\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\r\n */\r\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\r\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\r\n    var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\r\n    var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\r\n    if (r.length !== 32 || s.length !== 32) {\r\n        return false;\r\n    }\r\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\r\n        return false;\r\n    }\r\n    var rBN = new externals_1.BN(r);\r\n    var sBN = new externals_1.BN(s);\r\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\r\n        return false;\r\n    }\r\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nexports.isValidSignature = isValidSignature;\r\n/**\r\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\r\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\r\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\r\n * used to produce the signature.\r\n */\r\nvar hashPersonalMessage = function (message) {\r\n    (0, helpers_1.assertIsBuffer)(message);\r\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\r\n    return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\r\n};\r\nexports.hashPersonalMessage = hashPersonalMessage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}