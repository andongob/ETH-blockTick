{"ast":null,"code":"\"use strict\";\n\n/* PARA DESCOMENTAR EL CÓDIGO COMPLETO HAY QUE ELIMINAR EL COMENTARIO DE LAS FILAS 3, 70, 188 Y 192\r\n\r\n/*QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport * as Mnemonic from \"bitcore-mnemonic\";\r\nimport * as CryptoJS from \"crypto-js\";\r\nimport { hdkey } from \"ethereumjs-wallet\";\r\nimport * as bip39 from \"bip39\";\r\nimport * as util from \"ethereumjs-util\";\r\nimport Web3 from 'web3';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  loginForm: any;\r\n\r\n  sendForm: any;\r\n\r\n  encrypted: any;\r\n\r\n  wallet:any = {\r\n    address: '',\r\n    privateKey: '',\r\n  }\r\n\r\n  web3: any;\r\n\r\n  window: any;\r\n\r\n  mining = false;\r\n\r\n  lastTransaction: any;\r\n\r\n  constructor(@Inject(DOCUMENT) private document: Document, private formBuilder: FormBuilder) {\r\n    this.window = document.defaultView;\r\n\r\n    this.loginForm = this.formBuilder.group({\r\n      seeds: '',\r\n      password: ''\r\n    });\r\n\r\n    this.sendForm = this.formBuilder.group({\r\n      to: '',\r\n      amount: ''\r\n    });\r\n\r\n    this.encrypted = window.localStorage.getItem('seeds');\r\n\r\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\r\n\r\n    //this.web3 = new Web3;\r\n    \r\n    this.web3 = new Web3(this.window.ethereum);\r\n\r\n    /*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n    */\n/*QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n}\r\n\r\n// february current defy one inform wet hurry cupboard type enable spare famous\r\nasync initWallet(seeds: string) {\r\n  var mnemonic = new Mnemonic(seeds);\r\n  var seed = await bip39.mnemonicToSeed(mnemonic.toString());\r\n  var path = \"m/44'/60'/0'/0/0\";\r\n\r\n  var wallet = hdkey\r\n    .fromMasterSeed(seed)\r\n    .derivePath(path)\r\n    .getWallet();\r\n\r\n  var privateKey = wallet.getPrivateKey();\r\n  var publicKey = util.privateToPublic(privateKey);\r\n  var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\r\n\r\n  this.wallet.privateKey = privateKey;\r\n\r\n  this.getBalance(address);\r\n  this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\r\n\r\nthis.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n  return this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\r\n});\r\n}\r\n\r\nasync getBalance(address:string) {\r\n  this.wallet.address = address;\r\n  this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n    return this.web3.utils.fromWei(result, 'ether');\r\n  });\r\n}\r\n\r\nsendLogin(loginData:any) {\r\n  if (loginData.password == '') {\r\n    return alert('Introduce tu contraseña');\r\n  }\r\n\r\n  if (this.encrypted) {\r\n    var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\r\n    loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\r\n  }\r\n\r\n  if (!Mnemonic.isValid(loginData.seeds)) {\r\n    return alert('Semilla inválida');\r\n  }\r\n\r\n  var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\r\n\r\n  window.localStorage.setItem('seeds', encrypted);\r\n\r\n  this.loginForm.reset();\r\n\r\n  this.initWallet(loginData.seed);\r\n}\r\n\r\nloginWithMetamask() {\r\n  if (!this.window.ethereum) {\r\n    return alert('Metamask no está instalado');\r\n  }\r\n\r\n  this.window.ethereum.enable().then((accounts:any) => {\r\n    let address = accounts[0];\r\n    this.getBalance(address);\r\n    this.wallet.address = address;\r\n  });\r\n}\r\n\r\nremoveSeeds() {\r\n  window.localStorage.removeItem('seeds');\r\n  this.encrypted = '';\r\n  this.wallet = {\r\n    address: '',\r\n    balance: ''\r\n  };\r\n}\r\n\r\nasync sendEther(sendData:any) {\r\n  if (sendData.to == '' || sendData.amount == null) {\r\n    return alert('Campos son obligatorios');\r\n  }\r\n\r\n  if ( ! util.isValidAddress(sendData.to)) {\r\n    return alert('Dirección inválida');\r\n  }\r\n\r\n  this.mining = true;\r\n\r\n  var rawData = {\r\n    from: this.wallet.address,\r\n    to: sendData.to,\r\n    value: sendData.amount,\r\n    gasPrice: this.web3.utils.toHex(10000000000),\r\n    gasLimit: this.web3.utils.toHex(1000000),\r\n    //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\r\n  };\r\n\r\n  var signed = await this.web3.eth.sendTransaction(rawData).then((receipt:any) => {\r\n  \r\n    console.log(\"Transaction succeeded\", receipt);\r\n    this.mining = false;\r\n    this.lastTransaction = receipt;\r\n\r\n    this.sendForm.reset();\r\n  });\r\n  \r\n  //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\r\n\r\n  /*\r\n  this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n    this.mining = false;\r\n    this.lastTransaction = receipt;\r\n\r\n    this.sendForm.reset();\r\n  });\r\n  */\n/* QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n}\r\n\r\n}\r\n*/ /* QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO*/","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;;;;EAAA,CAIE","names":[],"sourceRoot":"","sources":["D:\\Documentos\\BLOCKCHAIN\\Doble Grado BlockChain\\Blockchain Engineering\\TFG - Enginering\\BLOCKTICK\\blocktick_dApp\\src\\app\\app.component.ts"],"sourcesContent":["/* PARA DESCOMENTAR EL CÓDIGO COMPLETO HAY QUE ELIMINAR EL COMENTARIO DE LAS FILAS 3, 70, 188 Y 192\r\n\r\n/*QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport * as Mnemonic from \"bitcore-mnemonic\";\r\nimport * as CryptoJS from \"crypto-js\";\r\nimport { hdkey } from \"ethereumjs-wallet\";\r\nimport * as bip39 from \"bip39\";\r\nimport * as util from \"ethereumjs-util\";\r\nimport Web3 from 'web3';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  loginForm: any;\r\n\r\n  sendForm: any;\r\n\r\n  encrypted: any;\r\n\r\n  wallet:any = {\r\n    address: '',\r\n    privateKey: '',\r\n  }\r\n\r\n  web3: any;\r\n\r\n  window: any;\r\n\r\n  mining = false;\r\n\r\n  lastTransaction: any;\r\n\r\n  constructor(@Inject(DOCUMENT) private document: Document, private formBuilder: FormBuilder) {\r\n    this.window = document.defaultView;\r\n\r\n    this.loginForm = this.formBuilder.group({\r\n      seeds: '',\r\n      password: ''\r\n    });\r\n\r\n    this.sendForm = this.formBuilder.group({\r\n      to: '',\r\n      amount: ''\r\n    });\r\n\r\n    this.encrypted = window.localStorage.getItem('seeds');\r\n\r\n    //this.initWallet('february current defy one inform wet hurry cupboard type enable spare famous'); // trampa\r\n\r\n    //this.web3 = new Web3;\r\n\t\r\n\tthis.web3 = new Web3(this.window.ethereum); \r\n\r\n\t/*\r\n    this.web3.setProvider(\r\n      new this.web3.providers.HttpProvider('https://ropsten.infura.io/v3/d09825f256ae4705a74fdee006040903')\r\n    );\r\n\t*/\r\n\r\n  /*QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n  }\r\n\r\n  // february current defy one inform wet hurry cupboard type enable spare famous\r\n  async initWallet(seeds: string) {\r\n    var mnemonic = new Mnemonic(seeds);\r\n    var seed = await bip39.mnemonicToSeed(mnemonic.toString());\r\n    var path = \"m/44'/60'/0'/0/0\";\r\n\r\n    var wallet = hdkey\r\n      .fromMasterSeed(seed)\r\n      .derivePath(path)\r\n      .getWallet();\r\n\r\n    var privateKey = wallet.getPrivateKey();\r\n    var publicKey = util.privateToPublic(privateKey);\r\n    var address = \"0x\" + util.pubToAddress(publicKey).toString(\"hex\");\r\n\r\n    this.wallet.privateKey = privateKey;\r\n\r\n    this.getBalance(address);\r\n    this.wallet.address = address; //indica la cuenta address, del div Hello en app.component.html una vez iniciada sesión\r\n\r\n this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n    return this.web3.utils.fromWei(result, 'ether'); // convierte el balance de Wei a Ether\r\n  });\r\n  }\r\n\r\n  async getBalance(address:string) {\r\n    this.wallet.address = address;\r\n    this.wallet.balance = await this.web3.eth.getBalance(address).then((result:any) => {\r\n      return this.web3.utils.fromWei(result, 'ether');\r\n    });\r\n  }\r\n\r\n  sendLogin(loginData:any) {\r\n    if (loginData.password == '') {\r\n      return alert('Introduce tu contraseña');\r\n    }\r\n\r\n    if (this.encrypted) {\r\n      var decrypt = CryptoJS.AES.decrypt(this.encrypted, loginData.password);\r\n      loginData.seeds = decrypt.toString(CryptoJS.enc.Utf8);\r\n    }\r\n\r\n    if (!Mnemonic.isValid(loginData.seeds)) {\r\n      return alert('Semilla inválida');\r\n    }\r\n\r\n    var encrypted = CryptoJS.AES.encrypt(loginData.seeds, loginData.password).toString();\r\n\r\n    window.localStorage.setItem('seeds', encrypted);\r\n\r\n    this.loginForm.reset();\r\n\r\n    this.initWallet(loginData.seed);\r\n  }\r\n\r\n  loginWithMetamask() {\r\n    if (!this.window.ethereum) {\r\n      return alert('Metamask no está instalado');\r\n    }\r\n\r\n    this.window.ethereum.enable().then((accounts:any) => {\r\n      let address = accounts[0];\r\n      this.getBalance(address);\r\n\t  this.wallet.address = address;\r\n    });\r\n  }\r\n\r\n  removeSeeds() {\r\n    window.localStorage.removeItem('seeds');\r\n    this.encrypted = '';\r\n    this.wallet = {\r\n      address: '',\r\n      balance: ''\r\n    };\r\n  }\r\n\r\n  async sendEther(sendData:any) {\r\n    if (sendData.to == '' || sendData.amount == null) {\r\n      return alert('Campos son obligatorios');\r\n    }\r\n\r\n    if ( ! util.isValidAddress(sendData.to)) {\r\n      return alert('Dirección inválida');\r\n    }\r\n\r\n    this.mining = true;\r\n\r\n    var rawData = {\r\n      from: this.wallet.address,\r\n      to: sendData.to,\r\n      value: sendData.amount,\r\n      gasPrice: this.web3.utils.toHex(10000000000),\r\n      gasLimit: this.web3.utils.toHex(1000000),\r\n      //nonce: await this.web3.eth.getTransactionCount(this.wallet.address)\r\n    };\r\n\r\n\tvar signed = await this.web3.eth.sendTransaction(rawData).then((receipt:any) => {\r\n\t\r\n  \t  console.log(\"Transaction succeeded\", receipt);\t\t\r\n      this.mining = false;\r\n      this.lastTransaction = receipt;\r\n\r\n      this.sendForm.reset();\r\n    });\r\n\t\r\n    //var signed = await this.web3.eth.accounts.signTransaction(rawData, this.wallet.privateKey.toString('hex'));\r\n\r\n\t/*\r\n    this.web3.eth.sendSignedTransaction(signed.rawTransaction).then((receipt:any) => {\r\n      this.mining = false;\r\n      this.lastTransaction = receipt;\r\n\r\n      this.sendForm.reset();\r\n    });\r\n\t*/\r\n  /* QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO\r\n  }\r\n\r\n}\r\n*/  /* QUITAR PARA DESCOMENTAR CÓDIGO COMPLETO*/\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}