{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\nvar buffer_1 = require(\"buffer\");\n// secp256k1n/2\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\r\n * An Ethereum transaction.\r\n */\nvar Transaction = /** @class */function () {\n  /**\r\n   * Creates a new transaction from an object with its fields' values.\r\n   *\r\n   * @param data - A transaction can be initialized with its rlp representation, an array containing\r\n   * the value of its fields in order, or an object containing them by name.\r\n   *\r\n   * @param opts - The transaction's options, used to indicate the chain and hardfork the\r\n   * transactions belongs to.\r\n   *\r\n   * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\r\n   * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\r\n   * Dragon.)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const txData = {\r\n   *   nonce: '0x00',\r\n   *   gasPrice: '0x09184e72a000',\r\n   *   gasLimit: '0x2710',\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: '0x00',\r\n   *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\r\n   *   v: '0x1c',\r\n   *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\r\n   *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\r\n   * };\r\n   * const tx = new Transaction(txData);\r\n   * ```\r\n   */\n  function Transaction(data, opts) {\n    if (data === void 0) {\n      data = {};\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    // instantiate Common class instance based on passed options\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\n      }\n      this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      this._common = new ethereumjs_common_1.default(chain, hardfork);\n    }\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }];\n    // attached serialize\n    ethereumjs_util_1.defineProperties(this, fields, data);\n    /**\r\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\r\n     * @name from\r\n     * @memberof Transaction\r\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n    this._validateV(this.v);\n    this._overrideVSetterWithValidation();\n  }\n  /**\r\n   * If the tx's `to` is to the creation address\r\n   */\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to.toString('hex') === '';\n  };\n  /**\r\n   * Computes a sha3-256 hash of the serialized tx\r\n   * @param includeSignature - Whether or not to include the signature\r\n   */\n  Transaction.prototype.hash = function (includeSignature) {\n    if (includeSignature === void 0) {\n      includeSignature = true;\n    }\n    var items;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._implementsEIP155()) {\n        items = this.raw.slice(0, 6).concat([ethereumjs_util_1.toBuffer(this.getChainId()),\n        // TODO: stripping zeros should probably be a responsibility of the rlp module\n        ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]);\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n    // create hash\n    return ethereumjs_util_1.rlphash(items);\n  };\n  /**\r\n   * returns chain ID\r\n   */\n  Transaction.prototype.getChainId = function () {\n    return this._common.chainId();\n  };\n  /**\r\n   * returns the sender's address\r\n   */\n  Transaction.prototype.getSenderAddress = function () {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethereumjs_util_1.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\r\n   * returns the public key of the sender\r\n   */\n  Transaction.prototype.getSenderPublicKey = function () {\n    if (!this.verifySignature()) {\n      throw new Error('Invalid Signature');\n    }\n    // If the signature was verified successfully the _senderPubKey field is defined\n    return this._senderPubKey;\n  };\n  /**\r\n   * Determines if the signature is valid\r\n   */\n  Transaction.prototype.verifySignature = function () {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n    try {\n      var v = ethereumjs_util_1.bufferToInt(this.v);\n      var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\n      this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\n    } catch (e) {\n      return false;\n    }\n    return !!this._senderPubKey;\n  };\n  /**\r\n   * sign a transaction with a given private key\r\n   * @param privateKey - Must be 32 bytes in length\r\n   */\n  Transaction.prototype.sign = function (privateKey) {\n    // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\n    // different results if this tx was already signed.\n    this.v = new buffer_1.Buffer([]);\n    this.s = new buffer_1.Buffer([]);\n    this.r = new buffer_1.Buffer([]);\n    var msgHash = this.hash(false);\n    var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n    if (this._implementsEIP155()) {\n      sig.v += this.getChainId() * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n  /**\r\n   * The amount of gas paid for the data in this tx\r\n   */\n  Transaction.prototype.getDataFee = function () {\n    var data = this.raw[5];\n    var cost = new ethereumjs_util_1.BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(this._common.param('gasPrices', 'txDataZero')) : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\n    }\n    return cost;\n  };\n  /**\r\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\r\n   */\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\n    if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this._common.param('gasPrices', 'txCreation'));\n    }\n    return fee;\n  };\n  /**\r\n   * the up front amount that an account must have for this transaction to be valid\r\n   */\n  Transaction.prototype.getUpfrontCost = function () {\n    return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\n  };\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\n      errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\n    }\n    if (stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n  /**\r\n   * Returns the rlp encoding of the transaction\r\n   */\n  Transaction.prototype.serialize = function () {\n    // Note: This never gets executed, defineProperties overwrites it.\n    return ethereumjs_util_1.rlp.encode(this.raw);\n  };\n  /**\r\n   * Returns the transaction in JSON format\r\n   * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\r\n   */\n  Transaction.prototype.toJSON = function (labels) {\n    if (labels === void 0) {\n      labels = false;\n    }\n    // Note: This never gets executed, defineProperties overwrites it.\n    return {};\n  };\n  Transaction.prototype._validateV = function (v) {\n    if (v === undefined || v.length === 0) {\n      return;\n    }\n    if (!this._common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n    var vInt = ethereumjs_util_1.bufferToInt(v);\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n  Transaction.prototype._isSigned = function () {\n    return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\n  };\n  Transaction.prototype._overrideVSetterWithValidation = function () {\n    var _this = this;\n    var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\n    Object.defineProperty(this, 'v', __assign({}, vDescriptor, {\n      set: function (v) {\n        if (v !== undefined) {\n          _this._validateV(ethereumjs_util_1.toBuffer(v));\n        }\n        vDescriptor.set(v);\n      }\n    }));\n  };\n  Transaction.prototype._implementsEIP155 = function () {\n    var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\n    if (!this._isSigned()) {\n      // We sign with EIP155 all unsigned transactions after spuriousDragon\n      return onEIP155BlockOrLater;\n    }\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\n    // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\n    // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\n    // CHAIN_ID, r = 0 and s = 0.\n    var v = ethereumjs_util_1.bufferToInt(this.v);\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  return Transaction;\n}();\nexports.default = Transaction;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","ethereumjs_util_1","require","ethereumjs_common_1","buffer_1","N_DIV_2","BN","Transaction","data","opts","common","chain","hardfork","Error","_common","default","fields","name","allowLess","Buffer","alias","allowZero","defineProperties","enumerable","configurable","get","getSenderAddress","bind","_validateV","v","_overrideVSetterWithValidation","toCreationAddress","to","toString","hash","includeSignature","items","raw","_implementsEIP155","slice","concat","toBuffer","getChainId","stripZeros","rlphash","chainId","_from","pubkey","getSenderPublicKey","publicToAddress","verifySignature","_senderPubKey","msgHash","gteHardfork","cmp","bufferToInt","useChainIdWhileRecoveringPubKey","ecrecover","r","undefined","e","sign","privateKey","sig","ecsign","getDataFee","cost","iaddn","param","getBaseFee","fee","getUpfrontCost","gasLimit","imul","gasPrice","iadd","validate","stringError","errors","push","join","serialize","rlp","encode","toJSON","labels","vInt","isValidEIP155V","_isSigned","_this","vDescriptor","getOwnPropertyDescriptor","set","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions"],"sources":["D:/Documentos/BLOCKCHAIN/Doble Grado BlockChain/Blockchain Engineering/TFM - Enginering - SEP 2023/BLOCKTICK ETHEREUM/BLOCKTICK/Ethereum-Blocktick/node_modules/ethereumjs-tx/dist/transaction.js"],"sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\r\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\r\nvar buffer_1 = require(\"buffer\");\r\n// secp256k1n/2\r\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\r\n/**\r\n * An Ethereum transaction.\r\n */\r\nvar Transaction = /** @class */ (function () {\r\n    /**\r\n     * Creates a new transaction from an object with its fields' values.\r\n     *\r\n     * @param data - A transaction can be initialized with its rlp representation, an array containing\r\n     * the value of its fields in order, or an object containing them by name.\r\n     *\r\n     * @param opts - The transaction's options, used to indicate the chain and hardfork the\r\n     * transactions belongs to.\r\n     *\r\n     * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\r\n     * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\r\n     * Dragon.)\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const txData = {\r\n     *   nonce: '0x00',\r\n     *   gasPrice: '0x09184e72a000',\r\n     *   gasLimit: '0x2710',\r\n     *   to: '0x0000000000000000000000000000000000000000',\r\n     *   value: '0x00',\r\n     *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\r\n     *   v: '0x1c',\r\n     *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\r\n     *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\r\n     * };\r\n     * const tx = new Transaction(txData);\r\n     * ```\r\n     */\r\n    function Transaction(data, opts) {\r\n        if (data === void 0) { data = {}; }\r\n        if (opts === void 0) { opts = {}; }\r\n        // instantiate Common class instance based on passed options\r\n        if (opts.common) {\r\n            if (opts.chain || opts.hardfork) {\r\n                throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\r\n            }\r\n            this._common = opts.common;\r\n        }\r\n        else {\r\n            var chain = opts.chain ? opts.chain : 'mainnet';\r\n            var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\r\n            this._common = new ethereumjs_common_1.default(chain, hardfork);\r\n        }\r\n        // Define Properties\r\n        var fields = [\r\n            {\r\n                name: 'nonce',\r\n                length: 32,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'gasPrice',\r\n                length: 32,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'gasLimit',\r\n                alias: 'gas',\r\n                length: 32,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'to',\r\n                allowZero: true,\r\n                length: 20,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'value',\r\n                length: 32,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'data',\r\n                alias: 'input',\r\n                allowZero: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'v',\r\n                allowZero: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 'r',\r\n                length: 32,\r\n                allowZero: true,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n            {\r\n                name: 's',\r\n                length: 32,\r\n                allowZero: true,\r\n                allowLess: true,\r\n                default: new buffer_1.Buffer([]),\r\n            },\r\n        ];\r\n        // attached serialize\r\n        ethereumjs_util_1.defineProperties(this, fields, data);\r\n        /**\r\n         * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\r\n         * @name from\r\n         * @memberof Transaction\r\n         */\r\n        Object.defineProperty(this, 'from', {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: this.getSenderAddress.bind(this),\r\n        });\r\n        this._validateV(this.v);\r\n        this._overrideVSetterWithValidation();\r\n    }\r\n    /**\r\n     * If the tx's `to` is to the creation address\r\n     */\r\n    Transaction.prototype.toCreationAddress = function () {\r\n        return this.to.toString('hex') === '';\r\n    };\r\n    /**\r\n     * Computes a sha3-256 hash of the serialized tx\r\n     * @param includeSignature - Whether or not to include the signature\r\n     */\r\n    Transaction.prototype.hash = function (includeSignature) {\r\n        if (includeSignature === void 0) { includeSignature = true; }\r\n        var items;\r\n        if (includeSignature) {\r\n            items = this.raw;\r\n        }\r\n        else {\r\n            if (this._implementsEIP155()) {\r\n                items = this.raw.slice(0, 6).concat([\r\n                    ethereumjs_util_1.toBuffer(this.getChainId()),\r\n                    // TODO: stripping zeros should probably be a responsibility of the rlp module\r\n                    ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),\r\n                    ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)),\r\n                ]);\r\n            }\r\n            else {\r\n                items = this.raw.slice(0, 6);\r\n            }\r\n        }\r\n        // create hash\r\n        return ethereumjs_util_1.rlphash(items);\r\n    };\r\n    /**\r\n     * returns chain ID\r\n     */\r\n    Transaction.prototype.getChainId = function () {\r\n        return this._common.chainId();\r\n    };\r\n    /**\r\n     * returns the sender's address\r\n     */\r\n    Transaction.prototype.getSenderAddress = function () {\r\n        if (this._from) {\r\n            return this._from;\r\n        }\r\n        var pubkey = this.getSenderPublicKey();\r\n        this._from = ethereumjs_util_1.publicToAddress(pubkey);\r\n        return this._from;\r\n    };\r\n    /**\r\n     * returns the public key of the sender\r\n     */\r\n    Transaction.prototype.getSenderPublicKey = function () {\r\n        if (!this.verifySignature()) {\r\n            throw new Error('Invalid Signature');\r\n        }\r\n        // If the signature was verified successfully the _senderPubKey field is defined\r\n        return this._senderPubKey;\r\n    };\r\n    /**\r\n     * Determines if the signature is valid\r\n     */\r\n    Transaction.prototype.verifySignature = function () {\r\n        var msgHash = this.hash(false);\r\n        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\r\n        if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\r\n            return false;\r\n        }\r\n        try {\r\n            var v = ethereumjs_util_1.bufferToInt(this.v);\r\n            var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\r\n            this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n        return !!this._senderPubKey;\r\n    };\r\n    /**\r\n     * sign a transaction with a given private key\r\n     * @param privateKey - Must be 32 bytes in length\r\n     */\r\n    Transaction.prototype.sign = function (privateKey) {\r\n        // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\r\n        // different results if this tx was already signed.\r\n        this.v = new buffer_1.Buffer([]);\r\n        this.s = new buffer_1.Buffer([]);\r\n        this.r = new buffer_1.Buffer([]);\r\n        var msgHash = this.hash(false);\r\n        var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\r\n        if (this._implementsEIP155()) {\r\n            sig.v += this.getChainId() * 2 + 8;\r\n        }\r\n        Object.assign(this, sig);\r\n    };\r\n    /**\r\n     * The amount of gas paid for the data in this tx\r\n     */\r\n    Transaction.prototype.getDataFee = function () {\r\n        var data = this.raw[5];\r\n        var cost = new ethereumjs_util_1.BN(0);\r\n        for (var i = 0; i < data.length; i++) {\r\n            data[i] === 0\r\n                ? cost.iaddn(this._common.param('gasPrices', 'txDataZero'))\r\n                : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\r\n        }\r\n        return cost;\r\n    };\r\n    /**\r\n     * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\r\n     */\r\n    Transaction.prototype.getBaseFee = function () {\r\n        var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\r\n        if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\r\n            fee.iaddn(this._common.param('gasPrices', 'txCreation'));\r\n        }\r\n        return fee;\r\n    };\r\n    /**\r\n     * the up front amount that an account must have for this transaction to be valid\r\n     */\r\n    Transaction.prototype.getUpfrontCost = function () {\r\n        return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\r\n    };\r\n    Transaction.prototype.validate = function (stringError) {\r\n        if (stringError === void 0) { stringError = false; }\r\n        var errors = [];\r\n        if (!this.verifySignature()) {\r\n            errors.push('Invalid Signature');\r\n        }\r\n        if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\r\n            errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\r\n        }\r\n        if (stringError === false) {\r\n            return errors.length === 0;\r\n        }\r\n        else {\r\n            return errors.join(' ');\r\n        }\r\n    };\r\n    /**\r\n     * Returns the rlp encoding of the transaction\r\n     */\r\n    Transaction.prototype.serialize = function () {\r\n        // Note: This never gets executed, defineProperties overwrites it.\r\n        return ethereumjs_util_1.rlp.encode(this.raw);\r\n    };\r\n    /**\r\n     * Returns the transaction in JSON format\r\n     * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\r\n     */\r\n    Transaction.prototype.toJSON = function (labels) {\r\n        if (labels === void 0) { labels = false; }\r\n        // Note: This never gets executed, defineProperties overwrites it.\r\n        return {};\r\n    };\r\n    Transaction.prototype._validateV = function (v) {\r\n        if (v === undefined || v.length === 0) {\r\n            return;\r\n        }\r\n        if (!this._common.gteHardfork('spuriousDragon')) {\r\n            return;\r\n        }\r\n        var vInt = ethereumjs_util_1.bufferToInt(v);\r\n        if (vInt === 27 || vInt === 28) {\r\n            return;\r\n        }\r\n        var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\r\n        if (!isValidEIP155V) {\r\n            throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\r\n        }\r\n    };\r\n    Transaction.prototype._isSigned = function () {\r\n        return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\r\n    };\r\n    Transaction.prototype._overrideVSetterWithValidation = function () {\r\n        var _this = this;\r\n        var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\r\n        Object.defineProperty(this, 'v', __assign({}, vDescriptor, { set: function (v) {\r\n                if (v !== undefined) {\r\n                    _this._validateV(ethereumjs_util_1.toBuffer(v));\r\n                }\r\n                vDescriptor.set(v);\r\n            } }));\r\n    };\r\n    Transaction.prototype._implementsEIP155 = function () {\r\n        var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\r\n        if (!this._isSigned()) {\r\n            // We sign with EIP155 all unsigned transactions after spuriousDragon\r\n            return onEIP155BlockOrLater;\r\n        }\r\n        // EIP155 spec:\r\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\r\n        // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\r\n        // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\r\n        // CHAIN_ID, r = 0 and s = 0.\r\n        var v = ethereumjs_util_1.bufferToInt(this.v);\r\n        var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\r\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\r\n    };\r\n    return Transaction;\r\n}());\r\nexports.default = Transaction;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}