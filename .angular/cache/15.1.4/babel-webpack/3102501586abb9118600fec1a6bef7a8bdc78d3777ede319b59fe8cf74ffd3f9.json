{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nfunction format(message, args) {\n  return message.replace('{0}', args[0]).replace('{1}', args[1]).replace('{2}', args[2]);\n}\nvar traverseNode = function (parent, errorDefinition) {\n  var NodeError = function () {\n    if (_.isString(errorDefinition.message)) {\n      this.message = format(errorDefinition.message, arguments);\n    } else if (_.isFunction(errorDefinition.message)) {\n      this.message = errorDefinition.message.apply(null, arguments);\n    } else {\n      throw new Error('Invalid error definition for ' + errorDefinition.name);\n    }\n    this.stack = this.message + '\\n' + new Error().stack;\n  };\n  NodeError.prototype = Object.create(parent.prototype);\n  NodeError.prototype.name = parent.prototype.name + errorDefinition.name;\n  parent[errorDefinition.name] = NodeError;\n  if (errorDefinition.errors) {\n    childDefinitions(NodeError, errorDefinition.errors);\n  }\n  return NodeError;\n};\n\n/* jshint latedef: false */\nvar childDefinitions = function (parent, childDefinitions) {\n  _.each(childDefinitions, function (childDefinition) {\n    traverseNode(parent, childDefinition);\n  });\n};\n/* jshint latedef: true */\n\nvar traverseRoot = function (parent, errorsDefinition) {\n  childDefinitions(parent, errorsDefinition);\n  return parent;\n};\nvar bitcore = {};\nbitcore.Error = function () {\n  this.message = 'Internal error';\n  this.stack = this.message + '\\n' + new Error().stack;\n};\nbitcore.Error.prototype = Object.create(Error.prototype);\nbitcore.Error.prototype.name = 'bitcore.Error';\nvar data = require('./spec');\ntraverseRoot(bitcore.Error, data);\nmodule.exports = bitcore.Error;\nmodule.exports.extend = function (spec) {\n  return traverseNode(bitcore.Error, spec);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}