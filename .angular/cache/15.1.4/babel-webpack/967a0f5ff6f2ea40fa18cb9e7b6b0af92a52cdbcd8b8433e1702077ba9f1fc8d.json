{"ast":null,"code":"const BigInteger = require('bigi');\nconst Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\nconst math = require('./math');\nconst check = require('./check');\nconst convert = require('./convert');\nconst concat = Buffer.concat;\nconst G = curve.G;\nconst p = curve.p;\nconst n = curve.n;\nconst zero = BigInteger.ZERO;\nfunction sign(privateKey, message, aux) {\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#signing\n  check.checkSignParams(privateKey, message);\n  privateKey = typeof privateKey == 'string' ? BigInteger.fromHex(privateKey) : privateKey;\n  const P = G.multiply(privateKey);\n  const Px = convert.intToBuffer(P.affineX);\n  const d = math.getEvenKey(P, privateKey);\n  let kPrime;\n  if (aux) {\n    check.checkAux(aux);\n    const t = convert.intToBuffer(d.xor(convert.bufferToInt(math.taggedHash('BIP0340/aux', aux))));\n    const rand = math.taggedHash('BIP0340/nonce', concat([t, Px, message]));\n    kPrime = convert.bufferToInt(rand).mod(n);\n  } else {\n    kPrime = math.deterministicGetK0(d, Px, message);\n  }\n  if (kPrime.signum() === 0) {\n    throw new Error('kPrime is zero');\n  }\n  const R = G.multiply(kPrime);\n  const k = math.getEvenKey(R, kPrime);\n  const Rx = convert.intToBuffer(R.affineX);\n  const e = math.getE(Rx, Px, message);\n  return concat([Rx, convert.intToBuffer(k.add(e.multiply(d)).mod(n))]);\n}\nfunction verify(pubKey, message, signature) {\n  check.checkVerifyParams(pubKey, message, signature);\n\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#verification\n  const P = math.liftX(pubKey);\n  const Px = convert.intToBuffer(P.affineX);\n  const r = convert.bufferToInt(signature.slice(0, 32));\n  const s = convert.bufferToInt(signature.slice(32, 64));\n  check.checkSignatureInput(r, s);\n  const e = math.getE(convert.intToBuffer(r), Px, message);\n  const R = math.getR(s, e, P);\n  if (R.curve.isInfinity(R) || !math.isEven(R) || !R.affineX.equals(r)) {\n    throw new Error('signature verification failed');\n  }\n}\nfunction batchVerify(pubKeys, messages, signatures) {\n  check.checkBatchVerifyParams(pubKeys, messages, signatures);\n\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Batch_Verification\n  let leftSide = zero;\n  let rightSide = null;\n  for (let i = 0; i < pubKeys.length; i++) {\n    const P = math.liftX(pubKeys[i]);\n    const Px = convert.intToBuffer(P.affineX);\n    const r = convert.bufferToInt(signatures[i].slice(0, 32));\n    const s = convert.bufferToInt(signatures[i].slice(32, 64));\n    check.checkSignatureInput(r, s);\n    const e = math.getE(convert.intToBuffer(r), Px, messages[i]);\n    const R = math.liftX(signatures[i].slice(0, 32));\n    if (i === 0) {\n      leftSide = leftSide.add(s);\n      rightSide = R;\n      rightSide = rightSide.add(P.multiply(e));\n    } else {\n      const a = math.randomA();\n      leftSide = leftSide.add(a.multiply(s));\n      rightSide = rightSide.add(R.multiply(a));\n      rightSide = rightSide.add(P.multiply(a.multiply(e)));\n    }\n  }\n  if (!G.multiply(leftSide).equals(rightSide)) {\n    throw new Error('signature verification failed');\n  }\n}\nmodule.exports = {\n  sign,\n  verify,\n  batchVerify\n};","map":{"version":3,"names":["BigInteger","require","Buffer","ecurve","curve","getCurveByName","math","check","convert","concat","G","p","n","zero","ZERO","sign","privateKey","message","aux","checkSignParams","fromHex","P","multiply","Px","intToBuffer","affineX","d","getEvenKey","kPrime","checkAux","t","xor","bufferToInt","taggedHash","rand","mod","deterministicGetK0","signum","Error","R","k","Rx","e","getE","add","verify","pubKey","signature","checkVerifyParams","liftX","r","slice","s","checkSignatureInput","getR","isInfinity","isEven","equals","batchVerify","pubKeys","messages","signatures","checkBatchVerifyParams","leftSide","rightSide","i","length","a","randomA","module","exports"],"sources":["C:/Users/Ndongo/Desktop/noborrar/Ethereum-Blocktick/node_modules/bip-schnorr/src/schnorr.js"],"sourcesContent":["const BigInteger = require('bigi');\r\nconst Buffer = require('safe-buffer').Buffer;\r\nconst ecurve = require('ecurve');\r\nconst curve = ecurve.getCurveByName('secp256k1');\r\nconst math = require('./math');\r\nconst check = require('./check');\r\nconst convert = require('./convert');\r\n\r\nconst concat = Buffer.concat;\r\nconst G = curve.G;\r\nconst p = curve.p;\r\nconst n = curve.n;\r\nconst zero = BigInteger.ZERO;\r\n\r\nfunction sign(privateKey, message, aux) {\r\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#signing\r\n  check.checkSignParams(privateKey, message);\r\n  privateKey = typeof (privateKey) == 'string' ? BigInteger.fromHex(privateKey) : privateKey;\r\n\r\n  const P = G.multiply(privateKey);\r\n  const Px = convert.intToBuffer(P.affineX);\r\n\r\n  const d = math.getEvenKey(P, privateKey);\r\n  let kPrime\r\n  if (aux) {\r\n    check.checkAux(aux);\r\n\r\n    const t = convert.intToBuffer(d.xor(convert.bufferToInt(math.taggedHash('BIP0340/aux', aux))));\r\n    const rand = math.taggedHash('BIP0340/nonce', concat([t, Px, message]))\r\n    kPrime = convert.bufferToInt(rand).mod(n);\r\n  } else {\r\n    kPrime = math.deterministicGetK0(d, Px, message);\r\n  }\r\n\r\n  if (kPrime.signum() === 0) {\r\n    throw new Error('kPrime is zero');\r\n  }\r\n\r\n  const R = G.multiply(kPrime);\r\n  const k = math.getEvenKey(R, kPrime);\r\n  const Rx = convert.intToBuffer(R.affineX);\r\n  const e = math.getE(Rx, Px, message);\r\n  return concat([Rx, convert.intToBuffer(k.add(e.multiply(d)).mod(n))]);\r\n}\r\n\r\nfunction verify(pubKey, message, signature) {\r\n  check.checkVerifyParams(pubKey, message, signature);\r\n\r\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#verification\r\n  const P = math.liftX(pubKey);\r\n  const Px = convert.intToBuffer(P.affineX);\r\n  const r = convert.bufferToInt(signature.slice(0, 32));\r\n  const s = convert.bufferToInt(signature.slice(32, 64));\r\n  check.checkSignatureInput(r, s);\r\n  const e = math.getE(convert.intToBuffer(r), Px, message);\r\n  const R = math.getR(s, e, P);\r\n  if (R.curve.isInfinity(R) || !math.isEven(R) || !R.affineX.equals(r)) {\r\n    throw new Error('signature verification failed');\r\n  }\r\n}\r\n\r\nfunction batchVerify(pubKeys, messages, signatures) {\r\n  check.checkBatchVerifyParams(pubKeys, messages, signatures);\r\n\r\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#Batch_Verification\r\n  let leftSide = zero;\r\n  let rightSide = null;\r\n  for (let i = 0; i < pubKeys.length; i++) {\r\n    const P = math.liftX(pubKeys[i]);\r\n    const Px = convert.intToBuffer(P.affineX);\r\n    const r = convert.bufferToInt(signatures[i].slice(0, 32));\r\n    const s = convert.bufferToInt(signatures[i].slice(32, 64));\r\n    check.checkSignatureInput(r, s);\r\n    const e = math.getE(convert.intToBuffer(r), Px, messages[i]);\r\n    const R = math.liftX(signatures[i].slice(0, 32));\r\n\r\n    if (i === 0) {\r\n      leftSide = leftSide.add(s);\r\n      rightSide = R;\r\n      rightSide = rightSide.add(P.multiply(e));\r\n    } else {\r\n      const a = math.randomA();\r\n      leftSide = leftSide.add(a.multiply(s));\r\n      rightSide = rightSide.add(R.multiply(a));\r\n      rightSide = rightSide.add(P.multiply(a.multiply(e)));\r\n    }\r\n  }\r\n\r\n  if (!G.multiply(leftSide).equals(rightSide)) {\r\n    throw new Error('signature verification failed');\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  sign,\r\n  verify,\r\n  batchVerify,\r\n};\r\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,MAAM,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;AAC5C,MAAMC,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,KAAK,GAAGD,MAAM,CAACE,cAAc,CAAC,WAAW,CAAC;AAChD,MAAMC,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMM,KAAK,GAAGN,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMO,OAAO,GAAGP,OAAO,CAAC,WAAW,CAAC;AAEpC,MAAMQ,MAAM,GAAGP,MAAM,CAACO,MAAM;AAC5B,MAAMC,CAAC,GAAGN,KAAK,CAACM,CAAC;AACjB,MAAMC,CAAC,GAAGP,KAAK,CAACO,CAAC;AACjB,MAAMC,CAAC,GAAGR,KAAK,CAACQ,CAAC;AACjB,MAAMC,IAAI,GAAGb,UAAU,CAACc,IAAI;AAE5B,SAASC,IAAI,CAACC,UAAU,EAAEC,OAAO,EAAEC,GAAG,EAAE;EACtC;EACAX,KAAK,CAACY,eAAe,CAACH,UAAU,EAAEC,OAAO,CAAC;EAC1CD,UAAU,GAAG,OAAQA,UAAW,IAAI,QAAQ,GAAGhB,UAAU,CAACoB,OAAO,CAACJ,UAAU,CAAC,GAAGA,UAAU;EAE1F,MAAMK,CAAC,GAAGX,CAAC,CAACY,QAAQ,CAACN,UAAU,CAAC;EAChC,MAAMO,EAAE,GAAGf,OAAO,CAACgB,WAAW,CAACH,CAAC,CAACI,OAAO,CAAC;EAEzC,MAAMC,CAAC,GAAGpB,IAAI,CAACqB,UAAU,CAACN,CAAC,EAAEL,UAAU,CAAC;EACxC,IAAIY,MAAM;EACV,IAAIV,GAAG,EAAE;IACPX,KAAK,CAACsB,QAAQ,CAACX,GAAG,CAAC;IAEnB,MAAMY,CAAC,GAAGtB,OAAO,CAACgB,WAAW,CAACE,CAAC,CAACK,GAAG,CAACvB,OAAO,CAACwB,WAAW,CAAC1B,IAAI,CAAC2B,UAAU,CAAC,aAAa,EAAEf,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9F,MAAMgB,IAAI,GAAG5B,IAAI,CAAC2B,UAAU,CAAC,eAAe,EAAExB,MAAM,CAAC,CAACqB,CAAC,EAAEP,EAAE,EAAEN,OAAO,CAAC,CAAC,CAAC;IACvEW,MAAM,GAAGpB,OAAO,CAACwB,WAAW,CAACE,IAAI,CAAC,CAACC,GAAG,CAACvB,CAAC,CAAC;EAC3C,CAAC,MAAM;IACLgB,MAAM,GAAGtB,IAAI,CAAC8B,kBAAkB,CAACV,CAAC,EAAEH,EAAE,EAAEN,OAAO,CAAC;EAClD;EAEA,IAAIW,MAAM,CAACS,MAAM,EAAE,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EACnC;EAEA,MAAMC,CAAC,GAAG7B,CAAC,CAACY,QAAQ,CAACM,MAAM,CAAC;EAC5B,MAAMY,CAAC,GAAGlC,IAAI,CAACqB,UAAU,CAACY,CAAC,EAAEX,MAAM,CAAC;EACpC,MAAMa,EAAE,GAAGjC,OAAO,CAACgB,WAAW,CAACe,CAAC,CAACd,OAAO,CAAC;EACzC,MAAMiB,CAAC,GAAGpC,IAAI,CAACqC,IAAI,CAACF,EAAE,EAAElB,EAAE,EAAEN,OAAO,CAAC;EACpC,OAAOR,MAAM,CAAC,CAACgC,EAAE,EAAEjC,OAAO,CAACgB,WAAW,CAACgB,CAAC,CAACI,GAAG,CAACF,CAAC,CAACpB,QAAQ,CAACI,CAAC,CAAC,CAAC,CAACS,GAAG,CAACvB,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE;AAEA,SAASiC,MAAM,CAACC,MAAM,EAAE7B,OAAO,EAAE8B,SAAS,EAAE;EAC1CxC,KAAK,CAACyC,iBAAiB,CAACF,MAAM,EAAE7B,OAAO,EAAE8B,SAAS,CAAC;;EAEnD;EACA,MAAM1B,CAAC,GAAGf,IAAI,CAAC2C,KAAK,CAACH,MAAM,CAAC;EAC5B,MAAMvB,EAAE,GAAGf,OAAO,CAACgB,WAAW,CAACH,CAAC,CAACI,OAAO,CAAC;EACzC,MAAMyB,CAAC,GAAG1C,OAAO,CAACwB,WAAW,CAACe,SAAS,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACrD,MAAMC,CAAC,GAAG5C,OAAO,CAACwB,WAAW,CAACe,SAAS,CAACI,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACtD5C,KAAK,CAAC8C,mBAAmB,CAACH,CAAC,EAAEE,CAAC,CAAC;EAC/B,MAAMV,CAAC,GAAGpC,IAAI,CAACqC,IAAI,CAACnC,OAAO,CAACgB,WAAW,CAAC0B,CAAC,CAAC,EAAE3B,EAAE,EAAEN,OAAO,CAAC;EACxD,MAAMsB,CAAC,GAAGjC,IAAI,CAACgD,IAAI,CAACF,CAAC,EAAEV,CAAC,EAAErB,CAAC,CAAC;EAC5B,IAAIkB,CAAC,CAACnC,KAAK,CAACmD,UAAU,CAAChB,CAAC,CAAC,IAAI,CAACjC,IAAI,CAACkD,MAAM,CAACjB,CAAC,CAAC,IAAI,CAACA,CAAC,CAACd,OAAO,CAACgC,MAAM,CAACP,CAAC,CAAC,EAAE;IACpE,MAAM,IAAIZ,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF;AAEA,SAASoB,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAClDtD,KAAK,CAACuD,sBAAsB,CAACH,OAAO,EAAEC,QAAQ,EAAEC,UAAU,CAAC;;EAE3D;EACA,IAAIE,QAAQ,GAAGlD,IAAI;EACnB,IAAImD,SAAS,GAAG,IAAI;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,MAAM5C,CAAC,GAAGf,IAAI,CAAC2C,KAAK,CAACU,OAAO,CAACM,CAAC,CAAC,CAAC;IAChC,MAAM1C,EAAE,GAAGf,OAAO,CAACgB,WAAW,CAACH,CAAC,CAACI,OAAO,CAAC;IACzC,MAAMyB,CAAC,GAAG1C,OAAO,CAACwB,WAAW,CAAC6B,UAAU,CAACI,CAAC,CAAC,CAACd,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzD,MAAMC,CAAC,GAAG5C,OAAO,CAACwB,WAAW,CAAC6B,UAAU,CAACI,CAAC,CAAC,CAACd,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1D5C,KAAK,CAAC8C,mBAAmB,CAACH,CAAC,EAAEE,CAAC,CAAC;IAC/B,MAAMV,CAAC,GAAGpC,IAAI,CAACqC,IAAI,CAACnC,OAAO,CAACgB,WAAW,CAAC0B,CAAC,CAAC,EAAE3B,EAAE,EAAEqC,QAAQ,CAACK,CAAC,CAAC,CAAC;IAC5D,MAAM1B,CAAC,GAAGjC,IAAI,CAAC2C,KAAK,CAACY,UAAU,CAACI,CAAC,CAAC,CAACd,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEhD,IAAIc,CAAC,KAAK,CAAC,EAAE;MACXF,QAAQ,GAAGA,QAAQ,CAACnB,GAAG,CAACQ,CAAC,CAAC;MAC1BY,SAAS,GAAGzB,CAAC;MACbyB,SAAS,GAAGA,SAAS,CAACpB,GAAG,CAACvB,CAAC,CAACC,QAAQ,CAACoB,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MACL,MAAMyB,CAAC,GAAG7D,IAAI,CAAC8D,OAAO,EAAE;MACxBL,QAAQ,GAAGA,QAAQ,CAACnB,GAAG,CAACuB,CAAC,CAAC7C,QAAQ,CAAC8B,CAAC,CAAC,CAAC;MACtCY,SAAS,GAAGA,SAAS,CAACpB,GAAG,CAACL,CAAC,CAACjB,QAAQ,CAAC6C,CAAC,CAAC,CAAC;MACxCH,SAAS,GAAGA,SAAS,CAACpB,GAAG,CAACvB,CAAC,CAACC,QAAQ,CAAC6C,CAAC,CAAC7C,QAAQ,CAACoB,CAAC,CAAC,CAAC,CAAC;IACtD;EACF;EAEA,IAAI,CAAChC,CAAC,CAACY,QAAQ,CAACyC,QAAQ,CAAC,CAACN,MAAM,CAACO,SAAS,CAAC,EAAE;IAC3C,MAAM,IAAI1B,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF;AAEA+B,MAAM,CAACC,OAAO,GAAG;EACfvD,IAAI;EACJ8B,MAAM;EACNa;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}