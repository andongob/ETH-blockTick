{"ast":null,"code":"var assert = require('assert');\nvar BigInteger = require('bigi');\nvar Point = require('./point');\nfunction Curve(p, a, b, Gx, Gy, n, h) {\n  this.p = p;\n  this.a = a;\n  this.b = b;\n  this.G = Point.fromAffine(this, Gx, Gy);\n  this.n = n;\n  this.h = h;\n  this.infinity = new Point(this, null, null, BigInteger.ZERO);\n\n  // result caching\n  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2);\n\n  // determine size of p in bytes\n  this.pLength = Math.floor((this.p.bitLength() + 7) / 8);\n}\nCurve.prototype.pointFromX = function (isOdd, x) {\n  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p);\n  var beta = alpha.modPow(this.pOverFour, this.p); // XXX: not compatible with all curves\n\n  var y = beta;\n  if (beta.isEven() ^ !isOdd) {\n    y = this.p.subtract(y); // -y % p\n  }\n\n  return Point.fromAffine(this, x, y);\n};\nCurve.prototype.isInfinity = function (Q) {\n  if (Q === this.infinity) return true;\n  return Q.z.signum() === 0 && Q.y.signum() !== 0;\n};\nCurve.prototype.isOnCurve = function (Q) {\n  if (this.isInfinity(Q)) return true;\n  var x = Q.affineX;\n  var y = Q.affineY;\n  var a = this.a;\n  var b = this.b;\n  var p = this.p;\n\n  // Check that xQ and yQ are integers in the interval [0, p - 1]\n  if (x.signum() < 0 || x.compareTo(p) >= 0) return false;\n  if (y.signum() < 0 || y.compareTo(p) >= 0) return false;\n\n  // and check that y^2 = x^3 + ax + b (mod p)\n  var lhs = y.square().mod(p);\n  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p);\n  return lhs.equals(rhs);\n};\n\n/**\r\n * Validate an elliptic curve point.\r\n *\r\n * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive\r\n */\nCurve.prototype.validate = function (Q) {\n  // Check Q != O\n  assert(!this.isInfinity(Q), 'Point is at infinity');\n  assert(this.isOnCurve(Q), 'Point is not on the curve');\n\n  // Check nQ = O (where Q is a scalar multiple of G)\n  var nQ = Q.multiply(this.n);\n  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G');\n  return true;\n};\nmodule.exports = Curve;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}