{"ast":null,"code":"const Buffer = require('safe-buffer').Buffer;\nconst ecurve = require('ecurve');\nconst curve = ecurve.getCurveByName('secp256k1');\nconst math = require('./math');\nconst convert = require('./convert');\nconst concat = Buffer.concat;\nconst G = curve.G;\nfunction taprootConstruct(pubKey, scripts) {\n  // If the spending conditions do not require a script path, the output key should commit to an unspendable script path\n  // instead of having no script path. This can be achieved by computing the output key point as\n  // Q = P + int(hashTapTweak(bytes(P)))G.\n  // https://en.bitcoin.it/wiki/BIP_0341#cite_note-22\n  if (!scripts) {\n    scripts = [];\n  }\n  const h = taprootTree(scripts);\n  const Px = convert.intToBuffer(pubKey.affineX);\n  const P = math.liftX(Px);\n  const tweak = convert.bufferToInt(math.taggedHash('TapTweak', concat([Px, h])));\n  const Q = P.add(G.multiply(tweak));\n  return convert.intToBuffer(Q.affineX);\n}\nfunction taprootTree(scripts) {\n  let h = Buffer.alloc(32, 0);\n  if (!scripts || scripts.length === 0) {\n    return new Buffer(0);\n  }\n\n  // TODO(guggero): Implement script part.\n  return h;\n}\nmodule.exports = {\n  taprootConstruct\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}